<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joel in The House</title>
    <link>http://xmasuhai.xyz/</link>
    <description>Recent content on Joel in The House</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Joel Xu</copyright>
    <lastBuildDate>Sun, 16 Feb 2020 05:01:41 +0800</lastBuildDate>
    
        <atom:link href="http://xmasuhai.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://xmasuhai.xyz/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>【JS非全解03】JS对象基本用法</title>
      <link>http://xmasuhai.xyz/post/js/js%E9%9D%9E%E5%85%A8%E8%A7%A303js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 16 Feb 2020 05:01:41 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/js/js%E9%9D%9E%E5%85%A8%E8%A7%A303js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;JavaScript的对象是JS中唯一一种复杂类型，它可以存其他七种原始值（数字类型&lt;code&gt;Number&lt;/code&gt;、字符串类型&lt;code&gt;String&lt;/code&gt;、布尔类型&lt;code&gt;Boolean&lt;/code&gt;、&lt;code&gt;Undefined&lt;/code&gt;类型、&lt;code&gt;Null&lt;/code&gt;类型、符号类型&lt;code&gt;Symbol&lt;/code&gt;、&lt;code&gt;BigInt&lt;/code&gt;类型）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;重点内容提要&#34;&gt;重点内容提要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;声明对象的两种语法&lt;/li&gt;
&lt;li&gt;如何删除对象的属性&lt;/li&gt;
&lt;li&gt;如何查看对象的属性&lt;/li&gt;
&lt;li&gt;如何修改或增加对象的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;name&#39; in obj&lt;/code&gt;和&lt;code&gt;obj.hasOwnProperty(&#39;name&#39;)&lt;/code&gt;的区别&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;对象的定义&#34;&gt;对象的定义&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无序的数据集合&lt;/li&gt;
&lt;li&gt;键值对的集合&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;对象的写法&#34;&gt;对象的写法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = { &#39;name&#39;:&#39;frank&#39;, &#39;age&#39;:18 } //常用写法
let obj = new Object({&#39;name&#39;:&#39;frank&#39;}) //正规写法没人写
console.log({ &#39;name&#39;:&#39;frank&#39;, &#39;age&#39;:18 }) //匿名对象
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;key（键名）是&lt;strong&gt;字符串&lt;/strong&gt;，不是标识符（不以数字开头的)&lt;/li&gt;
&lt;li&gt;可以包含任意字符串，即使是空字符串、包含空格、中文、Emoji的字符串皆可，但没人这么用，此时引号不能省略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Chrome&lt;/code&gt;的控制台返回值有欺骗性，用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来查看正确的键名&lt;/li&gt;

&lt;li&gt;&lt;p&gt;除了字符串，&lt;code&gt;symbol&lt;/code&gt;也能做属性名，但不常用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = { &#39;name family&#39;:&#39;frank&#39;, &#39;age&#39;:18 }
let obj2{ &#39;&#39;:1 } //fine~
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;引号可以省略，省略后只能写*标识符*（符合标识符规则的字符）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;就算引号省略，键名也还是字符串&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;属性名&#34;&gt;属性名&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;每个&lt;code&gt;key&lt;/code&gt;（键）都是对象的属性名（property）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;属性值&#34;&gt;属性值&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;每个&lt;code&gt;value&lt;/code&gt;都是对象的属性值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;不规范的属性名&#34;&gt;不规范的属性名&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;所有属性名会自动变成字符串&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {
    1:&#39;a&#39;,
    3.2:&#39;b&#39;,
    1e2:true,
    1e-2:false,
    .234:true,
    0xFF:true
};//&amp;lt; Object { 1: &amp;quot;a&amp;quot;, 100: true, 255: true, &amp;quot;3.2&amp;quot;: &amp;quot;b&amp;quot;, &amp;quot;0.01&amp;quot;: false, &amp;quot;0.234&amp;quot;: true }

Object.keys(obj); //&amp;lt; Array(6) [ &amp;quot;1&amp;quot;, &amp;quot;100&amp;quot;, &amp;quot;255&amp;quot;, &amp;quot;3.2&amp;quot;, &amp;quot;0.01&amp;quot;, &amp;quot;0.234&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加引号&lt;/strong&gt;是最安全的键值写法，否则，键名就不一定符合预期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.keys(obj)&lt;/code&gt;可以得到&lt;code&gt;obj&lt;/code&gt;的所有&lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;变量的值-做属性名&#34;&gt;*变量的值*做属性名&lt;/h3&gt;

&lt;h4 id=&#34;如何用变量做属性名&#34;&gt;如何用变量做属性名&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;之前都是用*常量*做属性名&lt;/li&gt;

&lt;li&gt;&lt;p&gt;想以变量的值作为属性名，以&lt;code&gt;[]&lt;/code&gt;将变量括起来，这是ES6的新增语法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let  a = &#39;xxx&#39;
var obj = {
a : 1111,
&#39;a&#39; : 2222,
[a] : 3333
}

// ES6之前的做法
var obj = {}
obj[a] = 111
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另一些例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let p1 = &#39;name&#39;
let obj = {p1:&#39;frankfang&#39;} //这样写，属性名为&#39;p1&#39;
let obj = {[p1]:&#39;frankfang&#39;} //这样写，属性名为&#39;name&#39;
var obj = {
    [1+2+3+4]:&#39;十&#39;
}
// obj {10:&amp;quot;十&amp;quot;} 这里的10是字符串的&#39;10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;对比&#34;&gt;对比&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;不加&lt;code&gt;[]&lt;/code&gt;的属性名会自动变成字符串&lt;/li&gt;
&lt;li&gt;加了&lt;code&gt;[]&lt;/code&gt;则会被当做变量并先求值，再作为字符串，成为属性名&lt;/li&gt;
&lt;li&gt;值如果不是字符串，则会自动变成字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;对象的-隐藏-属性&#34;&gt;对象的*隐藏*属性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;对象&lt;code&gt;obj&lt;/code&gt;，点开控制台看到有个属性&lt;code&gt;__proto__&lt;/code&gt;，控制台骗你，&lt;code&gt;__proto__&lt;/code&gt;并非指向&lt;code&gt;Object&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;JS中每一个对象都有一个隐藏属性&lt;/li&gt;
&lt;li&gt;这个隐藏属性存储着其&lt;strong&gt;共有属性组成的对象&lt;/strong&gt;的&lt;strong&gt;&lt;em&gt;地址&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这个*共有属性组成的对象*叫做原型&lt;/li&gt;
&lt;li&gt;也就是说，隐藏属性存储着&lt;strong&gt;原型的地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;共有属性省内存&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;代码示例&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj = {}
obj.toString() //不报错
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;不报错是因为&lt;code&gt;obj&lt;/code&gt;的隐藏属性&lt;strong&gt;&lt;em&gt;对应的对象&lt;/em&gt;&lt;/strong&gt;上有&lt;code&gt;toString&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;原型即共有属性&lt;/li&gt;
&lt;li&gt;内存举例：&lt;code&gt;#409&lt;/code&gt;存着&lt;code&gt;toString()&lt;/code&gt;、&lt;code&gt;valueOf()&lt;/code&gt;、&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义一个对象&lt;code&gt;obj2&lt;/code&gt;，地址&lt;code&gt;#901&lt;/code&gt;，里面有&lt;code&gt;__proto__&lt;/code&gt;属性指向&lt;code&gt;#409&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这个对象就是原型，而&lt;code&gt;#409&lt;/code&gt;是它的地址，&lt;code&gt;#409&lt;/code&gt;所代表的这块内存所表示的对象是原型&lt;/li&gt;
&lt;li&gt;它是&lt;code&gt;obj&lt;/code&gt;的原型，也是任何一个新对象的原型&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;one more thing&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;除了字符串，&lt;code&gt;symbol&lt;/code&gt;也能做属性名&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let a = Symbol()
let obj = { [a]: &#39;Hello&#39; }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;目前（2020）不常用，在学「迭代」的时候会用到&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;增删改查&#34;&gt;增删改查&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;「增删改查」对象的属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;增加属性-写入属性&#34;&gt;增加属性（写入属性）&lt;/h3&gt;

&lt;h4 id=&#34;直接赋值&#34;&gt;直接赋值&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {name: &#39;frank&#39;} //name自动变为字符串
obj.name = &#39;frankfang&#39; //name自动变为字符串
obj[&#39;name&#39;] = &#39;fangfang&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;&lt;code&gt;obj[name] = &#39;frank&lt;/code&gt;&lt;/del&gt; 错误，因为name 值不确定，不信，再看&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;obj[&#39;na&#39; + &#39;me&#39;] = &#39;frank&#39;
let key  = &#39;name&#39;; obj[key] = &#39;frank&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;let key = &#39;name&#39;;&lt;/code&gt; &lt;del&gt;&lt;code&gt;obj.key = &#39;frank&#39;&lt;/code&gt;&lt;/del&gt; 错误，因为&lt;code&gt;obj.key&lt;/code&gt;等价于&lt;code&gt;obj[&#39;key&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;批量赋值&#34;&gt;批量赋值&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {}
Object.assign(obj,{age: 30, gender: &#39;oldman&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;增加共有属性&#34;&gt;增加共有属性&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;无法通过自身，来增加共有属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {},obj2{} //共有toString
obj.toString = &#39;xxx&#39; //只会在改obj的自身叫toString的属性
obj2.toString //还是在原型链上
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;硬要增加原型链上的属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;obj.__proto__.toString = &#39;xxx&#39; //不推荐用__proto__
Object.prototype.toString = &#39;xxx&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;删除属性&#34;&gt;删除属性&lt;/h3&gt;

&lt;h4 id=&#34;delete-obj-xxx-或-delete-obj-xxx&#34;&gt;&lt;code&gt;delete obj.xxx&lt;/code&gt;或&lt;code&gt;delete obj[&#39;xxx&#39;]&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;即可删除&lt;code&gt;obj&lt;/code&gt;的&lt;code&gt;xxx&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;请区分「属性值为&lt;code&gt;undefined&lt;/code&gt;」和「不含属性名」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete obj[&#39;xxx&#39;]&lt;/code&gt;注意&lt;code&gt;[]&lt;/code&gt;里的引号&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，要求是一个字符串的形式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;不含属性名&#34;&gt;不含属性名&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {}
&#39;xxx&#39; in obj === false //验证是否删除属性
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;含属性名-但值为-undefined&#34;&gt;含属性名，但值为&lt;code&gt;undefined&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {}
obj.xxx = undefined
&#39;xxx&#39; in obj &amp;amp;&amp;amp; obj.xxx === undefined //true
&#39;x&#39; in obj //false
&#39;x&#39; in obj2//true
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意-obj-xxx-undefined&#34;&gt;注意&lt;code&gt;obj.xxx === undefined&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所以&lt;code&gt;obj.xxx === undefined&lt;/code&gt;不能断定&lt;code&gt;xxx&lt;/code&gt;是否为&lt;code&gt;obj&lt;/code&gt;的属性&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj = {}
var obj2 = {xxx: undefined}
/* 判断 */
obj.xxx === undefined //true
obj2.xxx === undefined //true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;严谨：&lt;code&gt;没有&lt;/code&gt;和&lt;code&gt;有但undefined&lt;/code&gt;是不一样的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj = {name: &#39;frank&#39;, age: 18}
obj.name = undefined //仅删掉属性值，未删掉属性名
delete obj.name //删掉属性名，属性值自然就被同时删掉
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;就算你删掉属性后再同样地删一次，JS也不报错&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所以要验证&lt;code&gt;&#39;xxx&#39; in obj&lt;/code&gt;，注意属性名一定要加引号&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj = {name: &#39;frank&#39;, age: 18}
obj.name = undefined

&#39;name&#39; in obj //true
&#39;name&#39; in obj &amp;amp;&amp;amp; obj.name === undefined //true

delete obj.name
delete obj[&#39;name&#39;]

//验证是否还存在属性&#39;name&#39;
&#39;name&#39; in obj === false //true
&#39;age&#39; in obj === false //false
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;只能用&lt;code&gt;&#39;xxx&#39; in obj&lt;/code&gt; 查看属性名是否还在对象中：true表示在，false表示不在&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;&#39;xxx&#39; in obj &amp;amp;&amp;amp; obj.xxx === undefined&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;，表示属性&lt;code&gt;xxx&lt;/code&gt;还在&lt;code&gt;obj&lt;/code&gt;中，而且属性&lt;code&gt;xxx&lt;/code&gt;的值是&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;obj.xxx === undefined&lt;/code&gt;不能断定&lt;code&gt;&#39;xxx&#39;&lt;/code&gt; 是否为&lt;code&gt;obj&lt;/code&gt;的属性。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {}
let obj2 = {xxx: undefined}
obj.xxx === undefined //true
obj2.xxx === undefined //true
obj.xxx === null //false null空占位符
obj2.xxx === null //false null空占位符
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;小结&#34;&gt;小结&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;判断对象是否含有某个属性名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&#39;xxx&#39; in obj&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;判断对象的某个属性的属性值是否为空，预期值&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&#39;xxx&#39; in obj &amp;amp;&amp;amp; obj.xxx === undefined&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;delete&lt;/code&gt;操作符用于删除对象的属性&lt;/p&gt;

&lt;p&gt;那怎么删掉对象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj  = {}
window.obj //{} 自动变成window的属性
obj === window.obj //true
delete obj //
obj //{} 还在
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete&#34;&gt;delete 操作符 MDN&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;改变属性-值&#34;&gt;改变属性（值）&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;原来没有某个属性，就是增加；有某个属性，就是修改&lt;/p&gt;

&lt;p&gt;修改属性的值，即赋值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;增加或修改属性-写入属性&#34;&gt;增加或修改属性（写入属性）&lt;/h4&gt;

&lt;h4 id=&#34;直接赋值-增加或修改&#34;&gt;直接赋值 增加或修改&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;原来有某个属性，就是修改，确切地分为覆盖掉原来所有的属性值即修改属性值，还是增加新属性，方法一样&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// 开发不用var 再次赋值不报错，会覆盖掉原来的所有属性，所以用let
let obj = {name: &#39;frank&#39;} //name自动变为字符串
obj.name = &#39;frankfang&#39; //name自动变为字符串
obj[&#39;name&#39;] = &#39;fangfang&#39; //直接修改
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;&lt;code&gt;obj[name] = &#39;frank&#39;&lt;/code&gt;&lt;/del&gt; 错误，因为name 值不确定，不信看&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {}
obj[name] = &amp;quot;fang&amp;quot;
name //&amp;quot;&amp;quot;
Object.keys(obj) //Array[&amp;quot;&amp;quot;]
console.dir(obj) //{&amp;quot;&amp;quot;:&amp;quot;fang&amp;quot;,...}
obj.hasOwnProperty(&amp;quot;&amp;quot;) //true
Object.values(obj) //[&amp;quot;fang&amp;quot;}
Object.entries(obj)
obj[&#39;&#39;] //&amp;quot;fang&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;obj[&#39;na&#39; + &#39;me&#39;] = &#39;frank&#39; //经过拼接的字符串作为属性
let key  = &#39;name&#39;; obj[key] = &#39;frank&#39; //声明变量，变量的值为属性值
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;let key = &#39;name&#39;;&lt;/code&gt; &lt;del&gt;&lt;code&gt;obj.key = &#39;frank&#39;&lt;/code&gt;&lt;/del&gt; 错误，因为&lt;code&gt;obj.key&lt;/code&gt;等价于&lt;code&gt;obj[&#39;key&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;批量赋值-批量增加属性-es6&#34;&gt;批量赋值，批量增加属性（ES6）&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {}
Object.assign(obj,{age: 30, gender: &#39;oldman&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;assign&lt;/code&gt;就是赋值的意思&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;增加或修改共有属性&#34;&gt;增加或修改共有属性&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;无法通过自身，来增加或修改共有属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {},obj2 = {} //共有toString
obj.toString = &#39;xxx&#39; //只会在改obj的自身叫toString的属性
obj2.toString //还是在原型链上
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;JS设计成读的时候，回去看对象隐藏属性发准考的原型；写的时候，不会改掉原型，只能写到自身的属性上&lt;/li&gt;
&lt;li&gt;修改单个不同对象的共有属性不会互相覆盖&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;硬要增加或修改原型链上的属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;obj.__protp__.toString = &#39;xxx&#39; //不推荐用__proto__

obj.__proto__ === window.Object.prototype //true 同一个地址

//硬要增加或修改原型链上的属性，就用
Object.prototype.toStirng = &#39;xxx&#39;
window.Object.prototype.toStirng = &#39;xxx&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;谨慎修改原型，可能引起很多问题，这就是JS脆弱的地方，可以随时修改任意对象的原型属性，毁掉整个对象体系&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj = {name: &amp;quot;fang&amp;quot;, age:false}
console.dir(obj)
obj.__proto__ = null
console.dir(obj) //得到一个没有原型的“纯”对象,但没一点儿卵用
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;修改隐藏属性&#34;&gt;修改隐藏属性&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;不推荐使用&lt;code&gt;__proto__&lt;/code&gt;，性能低&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {name:&#39;frank&#39;}
let obj2 = {name:&#39;fang&#39;}
let common = {kind:&#39;human&#39;}

/* 不推荐 */
obj.__proto__ = common
obj2.__proto__ = common
console.dir(obj)
console.dir(obj2)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;在原型中加了一个节点，原型后面还有原型，即原型链&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;推荐使用-object-create-common-es6-新方法&#34;&gt;推荐使用&lt;code&gt;Object.create(common)&lt;/code&gt;，（ES6）新方法&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {name:&#39;frank&#39;}
let obj2 = {name:&#39;fang&#39;}
let common = {kind:&#39;human&#39;}
/* 推荐 */
let obj = Object.create(common)
obj.name = &#39;frank&#39;
let obj2 = Object.create(common)
obj.name = &#39;fang&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create&#34;&gt;&lt;code&gt;Object.create(common)&lt;/code&gt; MDN&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var common = {&#39;国籍&#39;:&#39;中国&#39;, hairColor: &#39;gold&#39;}
var person = Object.create(common)
console.dir(person)
var person = Object.create(common,{
    name:{value:&#39;frank&#39;} //很麻烦
})
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;一创建时，就告指定原型&lt;/p&gt;

&lt;p&gt;规范：要改就一开始就该，别后来再改&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;查看属性&#34;&gt;查看属性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;分查看所有属性，和查看单个属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;查看所有属性-读取属性&#34;&gt;查看所有属性（读取属性）&lt;/h4&gt;

&lt;h5 id=&#34;仅查看自身-独有属性&#34;&gt;仅查看自身&lt;strong&gt;&lt;em&gt;独有属性&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.keys(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回一个包含所有属性名字符串的数组&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;查看-独有-共有-的所有属性&#34;&gt;查看&lt;strong&gt;&lt;em&gt;独有&lt;/em&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;em&gt;共有&lt;/em&gt;&lt;/strong&gt; 的所有属性&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.dir(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一目录的形式打出来，但chrome控制台瞎返回了一个&lt;code&gt;Object&lt;/code&gt;，点开可以看到&lt;strong&gt;&lt;em&gt;自身&lt;/em&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;em&gt;共有&lt;/em&gt;&lt;/strong&gt; 的所有属性&lt;code&gt;__proto__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者自己依次用&lt;code&gt;Object.keys()&lt;/code&gt;在控制台打印出&lt;code&gt;obj.__proto__&lt;/code&gt;，这种方法不推荐，不规范&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;判断一个属性是自身的独有的-还是共有的-obj-hasownproperty-propertyname&#34;&gt;判断一个属性是自身的独有的，还是共有的：&lt;strong&gt;&lt;em&gt;obj.hasOwnProperty(&amp;lsquo;propertyName&amp;rsquo;)&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;toString&#39; in obj //true&lt;/code&gt;是不会区分属性是自身的，还是共有的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;xxx&#39; in obj &amp;amp;&amp;amp; obj.xxx === undefined&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;，表示属性&lt;code&gt;xxx&lt;/code&gt;还在&lt;code&gt;obj&lt;/code&gt;中，而且属性&lt;code&gt;xxx&lt;/code&gt;的值是&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.xxx === undefined&lt;/code&gt;不能断定&lt;code&gt;&#39;xxx&#39;&lt;/code&gt; 是否为&lt;code&gt;obj&lt;/code&gt;的属性&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;&#39;xxx&#39; in obj&lt;/code&gt; 只用来查看属性名是否还在对象中：true表示在，false表示不在&lt;/li&gt;
&lt;li&gt;只能用&lt;code&gt;obj.hasOwnProperty(&#39;toString&#39;)&lt;/code&gt;，返回&lt;code&gt;false&lt;/code&gt;说明不是共有属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;仅查看所有属性的值&#34;&gt;仅查看所有属性的值&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.values(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回一个包含所有属性值字符串的数组&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;既要看名-又要看值&#34;&gt;既要看名，又要看值&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.entries(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回一个数组，这个数组包含两个数组&lt;/li&gt;
&lt;li&gt;一个数组包含所有属性名字符串&lt;/li&gt;
&lt;li&gt;另一个包含所有属性值字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;补充插入&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;原型&#34;&gt;原型&lt;/h3&gt;

&lt;h4 id=&#34;每个对象都有原型&#34;&gt;每个对象都有原型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;原型里存着对象的共有属性&lt;/li&gt;
&lt;li&gt;比如&lt;code&gt;obj&lt;/code&gt;的原型就是一个对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.__proto__&lt;/code&gt;存着这个对象的地址&lt;/li&gt;
&lt;li&gt;这个对象里有&lt;code&gt;toString/constructor/valueOf&lt;/code&gt;等属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;对象的原型也是一个对象&#34;&gt;对象的原型也是一个对象&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;所以对象的原型也有原型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj = {}&lt;/code&gt;的原型即为所有对象的原型&lt;/li&gt;
&lt;li&gt;这个原型包含所有对象的共有属性，是&lt;strong&gt;对象的根&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这个原型也有原型，是&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;console.log(obj.__proto__)
console.log(obj.__proto__.__proto__) //null
&#39;__proto__&#39; in obj.__proto__ //true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;把根对象的原型人为地指定为空值&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;查看单个属性&#34;&gt;查看单个属性&lt;/h4&gt;

&lt;h5 id=&#34;两种方法查看单个属性&#34;&gt;两种方法查看单个属性&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;中括号语法：&lt;code&gt;obj[&#39;key&#39;]&lt;/code&gt;，最明确&lt;/li&gt;
&lt;li&gt;点语法：&lt;code&gt;obj.key&lt;/code&gt;，易被误导成&lt;code&gt;key&lt;/code&gt;不是字符串，其实是字符串&lt;/li&gt;

&lt;li&gt;&lt;p&gt;坑新人语法：&lt;code&gt;obj[key]&lt;/code&gt;，其变量&lt;code&gt;key&lt;/code&gt;值一般不为字符串&lt;code&gt;&#39;key&#39;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var obj = {name: &#39;frankfang&#39;, age: 30}
obj[&#39;name&#39;] //&#39;frankfang&#39;
obj.name //&#39;frankfang&#39;
obj[name] //undefined

name //&amp;quot;&amp;quot;
window.name = &#39;age&#39;
obj[name] //18

obj[&#39;na&#39;+&#39;me&#39;] //&#39;frankfang&#39;

obj[console.log(&#39;name&#39;)] //undefined，打印出的是name

console.log(&#39;name&#39;) //返回的都是undefined，打印出的是name

obj[console.log(&#39;name&#39;)] //相当于obj[&#39;undefined&#39;]，打印出的是name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;优先使用中括号语法&#34;&gt;优先使用中括号语法&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;点语法会误导，让人误以为&lt;code&gt;.key&lt;/code&gt;不是字符串&lt;/li&gt;
&lt;li&gt;等能够确定不会混淆两种语法，再改用点语法&lt;/li&gt;
&lt;li&gt;比如用点语法时，就加注释&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;重要知识点&#34;&gt;重要知识点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;读对象的属性时，
如果使用 [ ] 语法，那么 JS 会先求 [ ] 中表达式的值&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意区分表达式是变量还是常量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;如果使用点语法，那么点后面一定是 string 常量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;易混淆的&#34;&gt;易混淆的&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;obj.name&lt;/code&gt;等价于&lt;code&gt;obj[&#39;name&#39;]&lt;/code&gt;（注意这里的&lt;code&gt;[]&lt;/code&gt;中是字符串&lt;code&gt;&#39;name&#39;&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.name&lt;/code&gt;不等价于&lt;code&gt;obj[name]&lt;/code&gt;（注意这里的&lt;code&gt;[]&lt;/code&gt;中是变量&lt;code&gt;name&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;简单说来，&lt;code&gt;.name&lt;/code&gt;是字符串&lt;code&gt;&#39;name&#39;&lt;/code&gt;，而不是变量&lt;/p&gt;

&lt;p&gt;再举一例&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj = {name:&#39;fang&#39;}
let name = &#39;frankFang&#39;
/* 注意以下 */
obj[name] === obj[&#39;frankFang&#39;] //true
obj[name] === obj[&#39;name&#39;] //false
obj[name] === obj.name //false
obj[&#39;name&#39;] === obj[&#39;frankFang&#39;] //false
obj[&#39;name&#39;] === obj.name //true
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;obj[name]&lt;/code&gt;等价于&lt;code&gt;obj[&#39;frankfang&#39;]&lt;/code&gt;，而不等价于&lt;code&gt;obj[&#39;name&#39;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;而不是&lt;code&gt;obj[&#39;name&#39;]&lt;/code&gt;和&lt;code&gt;obj.name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;面试就看分清变量&lt;code&gt;name&lt;/code&gt;和常量字符串&lt;code&gt;&#39;name&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记清&lt;code&gt;obj.name&lt;/code&gt;、&lt;code&gt;obj[&#39;name&#39;]&lt;/code&gt;、&lt;code&gt;obj[name]&lt;/code&gt;三者的区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;必须搞清的面试题&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let list = [&#39;name&#39;,&#39;age&#39;,&#39;gender&#39;]
let person  = {
name: &#39;xiaofang&#39;, age: 30, gender: &#39;femaleMaybe&#39;
}
for (let i = 0; i &amp;lt; list.length; i++){
let name = list[i]
console.log(person__???__)
}//打印person的所有属性
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;填空（坑）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;console.log(person.name)&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;console.log(person[name])&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;区分&lt;code&gt;.name&lt;/code&gt;和&lt;code&gt;&#39;name&#39;&lt;/code&gt;为什么这么重要&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;学&lt;code&gt;vue&lt;/code&gt;的时候就知道厉害了&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;删&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj =  {name: &#39;fang&#39;}
/* 只能删属性 */
delete obj[&#39;name&#39;]
&#39;name&#39; in obj  //false 没办法判断是自身/共有属性
obj.hasOwnProperty(&#39;name&#39;) //false 有可能这个属性是在原型上的，或者根本没有这个属性
obj = null //交给垃圾回收机制
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;查&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let obj =  {name: &#39;fang&#39;}
/**/
Object.keys(obj)
console.dir(obj)
obj[&#39;name&#39;]
obj.name //记住这里的name是字符串
obj[name] //记住这里的name是变量
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;改&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;改自身&lt;code&gt;obj[&#39;name&#39;] = &#39;jack&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;批量改自身&lt;code&gt;Object.assign(obj,{age:18,...})&lt;/code&gt;，先赋值空对象&lt;/li&gt;
&lt;li&gt;改共有属性&lt;code&gt;obj.__proto__[&#39;toString&#39;] = &#39;xxx&#39;&lt;/code&gt;，不推荐&lt;/li&gt;
&lt;li&gt;改共有属性&lt;code&gt;Object.prototype[&#39;toString&#39;] = &#39;xxx&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改原型&lt;code&gt;obj.__proto__ = common&lt;/code&gt;，不推荐&lt;/li&gt;
&lt;li&gt;改原型&lt;code&gt;let obj = Object.create(common)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有&lt;code&gt;__proto__&lt;/code&gt;的代码都是墙裂不推荐写的，不可用于业务代码中，仅供学习测试&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;增(改)，属于写&lt;/p&gt;

&lt;p&gt;基本同上：已有属性则改；没有属性则增&lt;/p&gt;

&lt;p&gt;查属于读，查的时候会看原型链&lt;/p&gt;

&lt;p&gt;增改时不会看原型链，增改都是自身&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;/* 区分Object.create() 和new Object()*/
var obj1 = Object.create({name:&#39;frank&#39;}) //增改原型属性
console.dir(obj1)
var obj2 = new Object({name:&#39;frank&#39;}) //增改自身属性
console.dir(obj2)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;原型是个对象，共有属性是原型对象的所有属性；原型包含共有属性，共有属性依附于原型对象上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;参考文章&#34;&gt;参考文章&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-17-0-56-36.pdf&#34;&gt;JS 对象.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;入门&lt;a href=&#34;https://wangdoc.com/javascript/&#34;&gt;《网道 JavaScript 教程》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;相关文章&#34;&gt;相关文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【JS非全解02】JS数据类型</title>
      <link>http://xmasuhai.xyz/post/js/js%E9%9D%9E%E5%85%A8%E8%A7%A302js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 14 Feb 2020 01:37:55 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/js/js%E9%9D%9E%E5%85%A8%E8%A7%A302js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      
        <description>

&lt;h2 id=&#34;数字与字符串&#34;&gt;数字与字符串&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;&#39;1&#39;&lt;/code&gt;完全不同&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;功能&#34;&gt;功能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;数字能加减乘除模和值的比较，字符串不能计算值，无法进行值的大小比较（严谨的说不算隐式转换的话）&lt;/li&gt;
&lt;li&gt;字符串能表示电话号码，数字不行，数字不能表示开头是&lt;code&gt;0&lt;/code&gt;，硬上会造成数据损失&lt;/li&gt;
&lt;li&gt;不同国家的电话号码中甚至可以有字母&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;存储形式&#34;&gt;存储形式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JS中，数字是用64位浮点数的形式存储的&lt;/li&gt;
&lt;li&gt;JS中，字符串是用类似&lt;code&gt;UTF-8&lt;/code&gt;的形式存储的（&lt;code&gt;UCS-2&lt;/code&gt; ASCII码）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;如何存数字&#34;&gt;如何存数字&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;把十进制转二进制即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;二进制&#34;&gt;二进制&lt;/h3&gt;

&lt;h3 id=&#34;10转2&#34;&gt;10转2&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;有公式，但程序员不是数学家，从来不套公式，只尝试，按数位展开，按位累加&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;2转10&#34;&gt;2转10&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xima.tv/4S1hns&#34;&gt;快算进制转换&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;用十六进制表示二进制&#34;&gt;用十六进制表示二进制&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;TL，DR&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;计算器程序员模式&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEX&lt;/code&gt;16 &lt;code&gt;BIN&lt;/code&gt;2 &lt;code&gt;OCT&lt;/code&gt;8 &lt;code&gt;DEC&lt;/code&gt;10&lt;/p&gt;

&lt;h2 id=&#34;如何存字符&#34;&gt;如何存字符&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;转成数字，但&lt;code&gt;&#39;1&#39;&lt;/code&gt;不能用&lt;code&gt;1&lt;/code&gt;来表示&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;utf8&#34;&gt;&lt;code&gt;UTF8&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#34;存储-abc123&#34;&gt;存储&lt;code&gt;abc123&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;编号&lt;code&gt;0~127&lt;/code&gt;（2^7）表示所有符号&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;表示结束字符&lt;code&gt;NUL&lt;/code&gt;(null)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt;表示换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;13&lt;/code&gt;表示回车&lt;/li&gt;
&lt;li&gt;&lt;code&gt;27&lt;/code&gt;表示&amp;rsquo;ESC&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;32&lt;/code&gt;表示空格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;33&lt;/code&gt;~&lt;code&gt;47&lt;/code&gt;表示标点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;48&lt;/code&gt;&lt;/strong&gt;~&lt;strong&gt;&lt;code&gt;57&lt;/code&gt;&lt;/strong&gt; 表示数字符号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;65&lt;/code&gt;~&lt;code&gt;90&lt;/code&gt;表示大写字母&lt;/li&gt;
&lt;li&gt;&lt;code&gt;97&lt;/code&gt;~&lt;code&gt;122&lt;/code&gt;表示小写字母&lt;/li&gt;
&lt;li&gt;&lt;code&gt;127&lt;/code&gt;表示删除键&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;用&lt;code&gt;48&lt;/code&gt;表示，&lt;code&gt;A&lt;/code&gt;用&lt;code&gt;65&lt;/code&gt;表示，&lt;code&gt;a&lt;/code&gt;用&lt;code&gt;97&lt;/code&gt;表示，其他用到再查&lt;/p&gt;

&lt;p&gt;其他编码基本兼容以上，即前128位都为以上表示&lt;/p&gt;

&lt;p&gt;键盘监听事件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;中文字符的编码&#34;&gt;中文字符的编码&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;「国标2312」&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0000&lt;/code&gt;~&lt;code&gt;FFFF&lt;/code&gt;表示汉字&lt;/p&gt;

&lt;p&gt;一个16进制数是4个&lt;code&gt;0/1&lt;/code&gt;位&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FFFF&lt;/code&gt;就是&lt;code&gt;4*4=16&lt;/code&gt;位，即两个字节&lt;/p&gt;

&lt;p&gt;最多收录&lt;code&gt;2^16 = 65536&lt;/code&gt;个字符&lt;/p&gt;

&lt;p&gt;但只收录了6k多汉字、西文字母和日文假名&lt;/p&gt;

&lt;p&gt;生僻字、繁体字、其他东亚字符无法表示&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;国标局官方的效率差，微软出了&lt;code&gt;GBK&lt;/code&gt;，国标扩&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;含&lt;code&gt;21886&lt;/code&gt;个汉字和图形符号&lt;/p&gt;

&lt;p&gt;收录中日韩使用的几乎所有汉字&lt;/p&gt;

&lt;p&gt;依然使用16位（两字节）&lt;/p&gt;

&lt;p&gt;后国标局推出&lt;code&gt;GB18030&lt;/code&gt;想取代&lt;code&gt;GBK&lt;/code&gt;，但竟然不兼容&lt;code&gt;GB2312&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;怎么表示其他语言文字，藏文，泰文&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;万国码&lt;code&gt;Unicode&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;unicode&#34;&gt;&lt;code&gt;Unicode&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;优点&#34;&gt;优点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;已收录0.13M多个字符（大于16位），世界通用&lt;/li&gt;
&lt;li&gt;以后会扩充&lt;/li&gt;
&lt;li&gt;最新版（2019）添加了一个字——令和的合体字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;两个字节不够用，每个字符要用三个及以上的字节&lt;/li&gt;
&lt;li&gt;所有文件都扩大50%，不划算&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;用（读写）&lt;code&gt;Unicode&lt;/code&gt;，存的时候简化&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;utf-8&#34;&gt;&lt;code&gt;UTF-8&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;鸡贼的算法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;存储-a&#34;&gt;存储「a」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;对应的&lt;code&gt;Unicode&lt;/code&gt;编号为&lt;code&gt;97&lt;/code&gt;，十六进制为&lt;code&gt;61&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unicode&lt;/code&gt;直接存： &lt;em&gt;&lt;code&gt;00000000&lt;/code&gt;&lt;/em&gt; &lt;em&gt;&lt;code&gt;00000000&lt;/code&gt;&lt;/em&gt;     &lt;strong&gt;&lt;code&gt;011000011&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTF-8&lt;/code&gt;偷懒存：&lt;strong&gt;&lt;code&gt;011000011&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;三字节变一字节，比GBK还省&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;存储-你&#34;&gt;存储「你」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;「你」对应&lt;code&gt;Unicode&lt;/code&gt;编号&lt;code&gt;4F60&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unicode&lt;/code&gt;直接存： &lt;em&gt;&lt;code&gt;00000000&lt;/code&gt;&lt;/em&gt; &lt;strong&gt;&lt;code&gt;01001111&lt;/code&gt;&lt;/strong&gt;     &lt;strong&gt;&lt;code&gt;01100000&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTF-8&lt;/code&gt;偷懒失败存：&lt;strong&gt;&lt;code&gt;11100100&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;10111101&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;10100000&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;还是三字节，没省，但是字母都能省一点&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;utf-8-中的-8-的意思是&#34;&gt;&lt;code&gt;UTF-8&lt;/code&gt;中的&lt;code&gt;8&lt;/code&gt;的意思是&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;最少可用8位存一个字符，其他可以是16位，24位数位&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;utf-8-的规则&#34;&gt;&lt;code&gt;UTF-8&lt;/code&gt;的规则&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;由开头的数字表示用几个8位表示&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;详见PDF第25页
&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-12-11-52-43.pdf&#34;&gt;数据类型和运算符.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;位运算&#34;&gt;位运算&lt;/h3&gt;

&lt;p&gt;TL,DR&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;比喻：去餐厅排队&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;如何存字符，就是编码，然后存编码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;&#39;1&#39;&lt;/code&gt; 功能不同，存储形式不同&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;是变成二进制直接存&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt;要经过编码（变成&lt;code&gt;49&lt;/code&gt;）再存&lt;/p&gt;

&lt;p&gt;那计算机怎么知道存的是数字还是字符？&lt;/p&gt;

&lt;p&gt;计算机不用知道，用文件格式表示&lt;/p&gt;

&lt;p&gt;文本格式&lt;code&gt;.txt&lt;/code&gt;全用字符串表示，可以在另存为中，选择保存的编码&lt;/p&gt;

&lt;p&gt;即计算机通过文件格式来约定存储的是什么&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.html&lt;/code&gt;文件只支持字符串&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;拉回正题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;js中的数据类型&#34;&gt;JS中的数据类型&lt;/h2&gt;

&lt;p&gt;目前八种（截止2020，以后还会增加？）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;7种原始类型（大小写无所谓只有写代码时要区分大小写）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;数字&lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;布尔&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;空&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;空&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;增加的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;符号&lt;code&gt;symbol&lt;/code&gt; 抄&lt;code&gt;ruby&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大型整数&lt;code&gt;bigint&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;1种复杂类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;对象&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;以下不是数据类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;数组、函数、日期&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;以上都属于&lt;code&gt;object&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;数字-number&#34;&gt;数字&lt;code&gt;number&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;64位浮点数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;写法&#34;&gt;写法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一般写法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;整数写法：&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;小数写法：&lt;code&gt;0.1&lt;/code&gt;或&lt;code&gt;.123&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;不常用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;科学记数法：&lt;code&gt;1.2e4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;八进制：&lt;code&gt;0123&lt;/code&gt;或&lt;code&gt;00123&lt;/code&gt;或&lt;code&gt;0o123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;十六进制：&lt;code&gt;0x3F&lt;/code&gt;或&lt;code&gt;0X3F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二进制：&lt;code&gt;0b11&lt;/code&gt;或&lt;code&gt;0B11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;特殊值&#34;&gt;特殊值&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;正零和负零&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;都等于&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;gt; 1/0
&amp;lt; Infinity

&amp;gt; 1/+0
&amp;lt; Infinity

&amp;gt; 1/-0
&amp;lt; -Infinity
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;无穷大&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Infinity&lt;/code&gt;、&lt;code&gt;+Infinity&lt;/code&gt;、&lt;code&gt;-Infinity&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;无法表示的数字&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;NaN(not a number)&lt;/li&gt;
&lt;li&gt;不能表示的数字，但TM还是一个数字&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但它不等于自己&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;gt; 0/0
&amp;lt; NaN

&amp;gt; NaN == NaN
&amp;lt; false
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;64位浮点数&#34;&gt;64位浮点数&lt;/h2&gt;

&lt;h3 id=&#34;js数字的存储形式&#34;&gt;JS数字的存储形式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;浮点就是 &amp;lsquo;浮动的点&amp;rsquo;，意思是小数点会乱动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;123.456&lt;/code&gt;可以表示为&lt;code&gt;1.23456e10^2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可表示为&lt;code&gt;12345.6e10^-2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;64位存储一个-number&#34;&gt;64位存储一个&lt;code&gt;number&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;符号占1位&lt;/li&gt;
&lt;li&gt;指数占11位（-1023~1024）&lt;/li&gt;
&lt;li&gt;有效数字占52位（开头的1省略）&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;JS浮点数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;11位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;53位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0正&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;指数部分（有正负）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有效数字（省去第一个&lt;code&gt;1&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1负&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;指数部分（有正负）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;有效数字（省去第一个&lt;code&gt;1&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;++±++  1.++01100110++ x 2^++8++（二进制）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;范围和精度&#34;&gt;范围和精度&lt;/h3&gt;

&lt;h4 id=&#34;范围-忽略符号位&#34;&gt;范围（忽略符号位）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;指数拉满、有效数字拉满，得到最大二进制数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.MAX_VALUE&lt;/code&gt;：&lt;code&gt;1.7976931348623157e+308&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指数负方向拉满、有效数字最小&lt;code&gt;1&lt;/code&gt;，得到最小值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NUmber.MIN_VALUE&lt;/code&gt;：&lt;code&gt;5e-324&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;精度&#34;&gt;精度&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;最多只能到&lt;code&gt;52+1&lt;/code&gt;个二进制位表示有效数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2^53&lt;/code&gt;对应的十进制是&lt;code&gt;9&lt;/code&gt;之后&lt;code&gt;15&lt;/code&gt;个零&lt;/li&gt;
&lt;li&gt;所以&lt;code&gt;15&lt;/code&gt;位有效数字以内都能精确表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16&lt;/code&gt;位有效数字如果小于&lt;code&gt;90&lt;/code&gt;开头，也能精确表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;911·000·000·000·000·1&lt;/code&gt; （忽略&lt;code&gt;·&lt;/code&gt;），就存不下来&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;字符串-string&#34;&gt;字符串&lt;code&gt;string&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;每个字符两个字节（阉割版UTF8）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;字符串-string-写法-es6&#34;&gt;字符串&lt;code&gt;string&lt;/code&gt;写法（ES6）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;单引号&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;Hi&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;双引号&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hello&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;反引号&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;`Aloha`&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引号不属于字符串的一部分，就像书名号不属于书名的一部分一样&lt;/li&gt;
&lt;li&gt;如果要在单引号里包含单引号咋办？&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;用转义符&lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;转义&#34;&gt;转义&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;用另一种写法表示你想要的东西&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;错误写法&#34;&gt;错误写法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;it&#39; ok&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JS引擎会以为&lt;code&gt;&#39;it&#39;&lt;/code&gt;就结束了，后面的看不懂&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Chrome&lt;/code&gt;控制台测试，不要看控制台的返回值的双引号，会扰乱视听&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;正确写法&#34;&gt;正确写法&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;在&lt;code&gt;Chrome&lt;/code&gt;控制台敲入以下代码试试&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;&#39;it\&#39;s ok&#39;&lt;/code&gt; 这就是转义&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;&amp;quot;it&#39;s ok&amp;quot;&lt;/code&gt; 交替使用&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; `it&amp;rsquo;s ok` 反斜杠通吃&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;转义其他表示法&#34;&gt;转义其他表示法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&#39;&lt;/code&gt;表示&lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt;表示&lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;表示换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\r&lt;/code&gt;表示回车&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;表示制表符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\\&lt;/code&gt;表示&lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\uFFFF&lt;/code&gt;表示对应的&lt;code&gt;Unicode&lt;/code&gt;字符&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;\xFF&lt;/code&gt;表示前&lt;code&gt;256&lt;/code&gt;个&lt;code&gt;Unicode&lt;/code&gt;字符&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;gt; &#39;\u4f60&#39;
&amp;lt; &amp;quot;你&amp;quot;

&amp;gt; &#39;\x31&#39;
&amp;lt; &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;多行字符串-string&#34;&gt;多行字符串&lt;code&gt;string&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在字符串例敲回车&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let s = `这样是
可以的
用反引号很容易做到
`
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;以前没有反引号的时候写起来很麻烦&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看&lt;a href=&#34;https://wangdoc.com/javascript/types/string.html&#34;&gt;网道 字符串&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;字符串的属性&#34;&gt;字符串的属性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;只有对象才有属性，隐式转换成了包装对象，才有了属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;字符串的长度&#34;&gt;字符串的长度&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;string.length&lt;/code&gt;的变态情况&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;123&#39;.length //3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;\n\r\t&#39;.length //3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;\\\\\\&#39;.length //3&lt;/code&gt;两个反斜杠表示一个反斜杠&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;&#39;.length //0&lt;/code&gt; 空字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; &#39;.length //1&lt;/code&gt; 空格字符串&lt;/li&gt;
&lt;li&gt;可以试试6个空格的长度，就是6&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;通过下标读取字符&#34;&gt;通过下标读取字符&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;string[index]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let s = &#39;hello&#39;
s[0]  //&amp;quot;h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意&lt;code&gt;index&lt;/code&gt;从&lt;code&gt;0&lt;/code&gt;开始&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[0]&lt;/code&gt;是第一个字符&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意&lt;code&gt;index&lt;/code&gt;到length&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let s = &#39;hello&#39;
s[5] // undefined，居然不报错
s[4] //&#39;o&#39;
s[s.length-1] //&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;base64-转码&#34;&gt;&lt;code&gt;base64&lt;/code&gt;转码&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;window.btoa(&amp;lsquo;xxx&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;正常字符串为&lt;code&gt;Base64&lt;/code&gt;编码的字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;window.atob(&amp;lsquo;xxx&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Base64&lt;/code&gt;编码的字符串转为原来的字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;一般用来隐藏招聘启事里的简历&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;邮箱：&lt;code&gt;ZmFuZ3lpbmdoYW5nQGZveG1haWwuY29t&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;「加密」不可靠，有其他专门的方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;布尔-boolean&#34;&gt;布尔&lt;code&gt;boolean&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;真或假&lt;/p&gt;

&lt;p&gt;只有两个值，注意大小写：&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;会得到-bool-值的运算符&#34;&gt;会得到&lt;code&gt;bool&lt;/code&gt;值的运算符&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;否定运算&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!value&lt;/code&gt;表示取反&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;相等运算（等性运算）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 != 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 === 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 !== 4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;比较运算&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;gt; 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;gt;= 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 &amp;lt; 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 &amp;lt;= 4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;if-配-bool&#34;&gt;&lt;code&gt;if&lt;/code&gt;配&lt;code&gt;bool&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;语句常常需要判断真假&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if(value){...}else{...}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;问题来了&lt;/p&gt;

&lt;p&gt;如果&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;bool&lt;/code&gt;值还好说&lt;/p&gt;

&lt;p&gt;如果&lt;code&gt;value&lt;/code&gt;不是&lt;code&gt;bool&lt;/code&gt;值，比如一个表达式，咋办，孰真孰假？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;是真是假，&lt;code&gt;0&lt;/code&gt;是真是假&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt;是真是假，&lt;code&gt;&#39;0&#39;&lt;/code&gt;是真是假&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;五个-falsy-值&#34;&gt;五个&lt;code&gt;falsy&lt;/code&gt;值&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;falsy&lt;/code&gt;就是相当于&lt;code&gt;false&lt;/code&gt;但又不是&lt;code&gt;false&lt;/code&gt;的值&lt;/p&gt;

&lt;p&gt;分别是&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、&lt;code&gt;0&lt;/code&gt;、&lt;code&gt;NaN&lt;/code&gt;、``（空字符串，没空格）&lt;/p&gt;

&lt;p&gt;加上&lt;code&gt;false&lt;/code&gt;，一共六个假值&lt;/p&gt;

&lt;p&gt;其他所有一切，都是真值，包括函数，空数组，空对象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt;和&lt;code&gt;&#39; &#39;&lt;/code&gt;（一个空格）不同，保持严谨&lt;/li&gt;
&lt;li&gt;把输入法的设置标点都改为在IDE应用中都使用英语标点&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;空类型-undefined-和-null&#34;&gt;空类型&lt;code&gt;undefined&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;JS原(la)创(ji)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;是补&lt;code&gt;null&lt;/code&gt; bug补来的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;区别&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;没有本质区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;细节一：如果一个变量声明了，但没有赋值，那么默认就是&lt;code&gt;undefined&lt;/code&gt;，而不出&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;细节二：如果一个函数，没有写&lt;code&gt;return&lt;/code&gt;，那么默认&lt;code&gt;return undefined&lt;/code&gt;，而不是&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;细节三：仅前端习惯上，把非对象的控制写成&lt;code&gt;undefined&lt;/code&gt;，把对象的空值写为&lt;code&gt;null&lt;/code&gt;，没有任何语法依据&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;是默认空，&lt;code&gt;null&lt;/code&gt;是主动清空&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;符号-symbol&#34;&gt;符号&lt;code&gt;symbol&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;不常用的数据类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/22652486&#34;&gt;「每日一题」JS 中的 Symbol 是什么？&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;大型整数-bigint&#34;&gt;大型整数&lt;code&gt;bigInt&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/103508446&#34;&gt;javascript 中基于BigInt 实现定点数 BigFixed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100380291&#34;&gt;BigNumber.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/93528023&#34;&gt;原生JS灵魂之问&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99539770&#34;&gt;7 个令人兴奋的 JavaScript 新特性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99342755&#34;&gt;ES7、ES8、ES9、ES10 新特性大盘点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/102284595&#34;&gt;2020年从基础到进阶，测试你有多了解 JavaScript，刷新你的知识&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/101065488&#34;&gt;ES2020新增功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/95295769&#34;&gt;你即将使用的ES2020新功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100251213&#34;&gt;种草 ES2020 新特性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/97133965&#34;&gt;从 JavaScript、ES6、ES7 到 ES10，你学到哪儿了&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;也许也用不到&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;对象-object&#34;&gt;对象&lt;code&gt;object&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;复杂类型，另开一篇笔记&lt;/p&gt;

&lt;h2 id=&#34;变量声明&#34;&gt;变量声明&lt;/h2&gt;

&lt;h3 id=&#34;三种声明方式&#34;&gt;三种声明方式&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 1
let a = 1
const a = 1
a = 1 //错误的声明方式，起效，不规范 只是赋值 并不是声明全局变量
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;区别&#34;&gt;区别&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;是过时的、不好用的方式，直接跳过，写业务代码不用&lt;code&gt;var&lt;/code&gt;，演示时在控制台调试用&lt;code&gt;var&lt;/code&gt;，可重复声明变量，面试另说&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;是新的、更合理的方式的变量声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;是声明时必须赋值，且不能再改的方式，即常量声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = 1&lt;/code&gt;  错误的声明方式，起效，不规范 只是赋值 并不是声明全局变量&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在函数外声明，挂在&lt;code&gt;window&lt;/code&gt;上，只是&lt;code&gt;window&lt;/code&gt;的属性，不规范，不用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function fn(){
a = 1
}
fn()
a

function fn(){
var a
function f2(){
    a = 1 //并不是声明全局变量
}
f2()
}
fn()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;var-变量提升&#34;&gt;&lt;code&gt;var&lt;/code&gt;变量提升&lt;/h3&gt;

&lt;p&gt;面试必有，看 &lt;a href=&#34;https://wangdoc.com/javascript/basic/grammar.html#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87&#34;&gt;网道 变量提升&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;工作不准用&lt;code&gt;var&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;let-声明规则&#34;&gt;&lt;code&gt;let&lt;/code&gt;声明规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;遵循块作用域，即使用范围不能超出&lt;code&gt;代码块{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不能重复声明，重复声明会报错，除非在其他代码块内&lt;/li&gt;
&lt;li&gt;可以赋值，也可不赋值&lt;/li&gt;
&lt;li&gt;必须先声明，再使用，否则报错，即不会变量提升&lt;/li&gt;
&lt;li&gt;全局声明的&lt;code&gt;let&lt;/code&gt;变量，不会变成&lt;code&gt;window&lt;/code&gt;的属性（&lt;code&gt;var&lt;/code&gt;会）&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配合&lt;code&gt;for&lt;/code&gt;循环使用，有奇效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;{
let b = 1
console.log(b)
}
console.log(b) //报错

{
let a = 1
}
{
let a = 3 //ok
}

let c //ok
c = 2

let abc = &#39;abc&#39;
window.abc //undefined
var abc = &#39;abc&#39;
window.abc //&amp;quot;abc&amp;quot; 属于var的bug
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;配合&lt;code&gt;for&lt;/code&gt;循环使用，有奇效&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for (var i = 0; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;{console.log(i)},0)
}
&amp;lt; 8 //是setTimeout的ID
//打出5个5

for (let i = 0; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;{console.log(i)},0)
}
//ok
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;const-声明规则&#34;&gt;&lt;code&gt;const&lt;/code&gt;声明规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;和&lt;code&gt;let&lt;/code&gt;几乎一样&lt;/li&gt;
&lt;li&gt;只是：声明时就要赋值，赋值后不能改，即有且仅有一次赋值&lt;/li&gt;
&lt;li&gt;只读变量，即常量&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;变量声明的过程中，发生了什么&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;const i //报错
const i = 100
i = 101  //报错
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;变量声明的细节&#34;&gt;变量声明的细节&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;指定了值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;var = 1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;同时也就指定了类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;var = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是值和类型都可以随意变化&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = 2
a = &#39;2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;name-和-name-的区别&#34;&gt;&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;&#39;name&#39;&lt;/code&gt;的区别&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;是变量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;值可变，可能是字符串&lt;code&gt;&#39;name&#39;&lt;/code&gt;，也可能识别的&lt;/li&gt;
&lt;li&gt;存在内存的未知区&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&#39;name&#39;&lt;/code&gt;是字符串常量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;常量就是不变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;只能是&lt;code&gt;name&lt;/code&gt;，不是其他值&lt;/li&gt;
&lt;li&gt;存在内存的&lt;code&gt;Stack&lt;/code&gt;栈区&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;类型转换&#34;&gt;类型转换&lt;/h2&gt;

&lt;h3 id=&#34;number-string&#34;&gt;&lt;code&gt;number&lt;/code&gt;=&amp;gt;&lt;code&gt;string&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n + &#39;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;string-number&#34;&gt;&lt;code&gt;string&lt;/code&gt;=&amp;gt;&lt;code&gt;number&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Number(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parseInt(s)/parseFloat(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s - 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;parseInt(0123)&lt;/code&gt;返回&lt;code&gt;123&lt;/code&gt;，不需要加参数，也默认十进制，&lt;code&gt;parseInt(0123,10)&lt;/code&gt;，是ES6之前（&lt;code&gt;0&lt;/code&gt;开头数字以8进制转换）的bug&lt;/p&gt;

&lt;p&gt;另一个bug：&lt;code&gt;String(1000000000000000000000)&lt;/code&gt;返回&lt;code&gt;1e21&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;x-bool&#34;&gt;&lt;code&gt;x&lt;/code&gt;=&amp;gt;&lt;code&gt;bool&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Boolean(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!!x&lt;/code&gt; 取原始布尔值&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;x-string&#34;&gt;&lt;code&gt;x&lt;/code&gt;=&amp;gt;&lt;code&gt;string&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.toString()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;bug：&lt;code&gt;1.toString()&lt;/code&gt;报错&lt;/p&gt;

&lt;p&gt;改为&lt;code&gt;(1).toString()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或改为&lt;code&gt;1..toString()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;解析为&lt;code&gt;1.0&lt;/code&gt;，即&lt;code&gt;1.0.toString()&lt;/code&gt;，竟然合法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-12-11-52-43.pdf&#34;&gt;数据类型和运算符.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28140450&#34;&gt;我用了两个月的时间才理解 let&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/22652486&#34;&gt;「每日一题」JS 中的 Symbol 是什么？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wangdoc.com/javascript/types/string.html&#34;&gt;字符串 网道 / WangDoc.com &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/102932475&#34;&gt;全面总结 JavaScript 类型相关知识点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;记录JS各种奇葩bug的&lt;a href=&#34;https://bonsaiden.github.io/JavaScript-Garden/zh/&#34;&gt;JavaScript 秘密花园&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/103508446&#34;&gt;javascript 中基于BigInt 实现定点数 BigFixed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/93528023&#34;&gt;原生JS灵魂之问&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99539770&#34;&gt;7 个令人兴奋的 JavaScript 新特性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/99342755&#34;&gt;ES7、ES8、ES9、ES10 新特性大盘点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/102284595&#34;&gt;2020年从基础到进阶，测试你有多了解 JavaScript，刷新你的知识&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/101065488&#34;&gt;ES2020新增功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/95295769&#34;&gt;你即将使用的ES2020新功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100251213&#34;&gt;种草 ES2020 新特性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/97133965&#34;&gt;从 JavaScript、ES6、ES7 到 ES10，你学到哪儿了&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【JS非全解01】JS基本语法</title>
      <link>http://xmasuhai.xyz/post/js/js%E9%9D%9E%E5%85%A8%E8%A7%A301js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 13 Feb 2020 02:08:56 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/js/js%E9%9D%9E%E5%85%A8%E8%A7%A301js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;学的主要版本ES6 兼容以前&lt;/p&gt;

&lt;p&gt;取其精华，去其糟粕&lt;/p&gt;

&lt;p&gt;注重“主领域”：前端，而不是“主语言”&lt;/p&gt;

&lt;p&gt;JS使用最广 门槛极低 生产力&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;基本语法&#34;&gt;基本语法&lt;/h2&gt;

&lt;h3 id=&#34;表达式与语句&#34;&gt;表达式与语句&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;表达式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 + 2&lt;/code&gt;表达式的值为&lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add(1,2)&lt;/code&gt;表达式的值为函数的返回值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.log&lt;/code&gt;表达式的值为函数本身（函数没加括号）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.log(3)&lt;/code&gt;表达式的值为多少？&lt;/li&gt;
&lt;li&gt;值和返回值不同，只有函数有返回值，严谨，函数的值就是返回值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.log()&lt;/code&gt;返回一个&lt;code&gt;undefined&lt;/code&gt;，可以在控制台查看&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;语句&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var a = 1&lt;/code&gt;是一个语句，声名语句&lt;/li&gt;
&lt;li&gt;声名语句的值是&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;两者的区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;表达式一般都有值，语句可能有或没有&lt;/li&gt;
&lt;li&gt;语句一般会改变环境（声明、赋值）&lt;/li&gt;
&lt;li&gt;并不绝对&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;大小写敏感&#34;&gt;大小写敏感&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;变量名等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var a&lt;/code&gt;和&lt;code&gt;var A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;和&lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;和&lt;code&gt;Function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;都是不一样的&lt;/li&gt;
&lt;li&gt;控制台打&lt;code&gt;window&lt;/code&gt;得&lt;code&gt;Window{...}&lt;/code&gt;，有毛病，不一样&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;空格&#34;&gt;空格&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;大部分空格没有实际意义&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var a = 1&lt;/code&gt;和&lt;code&gt;var a=1&lt;/code&gt;没差，只要不影响断句&lt;/li&gt;
&lt;li&gt;加回车大部分时候也不影响&lt;/li&gt;
&lt;li&gt;只有一个地方不能加回车，就是&lt;code&gt;return&lt;/code&gt;后面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;控制台&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function fn(){
    return 3
}
fn()//3
function fn(){
    return undefined//return后有回车的话自动补一个`undefined`
    3//忽略
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;标识符&#34;&gt;标识符&lt;/h3&gt;

&lt;h4 id=&#34;命名规则&#34;&gt;命名规则&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;第一个字符，可以是&lt;code&gt;Unicode&lt;/code&gt;字母或&lt;code&gt;$&lt;/code&gt;(dollar)，或&lt;code&gt;_&lt;/code&gt;（underscore），或中文&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;变量名是标识符&#34;&gt;变量名是标识符&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var _ = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var $ = 8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var ______ = 6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var 你好 = &#39;hi&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;控制台打&lt;code&gt;var 9$ = 1&lt;/code&gt;时，报错&lt;code&gt;Uncaught SyntaxError: Invalid or unexpected token&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;其他标识符遇到再说&#34;&gt;其他标识符遇到再说&lt;/h4&gt;

&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;多写注释——才怪&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;注释的分类&#34;&gt;注释的分类&lt;/h4&gt;

&lt;h5 id=&#34;不好的注释&#34;&gt;不好的注释&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;代码翻译成中文&lt;/li&gt;
&lt;li&gt;过时的注释&lt;/li&gt;
&lt;li&gt;发泄，职业素养&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;好的注释&#34;&gt;好的注释&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;踩坑注解&lt;/li&gt;
&lt;li&gt;为什么代码会写得这么奇怪，遇到什么bug&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;“信噪比”要高，有意义的注释&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;区块-block&#34;&gt;区块&lt;code&gt;block&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将代码包在一起&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;{
let a = 1
let b = 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;常与&lt;code&gt;if/for/while&lt;/code&gt;合用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;if-语句&#34;&gt;&lt;code&gt;if&lt;/code&gt;语句&lt;/h3&gt;

&lt;h4 id=&#34;语法&#34;&gt;语法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if(表达式){语句1}else{语句2}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;在语句只有一句的时候可以省略，打你&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;变态情况&#34;&gt;变态情况&lt;/h4&gt;

&lt;h5 id=&#34;表达式里的变态-a-1&#34;&gt;表达式里的变态，&lt;code&gt;a=1&lt;/code&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;表达式必须有个值，&lt;code&gt;=&lt;/code&gt;是赋值为，赋值运算符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;垃圾，直接用&lt;code&gt;===&lt;/code&gt;，比较运算符&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;技巧，来自C：表达式里，常量写在左值处，判断，写错直接会报错&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;if(1 = a){
    // 报错：`Uncaught ReferenceError: Invalid left-hand side in assignment`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;webStorm&lt;/code&gt;会提示，&lt;code&gt;VSCode&lt;/code&gt;不堪大用&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webStorm&lt;/code&gt;教你写代码，规范代码，节省时间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;语句1和语句2里的变态-嵌套的-if-else&#34;&gt;语句1和语句2里的变态，嵌套的&lt;code&gt;if else&lt;/code&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;else if&lt;/code&gt;实际上是两对&lt;code&gt;if else&lt;/code&gt;判断，省略花括号，逻辑符合形式，形成分支语句&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;缩进的变态&#34;&gt;缩进的变态&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = 1
if(a === 2)
    console.log(&#39;a&#39;)
    console.log(&#39;a等于2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;没有花括号，if 只管到之后最近的第一句语句&lt;/p&gt;

&lt;p&gt;上面的代码相当于&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = 1
if(a === 2){
    console.log(&#39;a&#39;)
}
console.log(&#39;a等于2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;再看这句&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = 1
if(a === 2)
    console.log(&#39;a&#39;),console.log(&#39;a等于2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt;运算符，表示语句没完，&lt;code&gt;console.log(&#39;a&#39;),console.log(&#39;a等于2&#39;)&lt;/code&gt;变成一句语句&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;再看这句&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = 1
if(a === 2)
    console.log(&#39;a&#39;);console.log(&#39;a等于2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;运算符，表示语句完了&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;使用最没歧义的写法，最大公约数，程序员第二戒律&lt;/p&gt;

&lt;p&gt;第一戒律是不能相信人类，特别是自己，要相信&lt;code&gt;console.log()&lt;/code&gt;，墨菲定律&lt;/p&gt;

&lt;p&gt;前端的戒律是 图片不能变形，和没有设计稿不写代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;推荐的写法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;if (表达式){
语句
}else if(表达式){
语句
}else{
语句
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;次推荐写法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function fn(){
if (表达式){
    return 表达式
}
if (表达式){
    return 表达式
}
return 表达式
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;有&lt;code&gt;return&lt;/code&gt;语句，&lt;code&gt;else&lt;/code&gt;可以省，因为&lt;code&gt;return&lt;/code&gt;返回了返回值后面的语句都不执行，不需要&lt;code&gt;else&lt;/code&gt;，分支语句在函数中的写法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;switch-语句&#34;&gt;&lt;code&gt;switch&lt;/code&gt;语句&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;if else&lt;/code&gt;升级版，但不推荐，易用错&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;switch-语法&#34;&gt;&lt;code&gt;switch&lt;/code&gt;语法&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;switch (fruit){
    case &amp;quot;banana&amp;quot;:
        // ...
        break;
    case &amp;quot;apple&amp;quot;:
        // ...
        break;
    default:
        // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;break&#34;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;大部分时候，省略&lt;code&gt;break&lt;/code&gt;你就完了&lt;/li&gt;
&lt;li&gt;少部分时候，可以利用&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不打&lt;code&gt;break&lt;/code&gt;，&lt;code&gt;case&lt;/code&gt;会“贯穿”到下一个&lt;code&gt;case&lt;/code&gt;，表示同时满足上下条件，不常用，一般要求一一对应&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = 2
switch(a){
case 1:
case 3:
    console.log(&amp;quot;单数&amp;quot;)；
    break;
case 2:
case 4:
    console.log(&amp;quot;双数&amp;quot;)；
    break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;js烂设计，对比&lt;code&gt;Swift switch case&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;能不写&lt;code&gt;if&lt;/code&gt;就不写：三元表达式、短路运算符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;问号冒号表达式-即三元运算符&#34;&gt;问号冒号表达式，即三元运算符&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;表达式1 ? 表达式2 : 表达式3&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;简化&lt;code&gt;if else&lt;/code&gt; 里只有一句语句时&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;return a&amp;gt;b ? a: b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return n&amp;gt;0 ? n: -n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;短路逻辑&#34;&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;短路逻辑&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A &amp;amp;&amp;amp; B &amp;amp;&amp;amp; C &amp;amp;&amp;amp; D&lt;/code&gt;取第一个假值（后面都不看了）或者&lt;code&gt;D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;并不会取&lt;code&gt;true/false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;控制台&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;if(f1){
    console.log(&#39;存在&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;报错，&lt;code&gt;fi&lt;/code&gt;未声明是不能用的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;//bad
if(window.f1){
    console.log(&#39;fi存在&#39;)
}
//&amp;lt; undefined

//good
window.f1 &amp;amp;&amp;amp; console.log(&#39;fi存在&#39;)

//两者等价
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;且运算&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;真值表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;真&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;假&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;真&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;假&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;结果栏，表示以&lt;code&gt;A/B&lt;/code&gt;作为表达式的值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;都为真，直接用&lt;code&gt;B&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;假，&lt;code&gt;B&lt;/code&gt;真，用&lt;code&gt;A&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;真，&lt;code&gt;B&lt;/code&gt;假，用&lt;code&gt;B&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;假，&lt;code&gt;B&lt;/code&gt;假，用&lt;code&gt;A&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;第一个&lt;code&gt;A&lt;/code&gt;表达式为真，执行并且返回第二个表达式的值&lt;/p&gt;

&lt;p&gt;第一个&lt;code&gt;A&lt;/code&gt;表达式为假，不计算下去了，直接返回第一个表达式的值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;：‘假’短路&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;//IE 没`console`
console &amp;amp;&amp;amp; console.log &amp;amp;&amp;amp; console.log(&#39;hi&#39;)
//“遇真才算”、“遇假则止”
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;A &amp;amp;&amp;amp; B &amp;amp;&amp;amp; C &amp;amp;&amp;amp; D&lt;/code&gt;取第一个出现的假值或者&lt;code&gt;D&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不同于&lt;code&gt;&amp;amp;&lt;/code&gt;或&lt;code&gt;|&lt;/code&gt;，并不会取&lt;code&gt;true/false&lt;/code&gt;，而是执行表达式，并取表达式的值&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;短路逻辑-1&#34;&gt;&lt;code&gt;||&lt;/code&gt;短路逻辑&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A || B || C || D&lt;/code&gt;取第一个真值或者&lt;code&gt;D&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;并不会取&lt;code&gt;true/false&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;//bad
if(!a){
b
}

//good
a || b

//两者等价
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;||&lt;/code&gt;且运算&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;真值表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;||&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;真&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;假&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;真&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;假&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;结果栏，表示以&lt;code&gt;A/B&lt;/code&gt;作为表达式的值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;都为真，直接用&lt;code&gt;A&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;假，&lt;code&gt;B&lt;/code&gt;真，用&lt;code&gt;B&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;真，&lt;code&gt;B&lt;/code&gt;假，用&lt;code&gt;A&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;假，&lt;code&gt;B&lt;/code&gt;假，用&lt;code&gt;B&lt;/code&gt;作为表达式的值&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;第一个&lt;code&gt;A&lt;/code&gt;表达式为真，不计算下去了，直接返回第一个表达式的值&lt;/p&gt;

&lt;p&gt;第一个&lt;code&gt;A&lt;/code&gt;表达式为假，执行并且返回第二个表达式的值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;a = a || 100

//等价于
if(a){
    a = a // 比如a是`undefined`时就会取保底值
}else{
    a = 100 // 保底值
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A || B || C || D&lt;/code&gt;取第一个真值（后面都不看了）或者&lt;code&gt;D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;“遇真则止”、“遇假才算”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;：‘真’短路&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;条件语句小结&#34;&gt;条件语句小结&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if...else..&lt;/code&gt; 代码简短时基本不用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; 不要少&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A?B:C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&amp;amp;&amp;amp;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn &amp;amp;&amp;amp; fn()&lt;/code&gt; 只有&lt;code&gt;fn&lt;/code&gt;存在才调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A||B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A = A||B&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;while-和-for-循环语句&#34;&gt;&lt;code&gt;while&lt;/code&gt;和&lt;code&gt;for&lt;/code&gt;循环语句&lt;/h3&gt;

&lt;h4 id=&#34;while-语法&#34;&gt;&lt;code&gt;while&lt;/code&gt;语法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while(表达式){语句}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;判断表达式的真假&lt;/li&gt;
&lt;li&gt;表达式为真，执行&lt;code&gt;{}&lt;/code&gt;里的语句，执行完后，再次判断表达式的真假&lt;/li&gt;

&lt;li&gt;&lt;p&gt;表达式为假，直接跳过花括号，执行后面的语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var i = 0
while(i&amp;lt;3){
console.log(i)
i = i + 1
}
0
1
2
3
&amp;lt; 4 // 4 不是`console`打印出来的，`while`语句没有返回值，是chrome的内部原因吧
var i = 0
while(i&amp;lt;2){
console.log(i)
i = i + 1
}
console.log(&#39;done&#39;)
0
1
done
&amp;lt; undefined //`while`语句没有返回值，是chrome的内部原因吧
while(false){}
&amp;lt; undefined
while(true){}//死循环
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;死循环&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 0.1
while(a !== 1){
    console.log(a)
    a = a + 0.1
}//浮点数，加着加着就不精确了，加到跳过`1`的值，永远到不了
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;其他&#34;&gt;其他&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;do...while&lt;/code&gt;用得少，可跳过，能看懂就行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;for-循环&#34;&gt;&lt;code&gt;for&lt;/code&gt;循环&lt;/h4&gt;

&lt;h5 id=&#34;语法糖&#34;&gt;语法糖&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 0.1 //初始化
while(a !== 1){ //判断
    console.log(a) //循环体
    a = a + 0.1 //增长
}//
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;是&lt;code&gt;while&lt;/code&gt;循环的方便写法&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;语法-1&#34;&gt;语法&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(1初始化语句;2判断表达式;3自增语句){
    4循环体
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;1st: 1-&amp;gt;2-&amp;gt;4-&amp;gt;3&lt;/p&gt;

&lt;p&gt;nth: 2-&amp;gt;4-&amp;gt;3-&amp;gt;&amp;hellip;-&amp;gt;LoopOut&lt;/p&gt;

&lt;p&gt;1-&amp;gt;2-&amp;gt;LoopOut&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;先执行且只执行一遍&lt;code&gt;1初始化语句&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后判断&lt;code&gt;2判断表达式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2判断表达式&lt;/code&gt;为真，执行&lt;code&gt;4循环体&lt;/code&gt;，然后执行&lt;code&gt;3自增语句&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2判断表达式&lt;/code&gt;为假，直接退出&lt;code&gt;4循环体&lt;/code&gt;体，执行后面的语句&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;变态情况1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(let i = 0; i &amp;lt; 5; i++){
    console.log(i)
} //i  undefined

for(var i = 0; i &amp;lt; 5; i++){
    console.log(i)
} //退出厚，i  5 ，即循环体内最大数加1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变态情况2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;{
        console.log(i)
        },0)
} //打印五次`5`

for(var i = 0; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;{
        console.log(i + &#39;随机数&#39; + Math.random())
        },0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原因&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 5; i++){
}
i === 5 //true
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;执行完，跳出循环，&lt;code&gt;i&lt;/code&gt;的值为&lt;code&gt;5&lt;/code&gt;，&lt;code&gt;setTimeout&lt;/code&gt;指过一会再执行里面的函数，过一会，&lt;code&gt;i&lt;/code&gt;的值还是&lt;code&gt;5&lt;/code&gt;，过多长，等到执行完&lt;code&gt;for&lt;/code&gt;循环，再打印，此时&lt;code&gt;i&lt;/code&gt;的值为&lt;code&gt;5&lt;/code&gt;，即打印五次&lt;code&gt;5&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 1
function fn(){
    console.log(a)
}
fn()
a = 2
fn()
...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;因为&lt;code&gt;a&lt;/code&gt;的值可能会变，即不确定，&lt;code&gt;a&lt;/code&gt;的值在定义函数时，不确定，在执行函数时确定&lt;/p&gt;

&lt;p&gt;即如果不确定函数是什么时候执行的，就不能确定&lt;code&gt;a&lt;/code&gt;的值是多少，&lt;code&gt;a&lt;/code&gt;的值可能会随着后面的代码运行而改变&lt;/p&gt;

&lt;p&gt;即不确定&lt;code&gt;fn()&lt;/code&gt;的调用时间，就不能确定&lt;code&gt;a&lt;/code&gt;的值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 1
function fn(){
    console.log(a)
}
setTimeout(fn)
a = 5 //光速赋值
&amp;lt; 5 //返回值 5
5 //龟速打印 5
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;会打印&lt;code&gt;5&lt;/code&gt; ，&lt;code&gt;setTimeout(fn)&lt;/code&gt;表示过一段时间执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 5; i++){}
i === 5 //true
setTimeout(()=&amp;gt;(console.log(i)))
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;会打印&lt;code&gt;5&lt;/code&gt; ，&lt;code&gt;setTimeout(fn)&lt;/code&gt;表示过一段时间执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;(console.log(i)))
}
i === 5 //true
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt;循环是当前任务，先执行完规定的循环次数后，再执行&lt;code&gt;setTimeout&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;* &lt;code&gt;setTimeout&lt;/code&gt;执行机制队列之后再讲&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;将&lt;code&gt;var&lt;/code&gt;改成&lt;code&gt;let&lt;/code&gt;，满足直觉的幻想&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(let i = 0; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;(console.log(i)))
}
0
1
2
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他变态情况&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;let i = 0
for(; i &amp;lt; 5; i++){
    setTimeout(()=&amp;gt;(console.log(i)))
}
0
1
2
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;判断语句一定要起效，自增长一定要写，没有就会死循环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;break-和-continue&#34;&gt;&lt;code&gt;break&lt;/code&gt;和&lt;code&gt;continue&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;退出所有循环 V.S. 退出当前一次循环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;退出所有循环&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 10; i++){
if(i%2 === 1){//i为奇数
    break//循环体内，不执行自增长`i++`，且跳出当前`for`循环
    console.log(i + &amp;quot;第一次&amp;quot;)
}
console.log(i + &amp;quot;第二次&amp;quot;)
}
console.log(i + &amp;quot;第三次&amp;quot;)
0
1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;跳过，即退出当前一次循环，继续自增长语句，直到判断语句跳出循环&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 10; i++){
if(i%2 === 1){
    continue//执行自增长`i++`，且跳过本次循环，即跳过奇数次
    console.log(i + &amp;quot;第奇数次&amp;quot;)
}else{
    console.log(i + &amp;quot;第偶数次&amp;quot;)
}
}
0
2
4
6
8
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;continue&lt;/code&gt;在其他语言中是&lt;code&gt;next&lt;/code&gt;，即下一个的意思，更符合原意&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;两层循环&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;for(var i = 0; i &amp;lt; 3; i++){
for(var j = 101; j &amp;lt; 110; j++){
    if(i === 5){
        break
    }
}
console.log(i)
}
0
1
2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;break&lt;/code&gt;只会退出当前外层的&lt;code&gt;for&lt;/code&gt;循环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;label-语句&#34;&gt;&lt;code&gt;label&lt;/code&gt;语句&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;用的很少，面试概率5%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;label-语法&#34;&gt;&lt;code&gt;label&lt;/code&gt;语法&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;合法标识符A:{
    //代码...
}
console.log(2);

合法标识符B:1
console.log(2);

{
合法标识符B:1
console.log(2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;合法标识符A是一个标签，表示&lt;code&gt;:&lt;/code&gt;后面的代码块&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;foo:{
    console.log(1);
    break foo;
    console.log(&#39;本行不会输出&#39;);
}
console.log(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;面试&#34;&gt;面试&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;{
foo:1
}

foo:1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;上面的是什么，注意&lt;code&gt;Chrome&lt;/code&gt;、&lt;code&gt;safari&lt;/code&gt;和&lt;code&gt;firefox&lt;/code&gt;控制台打出的不一致，&lt;code&gt;Chrome&lt;/code&gt;做了优化&lt;/p&gt;

&lt;p&gt;加了&lt;code&gt;;&lt;/code&gt;，不是对象，测试下面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;{
foo:1；
}

{
foo:1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;下面这样才是对象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a ={
    foo:1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;回答：是一个&lt;code&gt;label&lt;/code&gt;语句，语句就是&lt;code&gt;1&lt;/code&gt;，完了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-10-14-3-29.pdf&#34;&gt;JS 语法.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;入门&lt;a href=&#34;https://wangdoc.com/javascript/&#34;&gt;《网道 JavaScript 教程》&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【更好的CSS 01】SCSS入门</title>
      <link>http://xmasuhai.xyz/post/scss/%E6%9B%B4%E5%A5%BD%E7%9A%84css-01scss%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 07 Feb 2020 23:37:07 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/scss/%E6%9B%B4%E5%A5%BD%E7%9A%84css-01scss%E5%85%A5%E9%97%A8/</guid>
      
        <description>

&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;

&lt;h3 id=&#34;scss是什么&#34;&gt;SCSS是什么&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;加强版的CSS?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;懒人版CSS&lt;/li&gt;
&lt;li&gt;解决&lt;a href=&#34;https://zh.wikipedia.org/wiki/层叠样式表#缺点&#34;&gt;CSS的一个缺陷&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS实现了变量&lt;code&gt;--var&lt;/code&gt;，&lt;a href=&#34;https://caniuse.com/#search=--var&#34;&gt;支持的浏览器ok(2020)&lt;/a&gt;，单功能单一&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当使用CSS时，我们经常在一个全局环境设置，这样可能会错误地设置元素的样式。&lt;/p&gt;

&lt;p&gt;自定义CSS(即使有CSS变量)仍然是非常冗余的。&lt;/p&gt;

&lt;p&gt;CSS不是为我们今天所拥有的那种复杂的架构设计的&lt;/p&gt;

&lt;p&gt;我们遇到了在另一个样式表中导入一个样式表的问题，这可能会导致一个非常大的样式库，没有适当的文档可能无法理解它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;了解为什么要使用这些预处理程序
演示如何将样式划分为更小的特定组件
不必强迫用户下载大量不需要的CSS文件&lt;/p&gt;

&lt;h3 id=&#34;scss历史&#34;&gt;SCSS历史&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Sass&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;脱胎于Ruby (on Rails) 社区&lt;/p&gt;

&lt;p&gt;Node-SASS 各端的版本&lt;/p&gt;

&lt;p&gt;HTML HAML Pug&lt;/p&gt;

&lt;p&gt;TS/ES6&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SassScript提供以下功能：变量、嵌套、混入（Mixin）、选择器继承等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;安装与运行&#34;&gt;安装与运行&lt;/h3&gt;

&lt;p&gt;课堂上用到的代码，实时看到页面效果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd scss-1
npm init -y
npm i -D parcel
npx parcel index.html #
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;不要装&lt;code&gt;cnpm&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果发现 node-sass安装出错，请百度。&lt;/p&gt;

&lt;p&gt;如果需要设置 npm淘宝源，请百度。&lt;/p&gt;

&lt;h4 id=&#34;零配置学习-使用parcel&#34;&gt;零配置学习 - 使用parcel&lt;/h4&gt;

&lt;h4 id=&#34;零配置学习-使用测试&#34;&gt;零配置学习 - 使用测试&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;最简单的几个语法&#34;&gt;最简单的几个语法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$variable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@mixin XXX&lt;/code&gt;-&lt;code&gt;@include XXX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%placeholder&lt;/code&gt;-&lt;code&gt;@extend %placeholder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;嵌套选择器-nesting&#34;&gt;嵌套选择器 Nesting&lt;/h4&gt;

&lt;p&gt;嵌套和作用域&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;/* div&amp;gt;ul&amp;gt;li */
.nav {
    &amp;gt;ul {
        &amp;gt;li {
            border: 1px solid red;
        }
    }
    border: 2px solid blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;h1 {
    color: red;
}
body {
    h1 {
        background: #ddd;
        font-size: 100px;
        color: green;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;能够推断 HTML文件的结构，同时保持实现的简短。这样做的另一个好处是，它有助于避免拼写错误&lt;/p&gt;

&lt;p&gt;而且已经确定了一些规则的作用域，因此这些样式只用于&lt;code&gt;nav&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;后台看调试里对CSS的请求，仍是**.css，&lt;code&gt;npx parcel index.html&lt;/code&gt;自动编译成css语法&lt;/p&gt;

&lt;p&gt;属性也可以嵌套，比如&lt;code&gt;border-color&lt;/code&gt;属性，可以写成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;p {
    border: {
    color: red;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，&lt;code&gt;border:&lt;/code&gt;后面必须加上冒号。&lt;/p&gt;

&lt;p&gt;在嵌套的代码块内，可以使用&lt;code&gt;&amp;amp;&lt;/code&gt;引用父元素。比如&lt;code&gt;a:hover&lt;/code&gt;伪类，可以写成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;a {
    &amp;amp;:hover { color: #ffb3ff; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;变量&#34;&gt;变量&lt;code&gt;$&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;使用$来声明变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;$r:orange;
$g:yellowgreen;
$c:cyan;
$grey:#666;
$gray:$grey;
$border-width:5px;
h1 {
    color: $r;
}
body {
    h1 {
        background: $g;
        font-size: 100px;
        color: $r;
    }
}
/* div&amp;gt;ul&amp;gt;li */
.nav {
    &amp;gt;ul {
        &amp;gt;li {
            border: $border-width solid $g;
        }
    }
    border: $border-width solid $grey;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果变量需要镶嵌在字符串之中，就必须需要写在&lt;code&gt;#{}&lt;/code&gt;之中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;$side : left;
.rounded {
    border-#{$side}-radius: 5px;
　　}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mixin-支持参数&#34;&gt;&lt;code&gt;@mixin&lt;/code&gt;支持参数&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;可以重用的代码块&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;写成函数来代替&lt;code&gt;border: 1px solid red;&lt;/code&gt;调试&lt;/p&gt;

&lt;p&gt;声明&lt;code&gt;@mixin xxx&lt;/code&gt; 引入&lt;code&gt;@include xxx&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@mixin&lt;/code&gt;的强大之处，在于可以指定参数和缺省值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;/* 指定参数和缺省值 */
@mixin debug($border-color:red, $background-color:gold) {
    border: 10px solid $border-color;
    background: $background-color;
}
/* 写成函数来代替border: 1px solid red;调试 */

/* 使用的时候，根据需要加入参数 */
body {
    h1 {
        background: $g;
        font-size: 100px;
        color: $r;
        @include debug(orangered, cyan);
    }
}
/* div&amp;gt;ul&amp;gt;li */
.nav {
    &amp;gt;ul {
        &amp;gt;li {
            border: $border-width solid $g;
            @include debug(purple, yellowgreen);
        }
    }
    border: $border-width solid $grey;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@include&lt;/code&gt; 机械地减少了代码量，但浏览器渲染时仍旧会还原css，性能一样&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;下面是一个mixin的实例，用来生成浏览器前缀。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;@mixin rounded($vert, $horz, $radius: 10px) {
　　border-#{$vert}-#{$horz}-radius: $radius;
　　-moz-border-radius-#{$vert}#{$horz}: $radius;
　　-webkit-border-#{$vert}-#{$horz}-radius: $radius;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用的时候，可以像下面这样调用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;#navbar li {
@include rounded(top, left);
}

#footer {
@include rounded(top, left, 5px); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;placeholder-和继承&#34;&gt;&lt;code&gt;%placeholder&lt;/code&gt;和继承&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;%x

div{
    @extend %x{
    /* xxx */
    }
}
p{
    @extend %x{
    /* xxx */
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;刷新页面看CSS:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;div,p{
    /* xxx */ 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;不重复拷贝样式，而是把选择器提到相同样式前&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SASS允许一个选择器，继承另一个选择器。比如，现有&lt;code&gt;class1&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.class1 {
    border: 1px solid #ddd;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class2要继承class1，就要使用&lt;code&gt;@extend&lt;/code&gt;命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.class2 {
    @extend .class1;
    font-size:120%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;

&lt;p&gt;SASS共有两种注释风格。&lt;/p&gt;

&lt;p&gt;标准的CSS注释&lt;code&gt;/* comment */&lt;/code&gt;，会保留到编译后的文件。&lt;/p&gt;

&lt;p&gt;单行注释&lt;code&gt;//comment&lt;/code&gt;，只保留在SASS源文件中，编译后被省略。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;/*&lt;/code&gt;后面加一个感叹号，表示这是&amp;rdquo;重要注释&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;/*!
    重要注释！
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.im/post/5cf488ea518825378867758f&#34;&gt;SCSS快速入门&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SCSS（学完之后你可以自学 &lt;a href=&#34;http://lesscss.org&#34;&gt;LESS&lt;/a&gt; 和 &lt;a href=&#34;http://stylus-lang.com&#34;&gt;Stylus&lt;/a&gt; &lt;a href=&#34;https://postcss.org&#34;&gt;PostCSS&lt;/a&gt; ）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://sass-lang.com&#34;&gt;SCSS-lang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sasscss.com/docs/&#34;&gt;中文文档1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sass.bootcss.com/docs/sass-reference/&#34;&gt;中文文档2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sass-lang.com/documentation/at-rules/mixin&#34;&gt; at-rules: @mixin @include&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://thesassway.com/beginner/the-inception-rule&#34;&gt;The Sass Way&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;/* 文本不换行 */
@mixin no-wrap(){
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
/* 使用方法: */
.box {
    @include no-wrap()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2012/06/sass.html&#34;&gt;SASS用法指南 阮一峰&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解11】CSS 知识总结与扩展</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A311css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%A9%E5%B1%95/</link>
      <pubDate>Fri, 07 Feb 2020 00:39:55 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A311css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%A9%E5%B1%95/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;CSS都学了些什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;基础技术-面向实际工作&#34;&gt;基础技术（面向实际工作）&lt;/h2&gt;

&lt;h3 id=&#34;非体系化学css&#34;&gt;非体系化学CSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A301css%E5%9F%BA%E7%A1%80-%E4%BD%93%E7%B3%BB%E5%8C%96%E5%AD%A6css/&#34;&gt;一些CSS的介绍与铺垫、学习方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;reset.css&lt;/p&gt;

&lt;h3 id=&#34;文档流&#34;&gt;文档流&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A302css%E5%9F%BA%E7%A1%80-%E6%96%87%E6%A1%A3%E6%B5%81/&#34;&gt;文档流、脱离文档流、内容溢出处理&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;盒模型&#34;&gt;盒模型&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A303css%E5%9F%BA%E7%A1%80-%E7%9B%92%E6%A8%A1%E5%9E%8B/&#34;&gt;只用边框盒模型就好了&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;布局&#34;&gt;布局&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A304css%E5%B8%83%E5%B1%80_pc%E5%B8%83%E5%B1%80float%E5%B8%83%E5%B1%80/&#34;&gt;Float布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A305css%E5%B8%83%E5%B1%80_flex%E5%B8%83%E5%B1%80/&#34;&gt;Flex布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A306css%E5%B8%83%E5%B1%80_grid%E5%B8%83%E5%B1%80/&#34;&gt;Grid布局&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;定位&#34;&gt;定位&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A307css%E5%AE%9A%E4%BD%8D/&#34;&gt;CSS定位&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;前端的底线和常用草图软件&#34;&gt;前端的底线和常用草图软件&lt;/h3&gt;

&lt;h3 id=&#34;css-动画的两种做法-transition-和-animation&#34;&gt;&lt;strong&gt;CSS 动画的两种做法（transition 和 animation）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A309css-%E5%8A%A8%E7%94%BB_transform%E5%85%A8%E8%A7%A3%E5%92%8Ctransition%E8%BF%87%E6%B8%A1/&#34;&gt;过渡动画&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A310css-%E5%8A%A8%E7%94%BB_animation/&#34;&gt;@keyframes关键帧动画&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aotu.io/notes/2016/05/06/Guide-To-Tween-Animation/index.html&#34;&gt;CSS3动画之补间动画&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aotu.io/index.html&#34;&gt;凹凸实验室&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;面试技术-面向笔面试-薪资&#34;&gt;面试技术（面向笔面试、薪资）&lt;/h2&gt;

&lt;h3 id=&#34;visibility-和-display-的区别&#34;&gt;&lt;code&gt;visibility&lt;/code&gt;和&lt;code&gt;display&lt;/code&gt;的区别&lt;/h3&gt;

&lt;h3 id=&#34;多种居中方式&#34;&gt;多种居中方式&lt;/h3&gt;

&lt;h3 id=&#34;处理-text-overflow&#34;&gt;处理&lt;code&gt;text-overflow&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#34;样式继承-选择器权重&#34;&gt;样式继承、选择器权重&lt;/h3&gt;

&lt;h3 id=&#34;层叠上下文&#34;&gt;层叠上下文&lt;/h3&gt;

&lt;h3 id=&#34;为什么这么多人讲不清楚bfc-以及xxxfc&#34;&gt;为什么这么多人讲不清楚BFC？以及XxxFC&lt;/h3&gt;

&lt;h3 id=&#34;浏览器渲染机制&#34;&gt;&lt;strong&gt;浏览器渲染机制&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A308css-%E5%8A%A8%E7%94%BB_%E5%8A%A8%E7%94%BB%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/&#34;&gt;浏览器渲染原理（面试几率 5%）&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;重绘与回流&#34;&gt;重绘与回流&lt;/h3&gt;

&lt;h3 id=&#34;vw与移动端适配-媒体查询&#34;&gt;vw与移动端适配 媒体查询&lt;/h3&gt;

&lt;h3 id=&#34;设备像素-设备独立像素-css像素-ppi-devicepixelratio&#34;&gt;设备像素、设备独立像素、CSS像素、PPI、devicePixelRatio&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;拓展技术-面向兴趣-趋势发展&#34;&gt;拓展技术（面向兴趣、趋势发展）&lt;/h2&gt;

&lt;h3 id=&#34;bootstrap-的使用方法就是复制粘贴&#34;&gt;Bootstrap 的使用方法就是复制粘贴&lt;/h3&gt;

&lt;h3 id=&#34;scss&#34;&gt;SCSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/scss/%E6%9B%B4%E5%A5%BD%E7%9A%84css-01scss%E5%85%A5%E9%97%A8/&#34;&gt;SCSS入门&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SASS LESS postCSS Stylus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;gsap&#34;&gt;GSAP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000005366176&#34;&gt;GSAP - 专业的Web 动画库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tweenmax.com.cn/&#34;&gt;TweenMax中文网（GreenSock动画平台,GSAP）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=GSAP&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=GSAP&amp;amp;aqs=chrome..69i57j0l5j69i65l2.3746j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;GSAP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://greensock.com/gsap/&#34;&gt;GSAP官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tweenmax.com.cn&#34;&gt;GSAP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000005366176&#34;&gt;GSAP - 专业的 Web 动画库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://svgtrick.com/book/greensock/GreenSockBasic/animate.html&#34;&gt;整个了greensock动画开发的简明教程&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;更多技术，可以逛&lt;a href=&#34;https://codepen.io/topics/gsap?__cf_chl_jschl_tk__=80b64d52fc4d3f79efd96df2348cf0e9b561fe3e-1581010303-0-AbQT_F0kKDtOgQKJXJoV2pHKAr9IOaBGowdYGxGNj8w4WVQO51p8UD6geOAhZuYj1ZYwN2La3K47gaTQS3OSfawbxkv0o12Nm8dRWeteMn46Cn0A9Wcx2SSdU6ApQOmyZvVig2naFZG4-gr8frINoHlZjAjciDj8aMJQsLu98H1HSG956p04Qk6dQMC2Kh-7z1yomVV6KbxpnESN0YQpT3njI1VjMRHnVpsd2brsxOnXofEO-EEQMHkF7OD5NUM3uN7pM3cakLvnXc2FJafrAtMyNuap2BYw-229e2EN5H7SjH07lIGIRAoBlk5pGnNep1A5pH4_TCNhnzaU1lriz6c&#34;&gt;codepen&lt;/a&gt;&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待填坑·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解10】CSS 动画_animation</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A310css-%E5%8A%A8%E7%94%BB_animation/</link>
      <pubDate>Thu, 06 Feb 2020 00:42:26 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A310css-%E5%8A%A8%E7%94%BB_animation/</guid>
      
        <description>

&lt;h2 id=&#34;keyframes-完整语法&#34;&gt;&lt;code&gt;@keyframes&lt;/code&gt;完整语法&lt;/h2&gt;

&lt;h3 id=&#34;标准写法&#34;&gt;标准写法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from{} to{}&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;百分数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;@keyframes sidein{
from{
    transform:translateX(0%);
}
to{
    transform:translateX(100%);
}
}

@keyframes identifier{
0%{
    top:0;left:0;
}
30%{
    top:50px;
}
60%,72%{
    left:50px;
}
100%{
    top:100px;left:100%;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;缩写语法&#34;&gt;缩写语法&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;animation: 时长| 过渡方式 | 延迟 | 次数 | 方向 | 填充模式 | 是否暂停 | 动画名&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;时长：单位 1s 或1000ms&lt;/li&gt;
&lt;li&gt;过渡方式：同&lt;code&gt;transition&lt;/code&gt;，如&lt;code&gt;linear&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;延迟：单位 1s 或1000ms&lt;/li&gt;
&lt;li&gt;次数：正整数 或者&lt;code&gt;infinite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方向：&lt;code&gt;reverse | alternate | alternate-reverse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;填充模式：&lt;code&gt;none | forwards | backwards | both&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是否暂停：&lt;code&gt;paused | running&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;以上所有属性都有对应的单独属性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://codepen.io/xmasuhai/pen/LYVYmXL&#34;&gt;实践，重做红心&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;animation any&lt;/p&gt;

&lt;p&gt;动画任何东西——补间动画&lt;/p&gt;

&lt;p&gt;是的，任何东西。没有预定义的属性列表可供选择。任何对象的任何数字属性都可以进行补间，如果该属性需要特殊处理（如颜色，过滤器，非数字值等），则可能要使用插件。&lt;/p&gt;

&lt;p&gt;firefox developer edition&lt;/p&gt;

&lt;p&gt;CSS 动画调试用 以及一些辅助CSS工具&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-6-14-27-31.pdf&#34;&gt;CSS 动画.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html&#34;&gt;CSS动画简介&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000005366176&#34;&gt;GSAP - 专业的Web 动画库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tweenmax.com.cn/&#34;&gt;TweenMax中文网（GreenSock动画平台,GSAP）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=GSAP&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=GSAP&amp;amp;aqs=chrome..69i57j0l5j69i65l2.3746j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;GSAP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://greensock.com/gsap/&#34;&gt;GSAP官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tweenmax.com.cn&#34;&gt;GSAP&lt;/a&gt;
&lt;a href=&#34;https://segmentfault.com/a/1190000005366176&#34;&gt;GSAP - 专业的 Web 动画库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://svgtrick.com/book/greensock/GreenSockBasic/animate.html&#34;&gt;整个了greensock动画开发的简明教程&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解09】CSS 动画_transform全解和transition过渡</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A309css-%E5%8A%A8%E7%94%BB_transform%E5%85%A8%E8%A7%A3%E5%92%8Ctransition%E8%BF%87%E6%B8%A1/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:31 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A309css-%E5%8A%A8%E7%94%BB_transform%E5%85%A8%E8%A7%A3%E5%92%8Ctransition%E8%BF%87%E6%B8%A1/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=transform+MDN&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=transform+MDN&amp;amp;aqs=chrome..69i57j0l4j69i60l3.365j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;transform MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;transform&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;四个常用功能&#34;&gt;四个常用功能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;位移&lt;code&gt;translate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;缩放&lt;code&gt;scale&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;旋转&lt;code&gt;rotate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;倾斜&lt;code&gt;skew&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;transform-经验&#34;&gt;&lt;code&gt;transform&lt;/code&gt;经验&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一般都需配合&lt;code&gt;transition&lt;/code&gt;过渡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;元素不支持&lt;code&gt;transform&lt;/code&gt;，需先变成&lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;位移-translate&#34;&gt;位移&lt;code&gt;translate&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;常用写法&#34;&gt;常用写法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;translateX(&amp;lt;length-percentage&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translateY(&amp;lt;length-percentage&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translate(&amp;lt;length-percentage&amp;gt;,&amp;lt;length-percentage&amp;gt;?)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translateZ(&amp;lt;length&amp;gt;)&lt;/code&gt;并且父容器是&lt;code&gt;perspective&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translate3d(x,y,z)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;h4 id=&#34;translate-经验&#34;&gt;&lt;code&gt;translate&lt;/code&gt;经验&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;看懂 MDN 语法格式，自学无碍&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translate(-50%,-50%)&lt;/code&gt;可做绝对定位元素的居中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;缩放-scale&#34;&gt;缩放&lt;code&gt;scale&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;常用写法-1&#34;&gt;常用写法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scaleX(&amp;lt;number&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaleY(&amp;lt;number&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale(&amp;lt;number&amp;gt;,&amp;lt;number&amp;gt;?)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;h4 id=&#34;scale-经验&#34;&gt;&lt;code&gt;scale&lt;/code&gt;经验&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;不常用，易出现模糊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;旋转-rotate&#34;&gt;旋转&lt;code&gt;rotate&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;常用写法-2&#34;&gt;常用写法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rotate([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotateZ([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotateX([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotateY([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate3d&#34;&gt;&lt;code&gt;rotate3d()&lt;/code&gt;较复杂&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;h4 id=&#34;rotate-经验&#34;&gt;&lt;code&gt;rotate&lt;/code&gt;经验&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;常用于 360 旋转制作 loading&lt;/li&gt;
&lt;li&gt;用到时再搜索&lt;a href=&#34;https://www.google.com/search?q=rotate+MDN&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=rotate+MDN&amp;amp;aqs=chrome..69i57j69i60l3.130j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;&lt;code&gt;rotate MDN&lt;/code&gt;&lt;/a&gt;看文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;倾斜-skew&#34;&gt;倾斜&lt;code&gt;skew&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;常用写法-3&#34;&gt;常用写法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skewX([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skewY([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skew([ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ],[ &amp;lt;angle&amp;gt; | &amp;lt;zero&amp;gt; ])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;h4 id=&#34;skew-经验&#34;&gt;&lt;code&gt;skew&lt;/code&gt;经验&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用得少&lt;/li&gt;
&lt;li&gt;用到时再在搜索&lt;a href=&#34;https://www.google.com/search?q=skew+MDN&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=skew+MDN&amp;amp;aqs=chrome..69i57.96j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;&lt;code&gt;skew MDN&lt;/code&gt;&lt;/a&gt;看文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;transform-多重效果&#34;&gt;&lt;code&gt;transform&lt;/code&gt;多重效果&lt;/h3&gt;

&lt;h4 id=&#34;组合使用&#34;&gt;组合使用&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform:scale(0.5) translate(-100%,-100%);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform:none;&lt;/code&gt;取消所有&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-5/css-demo_BeatingHeart.html&#34;&gt;CSS 动画实现：跳动的心&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS 需要想象力，而不是逻辑&lt;/p&gt;

&lt;p&gt;CSS 给出的属性都很简单，但组合得很复杂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=transition+MDN&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=transition+MDN&amp;amp;aqs=chrome..69i57j69i60.157j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;transition MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;transition-过渡&#34;&gt;&lt;code&gt;transition&lt;/code&gt;过渡&lt;/h2&gt;

&lt;h3 id=&#34;作用&#34;&gt;作用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;补充中间帧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;语法&#34;&gt;语法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transition: 属性名 时长 过渡方式 延迟&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;eg. &lt;code&gt;transition: left 200ms linear&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;可以用逗号分隔两个不同属性&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;eg. &lt;code&gt;transition: left 200ms linear, top 400ms&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;可以用&lt;code&gt;all&lt;/code&gt;代表所有属性&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;eg. &lt;code&gt;transition: all 200ms&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;过渡方式有&lt;code&gt;linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier | step-start | step-end | steps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function&#34;&gt;具体含义靠数学知识&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;并不是所有属性都能加上「过渡」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:none=&amp;gt;block&lt;/code&gt;没法加过渡&lt;/li&gt;
&lt;li&gt;一般改成&lt;code&gt;visibility:hidden=&amp;gt;visible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;和&lt;code&gt;visibility&lt;/code&gt; 的区别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;和&lt;code&gt;opacity&lt;/code&gt;可以加过渡&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;过渡必须要有起始&#34;&gt;过渡必须要有起始&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一般只有一次动画，或者两次&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;hover&lt;/code&gt;和非&lt;code&gt;hover&lt;/code&gt;状态的过渡&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;除了起始-还存在中间点-的情况处理方法&#34;&gt;「除了起始，还存在中间点」的情况处理方法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;两种办法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;使用两次-transform&#34;&gt;使用两次&lt;code&gt;transform&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.a&lt;/code&gt;====&amp;gt;&lt;code&gt;transform&lt;/code&gt;====&amp;gt;&lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.b&lt;/code&gt;====&amp;gt;&lt;code&gt;transform&lt;/code&gt;====&amp;gt;&lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;如何知道有中间点？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用&lt;code&gt;setTimeout&lt;/code&gt;或者监听&lt;code&gt;transitionend&lt;/code&gt;事件（JS）&lt;/p&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;h4 id=&#34;使用-animation&#34;&gt;使用&lt;code&gt;animation&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;声明关键帧&lt;/li&gt;
&lt;li&gt;添加动画&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如何让动画停在最后一帧？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;搜索&lt;code&gt;css animation stop at end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加个&lt;code&gt;forward&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-6-14-27-31.pdf&#34;&gt;CSS 动画.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html&#34;&gt;CSS 动画简介&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解08】CSS 动画_动画及浏览器渲染原理</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A308css-%E5%8A%A8%E7%94%BB_%E5%8A%A8%E7%94%BB%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 02 Feb 2020 00:41:05 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A308css-%E5%8A%A8%E7%94%BB_%E5%8A%A8%E7%94%BB%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</guid>
      
        <description>

&lt;h2 id=&#34;一个最简单的例子&#34;&gt;一个最简单的例子&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;将&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;从左往右移动：
&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-5/css-demo_rendering.html&#34;&gt;用 JS 实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;每过一段时间，将 div 移动一小段距离&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;setInterval&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;直到移动到目标处&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;注意性能&#34;&gt;注意性能&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome 开发者工具，点任何一个 Tab，按 Esc，按竖排省略号按钮，选&lt;code&gt;Rendering&lt;/code&gt;，勾选&lt;code&gt;Paint flashing&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;绿色闪烁表示：重新绘制（repaint）&lt;/li&gt;
&lt;li&gt;每次闪烁，都消耗性能&lt;/li&gt;
&lt;li&gt;CSS 渲染过程依次包含：布局、绘制、合成&lt;/li&gt;
&lt;li&gt;其中布局和绘制有可能会被省略&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;不用-position-和-left-做动画&#34;&gt;不用&lt;code&gt;position&lt;/code&gt;和&lt;code&gt;left&lt;/code&gt;做动画&lt;/h2&gt;

&lt;h3 id=&#34;用-transform&#34;&gt;用&lt;code&gt;transform&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;demo&lt;/p&gt;

&lt;h3 id=&#34;transform-原理&#34;&gt;&lt;code&gt;transform&lt;/code&gt;原理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform:translateX(0=&amp;gt;300px);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直接修改会被合成，需要等一会修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition&lt;/code&gt;过渡属性可以自动脑补中间帧&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;注意-transform-性能&#34;&gt;注意&lt;code&gt;transform&lt;/code&gt;性能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;并没有&lt;code&gt;repaint&lt;/code&gt;（重新绘制）&lt;/li&gt;
&lt;li&gt;比更改&lt;code&gt;left&lt;/code&gt;性能好&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;浏览器渲染原理&#34;&gt;浏览器渲染原理&lt;/h2&gt;

&lt;h3 id=&#34;参考文章&#34;&gt;参考文章&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&#34;&gt;渲染树构建、布局及绘制&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering&#34;&gt;渲染性能 by goole team&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count&#34;&gt;使用 transform 和 opacity 属性更改来实现动画&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看-css-各属性会出发什么&#34;&gt;查看 CSS 各属性会出发什么？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;（Layout Paint Composite）（布局 绘制 合成）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csstriggers.com/&#34;&gt;CSSTriggers.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;浏览器渲染过程&#34;&gt;浏览器渲染过程&lt;/h3&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根据 HTML 树构建 HTML 树（DOM）&lt;/li&gt;
&lt;li&gt;根据 CSS 构建 CSS 树（CSSDOM）&lt;/li&gt;
&lt;li&gt;将两棵树合并成一棵：渲染树（render tree）&lt;/li&gt;
&lt;li&gt;即&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model&#34;&gt;构建对象模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;由渲染树（render tree）可进行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Layout&lt;/code&gt;布局（文档流和定位、盒模型、计算元素的大小和位置）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Paint&lt;/code&gt;绘制（把边框颜色、文字颜色、阴影等画出来）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Composite&lt;/code&gt;合成（根据层叠关系展示画面）&lt;/li&gt;
&lt;li&gt;即&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&#34;&gt;渲染树构建、布局及绘制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;三棵树-dom-cssdom-render&#34;&gt;三棵树（DOM CSSDOM render）&lt;/h3&gt;

&lt;h3 id=&#34;如何更新样式&#34;&gt;如何更新样式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一般用 JS 来更新样式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;div.style.background=&#39;red&#39;
div.style.display=&#39;none&#39;
/* 加样式不如加类，类里可包含许多类 */
div.classList.add(&#39;red&#39;)
div.remove(); /* 直接删掉节点 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;三种不同的渲染方式&#34;&gt;三种不同的渲染方式&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;JS/CSS&amp;gt;样式&amp;gt;布局&amp;gt;合成&lt;/li&gt;
&lt;li&gt;JS/CSS&amp;gt;样式&amp;gt;无布局&amp;gt;绘制&amp;gt;合成&lt;/li&gt;
&lt;li&gt;JS/CSS&amp;gt;样式&amp;gt;无布局&amp;gt;无绘制&amp;gt;合成&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;JS 和 Style 样式计算必不可少&lt;/p&gt;

&lt;p&gt;最后都要&lt;code&gt;composite&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;不同方法间的区别-以下链接-demo&#34;&gt;不同方法间的区别（以下链接 demo）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;第一种：全走&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-5/css-demo_rendering.html&#34;&gt;&lt;code&gt;div.remove()&lt;/code&gt;&lt;/a&gt;：会触发当前消失，其他元素重布局&lt;code&gt;relayout&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;第二种：跳过&lt;code&gt;layout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;未改变元素的位置和大小&lt;/p&gt;

&lt;p&gt;比如&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-5/css-demo_rendering.html&#34;&gt;只改变背景颜色&lt;/a&gt;：直接&lt;code&gt;repaint&lt;/code&gt;+&lt;code&gt;composite&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;第三种：跳过&lt;code&gt;layout&lt;/code&gt;和&lt;code&gt;paint&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-5/css-demo_rendering.html&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt;：只需&lt;code&gt;composite&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;注意：必须全屏查看效果，在&lt;code&gt;iframe&lt;/code&gt;里看有问题&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;不同属性触发的流程也各不相同，可查：&lt;a href=&#34;https://csstriggers.com/&#34;&gt;CSSTriggers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;css-动画优化-面试-5&#34;&gt;CSS 动画优化（面试 5%）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96&#34;&gt;浏览器渲染优化&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count#%E4%BD%BF%E7%94%A8_transform_%E5%92%8C_opacity_%E5%B1%9E%E6%80%A7%E6%9B%B4%E6%94%B9%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB&#34;&gt;使用 transform 和 opacity 属性更改来实现动画&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;js-优化&#34;&gt;JS 优化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution&#34;&gt;优化 JavaScript 执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code&gt;requestAnimationFrame&lt;/code&gt;代替&lt;code&gt;setTimeout&lt;/code&gt;或&lt;code&gt;setInterval&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;css-优化&#34;&gt;CSS 优化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations&#34;&gt;缩小样式计算的范围并降低其复杂性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing&#34;&gt;避免大型、复杂的布局和布局抖动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas&#34;&gt;简化绘制的复杂度、减小绘制区域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count&#34;&gt;坚持仅合成器的属性和管理层计数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/rendering/debounce-your-input-handlers&#34;&gt;使输入处理程序去除抖动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code&gt;will-change&lt;/code&gt;或&lt;code&gt;translate&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;死记硬背&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章-1&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-9-6-14-27-31.pdf&#34;&gt;CSS 动画.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html&#34;&gt;网页性能管理详解&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解07】CSS定位</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A307css%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Sat, 01 Feb 2020 00:40:41 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A307css%E5%AE%9A%E4%BD%8D/</guid>
      
        <description>

&lt;h2 id=&#34;布局分类&#34;&gt;布局分类&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;固定宽度：PC（&lt;a href=&#34;https://taobao.com/&#34;&gt;淘宝&lt;/a&gt;），一般：960px、1000px、1024px&lt;/li&gt;
&lt;li&gt;不固定宽度：手机页面（&lt;a href=&#34;https://main.m.taobao.com/?sprefer=sypc00&#34;&gt;手机淘宝&lt;/a&gt;），主要靠文档流的原理来布局，开发者手机页面模式 | 响应式&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;屏幕 页面 尺寸&lt;/p&gt;

&lt;p&gt;文档流本来就是自适应的，不需添加额外样式，(加了固定宽度，就不是)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;响应式布局（PC上固定宽，手机不固定），即混合布局&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;布局思路&#34;&gt;布局思路&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;整体&amp;lt;-&amp;gt;细节&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一图流&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../../static/images/layoutTaoLu.jpg&#34; alt=&#34;布局思路&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;文字描述-用什么布局&#34;&gt;文字描述：用什么布局？&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;=&amp;gt;&lt;code&gt;兼容IE9&lt;/code&gt;=&amp;gt;&lt;code&gt;左浮两个，固定宽度，不要响应式&lt;/code&gt;=&amp;gt;&lt;code&gt;给父元素加clearfix&lt;/code&gt;=&amp;gt;&lt;code&gt;使用float布局&lt;/code&gt;{必要时使用负margin}&lt;/li&gt;
&lt;li&gt;=&amp;gt;&lt;code&gt;不需兼容IE9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;- =&amp;gt;&lt;code&gt;不只兼容最新浏览器&lt;/code&gt;=&amp;gt;&lt;code&gt;使用flex布局&lt;/code&gt;{必要时使用负margin}&lt;/li&gt;
&lt;li&gt;- =&amp;gt;&lt;code&gt;只兼容最新浏览器&lt;/code&gt;=&amp;gt;&lt;code&gt;使用grid布局&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;float-布局-非响应式&#34;&gt;&lt;code&gt;float&lt;/code&gt;布局，非响应式&lt;/h3&gt;

&lt;h4 id=&#34;步骤&#34;&gt;步骤&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;clearfix::after&lt;/code&gt;伪元素清浮动法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;子元素加&lt;code&gt;float:left;&lt;/code&gt;和&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父元素加&lt;code&gt;.clearfix&lt;/code&gt;：&lt;strong&gt;三行Combo&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.clearfix::after {
content: &#39;&#39;;
display: block;
clear: both;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父元素默认是块级元素&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;高度是由内部文档流元素高度的总和决定&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;float&lt;/code&gt;属性使元素脱离文档流，不再影响父元素高度&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父元素里没有文档流元素，高度为0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决方法：伪元素清浮动法&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;经验&#34;&gt;经验&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;留一些空间，或者最后一个不设&lt;code&gt;width&lt;/code&gt;，或者用&lt;code&gt;max-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不需要响应式，手机上没IE，&lt;code&gt;float&lt;/code&gt;布局专为IE&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;IE6/7存在双倍margin Bug，&lt;code&gt;margin-left&lt;/code&gt;x2，解决办法两个&lt;/p&gt;

&lt;p&gt;一是将错就错，针对IE6/7把margin减半，写margin，再写&lt;code&gt;_margin:&lt;/code&gt;或者&lt;code&gt;*margin:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;二是加个&lt;code&gt;display:inline-block&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IE8不支持&lt;code&gt;::after&lt;/code&gt;、HTML5新标签等，&lt;code&gt;header{display:block;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IE7不支持&lt;code&gt;border-box&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;栗子实践&#34;&gt;栗子实践&lt;/h3&gt;

&lt;h4 id=&#34;用-float-做不同布局&#34;&gt;用&lt;code&gt;float&lt;/code&gt;做不同布局：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;两栏布局（如顶部条）&lt;/li&gt;
&lt;li&gt;三栏布局（如内容区），比如：&lt;a href=&#34;https://taobao.com/&#34;&gt;淘宝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;四栏布局（如导航）&lt;/li&gt;
&lt;li&gt;平均布局（如产品展示区）&lt;/li&gt;
&lt;li&gt;过时的淘宝双飞翼布局&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_layout_floats.html&#34;&gt;css-demo_layout_floats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_layout_nav.html&#34;&gt;css-demo_layout_nav&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;注意的事项&#34;&gt;注意的事项&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;将父元素设置为&lt;code&gt;display: inline-block;&lt;/code&gt;，压缩宽度到正好包裹子元素，不留空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: inline-block;&lt;/code&gt;特点是尽量压窄自己；&lt;/li&gt;
&lt;li&gt;默认的&lt;code&gt;display: block;&lt;/code&gt;特点是尽量放宽自己；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-align:top;&lt;/code&gt;或者&lt;code&gt;vertical-align:middle;&lt;/code&gt;：如果图片下有多余留空，加上这个属性可以去掉&lt;/li&gt;
&lt;li&gt;请看一小时：&lt;a href=&#34;https://www.google.com/search?q=%E6%96%B9%E5%BA%94%E6%9D%ADline+height&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=%E6%96%B9%E5%BA%94%E6%9D%ADline+height&amp;amp;aqs=chrome..69i57.18103j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;深入理解CSS：字体度量、line-height 和vertical-align&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;只记套路，只看结果，中间发生什么，就当不存在&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;高度确定，宽度适应，或设计师以整数切图&lt;/li&gt;
&lt;li&gt;两个元素高度分别是偶数和奇数，不可完全居中对齐，手动调高度&lt;/li&gt;
&lt;li&gt;文字高度&lt;code&gt;line-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;计算公约高度：平均高度，高度和除以2，计算差值，设置&lt;code&gt;margin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不设&lt;code&gt;width&lt;/code&gt;，用内容去填，即宽度由内容决定，除非&lt;code&gt;&amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;&lt;/code&gt;宽度固定，高度由内容撑起来，一般不设置具体高度值&lt;/li&gt;
&lt;li&gt;被挤下去，是因为&lt;code&gt;border-box&lt;/code&gt;的宽度包含&lt;code&gt;border&lt;/code&gt;的&lt;code&gt;1px&lt;/code&gt;，可以用&lt;code&gt;outline:1px solid red&lt;/code&gt;代替，仅用在当&lt;code&gt;border&lt;/code&gt;干扰宽度的时候，调试用，但有时可能在外面会看不见，也可用背景色代替&lt;/li&gt;
&lt;li&gt;让有固定宽度的块级父元素居中：&lt;code&gt;margin:0 auto;&lt;/code&gt;，但不太好&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS重要原则之一：不该写的多余代码不要写；必须的代码不能少&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;margin-left:auto;margin-right:auto;&lt;/code&gt;比&lt;code&gt;margin:0 auto;&lt;/code&gt;更稳妥，可会覆盖&lt;code&gt;margin-top&lt;/code&gt;，精确，尽量正交，避免层叠掉其他样式：即最小必要原则&lt;/li&gt;
&lt;li&gt;设置了&lt;code&gt;float&lt;/code&gt;属性的元素外边距不会合并&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;负-margin&#34;&gt;负&lt;code&gt;margin&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;怎么把内容扩宽，又不影响布局？一个应用场景：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;平均布局中，块级父元素和子元素宽度固定，子元素间空隙&lt;code&gt;margin-right:12px;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;子元素们外新加个带有负&lt;code&gt;margin&lt;/code&gt;属性的父元素，值为子元素间空隙的负值&lt;code&gt;margin-right:-12px;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原来的父元素变成祖元素，父子关系变了，&lt;code&gt;clearfix&lt;/code&gt;类要加到新的父元素上，新父元素多余的右边距设为负值，值为子元素间空隙的负值&lt;code&gt;margin-right:-12px;&lt;/code&gt;即可&lt;/p&gt;

&lt;p&gt;最后一个子元素的右边框超出了祖元素，新的父元素用正margin会位移，但用负margin会变宽，就可使自己有足够的空间容纳子元素超出的右边框，从而不挤掉最后一个子元素而换行&lt;/p&gt;

&lt;p&gt;如果设置的负margin的（绝对）值过大，仍不挤掉最后一个子元素而换行，但会使窗口产生滚动条&lt;/p&gt;

&lt;p&gt;可以追加任意多个同样的子元素，即可实现平均布局&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;经验总结&#34;&gt;经验总结&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;加头尾，即可满足所有PC页面要求&lt;/li&gt;
&lt;li&gt;手机页面不用&lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;需要计算宽度，不灵活，足以应付IE&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;问答&#34;&gt;问答&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;不用考虑IE，IE也换Chrome的内核了：Blink（Chrome及其他）、Webkit（Safari）、Gecko（Firefox），其他都淘汰弃用了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logo&lt;/code&gt;、&lt;code&gt;nav&lt;/code&gt;高度不固定，&lt;code&gt;margin-top:5px&lt;/code&gt;可行吗？直接用flexBox布局&lt;/li&gt;
&lt;li&gt;父元素宽500px，四个子元素宽分别191px，还有&lt;code&gt;border:1px;&lt;/code&gt;加起来不止764px，用&lt;code&gt;border-box&lt;/code&gt;不用考虑&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-30-0-56-25.pdf&#34;&gt;CSS 布局.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【HTTP非全解】请求和响应 &amp; Node.Js Server</title>
      <link>http://xmasuhai.xyz/post/http/http%E9%9D%9E%E5%85%A8%E8%A7%A3%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94-node.js-server/</link>
      <pubDate>Sat, 25 Jan 2020 00:52:10 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/http/http%E9%9D%9E%E5%85%A8%E8%A7%A3%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94-node.js-server/</guid>
      
        <description>

&lt;h1 id=&#34;记得用完服务器机器要关机-并选择停止计费&#34;&gt;&lt;strong&gt;记得用完服务器机器要关机（并选择停止计费）&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&#34;记得用完服务器机器要关机-并选择停止计费-1&#34;&gt;&lt;strong&gt;记得用完服务器机器要关机（并选择停止计费）&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;记得用完服务器机器要关机-并选择停止计费-2&#34;&gt;&lt;strong&gt;记得用完服务器机器要关机（并选择停止计费）&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&#34;记得用完服务器机器要关机-并选择停止计费-3&#34;&gt;&lt;strong&gt;记得用完服务器机器要关机（并选择停止计费）&lt;/strong&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;安装Node.js 8+&lt;/li&gt;
&lt;li&gt;理解IP和端口&lt;/li&gt;
&lt;li&gt;理解URL路径和查询参数&lt;/li&gt;
&lt;li&gt;不需要会JavaScript&lt;/li&gt;
&lt;li&gt;本节所有代码建议复制使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;演示-node-js-server&#34;&gt;演示 Node.js Server&lt;/h2&gt;

&lt;h3 id=&#34;请求与响应模型&#34;&gt;请求与响应模型&lt;/h3&gt;

&lt;p&gt;前端的代码在客户端Client（浏览器、APP）&lt;/p&gt;

&lt;p&gt;IP 124.124.233.233:80&lt;/p&gt;

&lt;p&gt;请求-&amp;gt;服务器（Sever）&lt;/p&gt;

&lt;p&gt;服务器（Sever）&lt;/p&gt;

&lt;p&gt;IP 123.123.233.233:80&lt;/p&gt;

&lt;p&gt;响应-&amp;gt;客户端&lt;/p&gt;

&lt;h3 id=&#34;如何发请求&#34;&gt;如何发请求&lt;/h3&gt;

&lt;h4 id=&#34;方法&#34;&gt;方法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用Chrome（地址栏输入URL）&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;curl&lt;/code&gt;命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发者工具Network面板，刷新页面&lt;/p&gt;

&lt;p&gt;响应看&lt;code&gt;Response&lt;/code&gt;，HTML CSS JS image等&lt;/p&gt;

&lt;h4 id=&#34;概念&#34;&gt;概念&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;帮你发送请求的工具叫「用户代理」&lt;/li&gt;
&lt;li&gt;即「User Agent」&lt;/li&gt;
&lt;li&gt;用Chrome时的用户代理就是Chrome&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;curl&lt;/code&gt;时的用户代理就是curl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;如何模拟一个响应&#34;&gt;如何模拟一个响应&lt;/h3&gt;

&lt;p&gt;用&lt;code&gt;curl&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;需用编程&#34;&gt;需用编程&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Node.js有一个http模块可以做到&lt;/li&gt;
&lt;li&gt;使用以下&lt;a href=&#34;https://github.com/FrankFang/nodejs-test/blob/master/server.js&#34;&gt;初始代码&lt;/a&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全部测试代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var http = require(&#39;http&#39;)
var fs = require(&#39;fs&#39;)
var url = require(&#39;url&#39;)
var port = process.argv[2]

if(!port){
  console.log(&#39;请指定端口号好不啦？\nnode server.js 8888 这样不会吗？&#39;)
  process.exit(1)
}

var server = http.createServer(function(request, response){
  var parsedUrl = url.parse(request.url, true)
  var pathWithQuery = request.url 
  var queryString = &#39;&#39;
  if(pathWithQuery.indexOf(&#39;?&#39;) &amp;gt;= 0){ queryString = pathWithQuery.substring(pathWithQuery.indexOf(&#39;?&#39;)) }
  var path = parsedUrl.pathname
  var query = parsedUrl.query
  var method = request.method

  /******** 从这里开始看，上面不要看 ************/

  console.log(&#39;有个傻子发请求过来啦！路径（带查询参数）为：&#39; + pathWithQuery)

  if(path === &#39;/&#39;){
    response.statusCode = 200
    response.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;)
    response.write(`二哈`)
    response.end()
  } else if(path === &#39;/x&#39;){
    response.statusCode = 200
    response.setHeader(&#39;Content-Type&#39;, &#39;text/css;charset=utf-8&#39;)
    response.write(`body{color: red;}`)
    response.end()
  } else {
    response.statusCode = 404
    response.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;)
    response.write(`你输入的路径不存在对应的内容`)
    response.end()
  }

  /******** 代码结束，下面不要看 ************/
})

server.listen(port)
console.log(&#39;监听 &#39; + port + &#39; 成功\n请用在空中转体720度然后用电饭煲打开 http://localhost:&#39; + port)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要请求了&lt;code&gt;8888&lt;/code&gt;端口，就会被&lt;code&gt;server.js&lt;/code&gt;监听，每一次请求，就运行一遍此代码&lt;/p&gt;

&lt;h4 id=&#34;注意事项&#34;&gt;注意事项&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;这些代码就是服务器代码，一般放在服务器上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;是不带查询参数的路径&lt;code&gt;/x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;是查询参数的对象形式&lt;code&gt;{a:&#39;1&#39;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryString&lt;/code&gt;是查询参数的字符串形式&lt;code&gt;?a=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pathWithQuery&lt;/code&gt;是带查询参数的路径，一般不用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;是请求对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response&lt;/code&gt;是响应对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;主要代码&#34;&gt;主要代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;/******** 从这里开始看，上面不要看 ************/
  console.log(&#39;有个傻子发请求过来啦！路径（带查询参数）为：&#39; + pathWithQuery)

  if(path === &#39;/&#39;){
    response.statusCode = 200
    response.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;)
    response.write(`二哈`)
    response.end()
  } else if(path === &#39;/x&#39;){
    response.statusCode = 200
    response.setHeader(&#39;Content-Type&#39;, &#39;text/css;charset=utf-8&#39;)
    response.write(`body{color: red;}`)
    response.end()
  } else {
    response.statusCode = 404
    response.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;)
    response.write(`你输入的路径不存在对应的内容`)
    response.end()
  }

  /******** 代码结束，下面不要看 ************/
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;代码逻辑&#34;&gt;代码逻辑&lt;/h4&gt;

&lt;h5 id=&#34;语法&#34;&gt;语法&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;注意``，和&lt;code&gt;&#39;&#39;&lt;/code&gt;是不同的符号&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;``，这种字符串里面可以回车&lt;/li&gt;
&lt;li&gt;\&amp;rsquo;\&amp;lsquo;，这种字符串要回车只能用&lt;code&gt;\n&lt;/code&gt;表示&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;逻辑&#34;&gt;逻辑&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;每次受到请求都会把中间的代码执行一遍&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;if else&lt;/code&gt;判断路径，并返回响应&lt;/li&gt;
&lt;li&gt;如果是已知路径，一律返回&lt;code&gt;200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是位置路径，一律返回&lt;code&gt;400&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;标示内容的「类型/语法」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.write()&lt;/code&gt;可以填写返回的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.end()&lt;/code&gt;表示响应可以发给用户了&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nodejs-test&#34;&gt;nodejs-test&lt;/h2&gt;

&lt;h3 id=&#34;启动应用&#34;&gt;启动应用&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;node server.js 8888&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node server 8888&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;添加路由&#34;&gt;添加路由&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;编辑 &lt;code&gt;server.js&lt;/code&gt; 文件，添加 &lt;code&gt;if else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新运行 &lt;code&gt;node server.js 8888&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;后台启动应用&#34;&gt;后台启动应用&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch log
node server.js 8888 &amp;gt;log log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用-curl-访问-8888-或者用浏览器&#34;&gt;用&lt;code&gt;curl&lt;/code&gt;访问&lt;code&gt;8888&lt;/code&gt;，或者用浏览器&lt;/h3&gt;

&lt;p&gt;用&lt;code&gt;curl&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node server.js 8888/x
curl http://127.0.0.1:8888
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用浏览器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node server.js 8888
localhost:8888/x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看终端的变化&lt;/p&gt;

&lt;h3 id=&#34;遥想当年李爵士&#34;&gt;遥想当年李爵士&lt;/h3&gt;

&lt;p&gt;Li写了世界上第一个服务器程序&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自己也完成了一个服务器程序，虽然代码是抄来的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Li写了世界上第一个网站&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自己在&lt;code&gt;/&lt;/code&gt;路径返回一个&lt;code&gt;HTML&lt;/code&gt;内容&lt;/li&gt;
&lt;li&gt;然后再&lt;code&gt;/x&lt;/code&gt;路径返回一个&lt;code&gt;CSS&lt;/code&gt;内容&lt;/li&gt;
&lt;li&gt;然后再&lt;code&gt;/y&lt;/code&gt;路径返回一个&lt;code&gt;JS&lt;/code&gt;内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;要记住的&#34;&gt;要记住的&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;response.statusCode = 200
response.setHeader(&#39;Content-Type&#39;, &#39;text/css;charset=utf-8&#39;)
response.write(`some CSS style code`)
response.end()
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;本质就是根据路径返回一个字符串或者文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;后缀是垃圾&#34;&gt;后缀是垃圾&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;URL里的后缀卵用没有，eg:&lt;code&gt;/y.css&lt;/code&gt;不一定是CSS内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;才是决定文件类型的关键&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;系统学习http&#34;&gt;系统学习HTTP&lt;/h2&gt;

&lt;p&gt;HTTP到底是个啥&lt;/p&gt;

&lt;h3 id=&#34;必须学会什么&#34;&gt;必须学会什么&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;基础概念（必会知识）：请求和响应&lt;/li&gt;
&lt;li&gt;如何调试（用的是Node.js，可以用&lt;code&gt;log/debugger&lt;/code&gt;，但本质还是HTTP）&lt;/li&gt;
&lt;li&gt;在哪查资料（用的是Node.js，看Node.js文档）&lt;/li&gt;
&lt;li&gt;标准制定者（HTTP规格文档：&lt;code&gt;RFC 2612&lt;/code&gt;等）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;如何学&#34;&gt;如何学&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Copy 抄文档&lt;/li&gt;
&lt;li&gt;Run 放在自己的机器上运行成功&lt;/li&gt;
&lt;li&gt;Modify 加入一点自己的想法，然后重新运行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;开发者工具&#34;&gt;开发者工具&lt;/h3&gt;

&lt;p&gt;查看&lt;code&gt;Network&lt;/code&gt;：分&lt;code&gt;General&lt;/code&gt;、&lt;code&gt;Response Headers&lt;/code&gt;即请求、&lt;code&gt;Request Headers&lt;/code&gt;即响应&lt;/p&gt;

&lt;h3 id=&#34;http基础概念-请求&#34;&gt;HTTP基础概念：请求&lt;/h3&gt;

&lt;h4 id=&#34;请求的组成&#34;&gt;请求的组成&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求动词&lt;/strong&gt; + &lt;em&gt;路径查询参数&lt;/em&gt; + &lt;strong&gt;&lt;em&gt;协议/版本&lt;/em&gt;&lt;/strong&gt;（请求行）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Host&lt;/code&gt;:域名或IP及端口（请求头）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Accept&lt;/code&gt;:表示接受的内容格式，text/html（请求头）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;:请求体的格式（请求头）&lt;/li&gt;
&lt;li&gt;回车&lt;/li&gt;
&lt;li&gt;请求体（即放上传内容，可以是任意内容，但格式必须在请求头中写明）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试查看&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;curl -v POST --data &#39;上传内容&#39; http://localhost:8888/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;细节&#34;&gt;细节&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;三部分：请求行、请求头、请求体&lt;/li&gt;
&lt;li&gt;请求动词有&lt;code&gt;GET/POST/PUT/PATCH/DELETE&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get&lt;/code&gt; :获取；&lt;code&gt;Post&lt;/code&gt;: 上传&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/?wd=hi&lt;/code&gt;：路径及查询参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;协议及版本号&lt;/li&gt;
&lt;li&gt;请求体在&lt;code&gt;GET&lt;/code&gt;中一般为空&lt;/li&gt;
&lt;li&gt;文档位于 &lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html&#34;&gt;RFC 2612第五章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;大小写不明感（随意，但涉及JS代码是大小写敏感的）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;http基础概念-响应&#34;&gt;HTTP基础概念：响应&lt;/h3&gt;

&lt;h4 id=&#34;响应的组成&#34;&gt;响应的组成&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议名/版本&lt;/strong&gt; + &lt;em&gt;状态码&lt;/em&gt; + &lt;strong&gt;&lt;em&gt;状态字符串&lt;/em&gt;&lt;/strong&gt;（状态行）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;：响应体的格式&lt;code&gt;text/html;charset=utf-8&lt;/code&gt;（响应头）&lt;/li&gt;
&lt;li&gt;回车&lt;/li&gt;
&lt;li&gt;响应体（即下载内容，可以在&lt;code&gt;Response&lt;/code&gt;选项中查看具体内容）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;细节-1&#34;&gt;细节&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;三部分：状态行、响应头、响应体&lt;/li&gt;
&lt;li&gt;常见状态码（面试重点）&lt;/li&gt;
&lt;li&gt;文档位于 &lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html&#34;&gt;RFC 2612 第六章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;要记住关于http-请求和响应的规范写法&#34;&gt;要记住关于HTTP：请求和响应的规范写法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;请求的组成：请求行「&lt;strong&gt;请求动词&lt;/strong&gt; + &lt;em&gt;路径查询参数&lt;/em&gt; + &lt;strong&gt;&lt;em&gt;协议/版本&lt;/em&gt;&lt;/strong&gt;」+ 请求头「&lt;code&gt;Host&lt;/code&gt; + &lt;code&gt;Accept&lt;/code&gt; + &lt;code&gt;Content-Type&lt;/code&gt;等」+ 请求体&lt;/li&gt;
&lt;li&gt;响应的组成：状态行「&lt;strong&gt;协议名/版本&lt;/strong&gt; + &lt;em&gt;状态码&lt;/em&gt; + &lt;strong&gt;&lt;em&gt;状态字符串&lt;/em&gt;&lt;/strong&gt;」+ 响应头「&lt;code&gt;Content-Type&lt;/code&gt;等」+ 响应体&lt;/li&gt;
&lt;li&gt;常见状态码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;用curl构造请求&#34;&gt;用curl构造请求&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;回忆 curl 五行请求&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code&gt;server.js&lt;/code&gt;开启的前提下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -v http://127.0.0.1:8888&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -v http://localhost:8888&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;：verbose，看过程&lt;/li&gt;
&lt;li&gt;注意不是&lt;code&gt;https://&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;设置请求动词&#34;&gt;设置请求动词&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-X POST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意大小写敏感&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v -X POST http://localhost:8888&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v -X POST http://localhost:8888/xxx?wd=hi&lt;/code&gt;加个查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v -X POST http://localhost:8888/xxx\?wd=hi&lt;/code&gt;加个查询，用Mac的终端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v -X POST http://localhost:8888/xxx?wd=hi#nihao&lt;/code&gt;锚点不会发送到服务器&lt;/li&gt;
&lt;li&gt;看终端里返回的请求行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;设置路径和查询参数&#34;&gt;设置路径和查询参数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;直接在url后面加&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;设置请求头&#34;&gt;设置请求头&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-H &#39;Name:Value&#39;&lt;/code&gt;或者&lt;code&gt;--header &#39;Name:Value&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单引号内必须是以键值对的形式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -v -H &#39;Accept:text/html&#39; http://localhost:8888/xxx\?wd=hi#nihao&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;设置请求体&#34;&gt;设置请求体&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d &#39;内容&#39;&lt;/code&gt;或者&lt;code&gt;--data &#39;内容&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -v -H &#39;Accept:text/html&#39; -H &#39;FSociety:FyE&#39; -H &#39;Content-Type:text/plain;charset:utf-8&#39; -d &#39;请求体的内容&#39; http://localhost:8888/xxx\?wd=hi#nihao&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;看终端里返回的请求行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;用node-js读取请求&#34;&gt;用Node.js读取请求&lt;/h2&gt;

&lt;h3 id=&#34;读取请求动词&#34;&gt;读取请求动词&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;request.method&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;读取路径&#34;&gt;读取路径&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;request.url&lt;/code&gt;路径，带查询参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;纯路径，不带查询参数&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;query&lt;/code&gt;只有查询参数&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;curl http://localhost:8888/\?hihihi=hohoho&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;看终端里返回的请求行&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;读取请求头&#34;&gt;读取请求头&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;request.headers[&#39;Accept&#39;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;curl -v -H &#39;Hi:nihao&#39; http://localhost:8888/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;看终端里返回的请求行，可以得到所有符合格式的请求头&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;读取请求体&#34;&gt;读取请求体&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;比较复杂，待续~~~&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;用node-js设置响应&#34;&gt;用Node.js设置响应&lt;/h2&gt;

&lt;h3 id=&#34;设置响应状态码&#34;&gt;设置响应状态码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response.statusCode = 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.statusCode = 201&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.statusCode = 299&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;response.statusCode = 300&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;设置响应头&#34;&gt;设置响应头&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response.setHeader(&#39;Content-Type&#39;,&#39;text/html&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;设置响应体&#34;&gt;设置响应体&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response.write(&#39;内容&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可追加内容&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;代码具体细节先不管，直接抄，运行看&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;整个响应都可以有node来控制，包括响应状态码、响应头、响应体&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;404页面是什么&#34;&gt;404页面是什么&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;不仅可以用来测试，还可用来下载&lt;code&gt;curl https://xxx.jpg &amp;gt; 1.jpg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl&lt;/code&gt;可以完成Chrome除了显示界面外的几乎所有功能&lt;/li&gt;
&lt;li&gt;即使状态码为404，还是能接受到响应体，需要设置&lt;/li&gt;
&lt;li&gt;状态码和内容没有直接的关系，即不管状态码是什么，都可以是任何内容&lt;/li&gt;
&lt;li&gt;大部分服务器不设置404页面，不返回任何其他内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;如何调试js&#34;&gt;如何调试JS&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;怎么知道自己写错了还是写对了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;console.log调试大法&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不要相信直觉，相信&lt;code&gt;console.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;debug就是不断&lt;strong&gt;&lt;em&gt;质疑自己&lt;/em&gt;&lt;/strong&gt;的过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不信，比如，只看，下面代码哪里有问题？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;if(path === &#39;/&#39;){
    response.statusCode = 200
    response.setHeader(&#39;Content-Type&#39;,&#39;text/html;charset=utf-8&#39;)
    response.write(`
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./style.css&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;你好&amp;lt;/h1&amp;gt;
    `)
    response.end()
}else if(path === &#39;./style.css&#39;){
    response.statusCode = 200
    response.setHeader(&#39;Content-Type&#39;,&#39;text/css;charset=utf-8&#39;)
    response.statusCode(`h1{color: red;}`)
    response.end()
}else{
    response.statusCode = 404
    response.end()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;出bug就是因为自己太过自信了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找到bug之时，就是发现自己傻X之日&lt;/p&gt;

&lt;h3 id=&#34;第一次讲console-log调试大法&#34;&gt;第一次讲console.log调试大法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;console.log&lt;/code&gt;可以验证对错&lt;/p&gt;

&lt;p&gt;针对之前的错误代码，可以在&lt;code&gt;if&lt;/code&gt;判断前可以加上：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;console.log(&amp;quot;path:&amp;quot; + path);
console.log(&amp;quot;path === &#39;./style.css:&#39;&amp;quot;);
console.log(path === &#39;./style.css&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不要相信自己，要相信&lt;code&gt;console.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;答案揭晓：所有HTTP路径都是以&lt;code&gt;/&lt;/code&gt;开头，&lt;code&gt;./&lt;/code&gt;就访问不了，404了&lt;/p&gt;

&lt;p&gt;把自己认为对的变量或者判断语句打出来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;100元购买阿里云服务器&#34;&gt;100元购买阿里云服务器&lt;/h2&gt;

&lt;h3 id=&#34;购买一台服务器&#34;&gt;购买一台服务器&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;阿里云按量付费，即用即停
最低配，按量计费，Ubuntu 64&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;为什么要用收费的服务器&#34;&gt;为什么要用收费的服务器&lt;/h3&gt;

&lt;h4 id=&#34;好处&#34;&gt;好处&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;一个你可以完全自由掌控的Linux机器&lt;/li&gt;
&lt;li&gt;一个其他人可以访问的IP&lt;/li&gt;
&lt;li&gt;可以作为博客、作品展示、简历展示&lt;/li&gt;
&lt;li&gt;速度快于GitHub&lt;/li&gt;
&lt;li&gt;HK地区机器，可作为FQ代理，但不能备案，所以不选&lt;/li&gt;
&lt;li&gt;如果备案了，还可以把域名绑定到这台机器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;代价&#34;&gt;代价&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;100RMB用1000hrs&lt;/li&gt;
&lt;li&gt;记得关服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;购买阿里云服务器&#34;&gt;购买阿里云服务器&lt;/h3&gt;

&lt;p&gt;流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注册账号&lt;/li&gt;
&lt;li&gt;进入云服务器ECS（可以搜索）&lt;/li&gt;
&lt;li&gt;创建实例-&amp;gt;&lt;strong&gt;按量付费&lt;/strong&gt;-&amp;gt;入门级-&amp;gt;最便宜或打折优惠&lt;/li&gt;
&lt;li&gt;镜像选&lt;code&gt;Ubuntu 18.04 64位&lt;/code&gt;，最容易搜教程&lt;/li&gt;
&lt;li&gt;其他不改，下一步&lt;/li&gt;
&lt;li&gt;充值100&lt;/li&gt;
&lt;li&gt;公网宽带选&lt;code&gt;按流量+1s&lt;/code&gt;，哦不&lt;code&gt;按流量+1Maps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他不改，下一步&lt;/li&gt;
&lt;li&gt;勾选服务协议，创建实例，弹出界面点击管理控制台&lt;/li&gt;
&lt;li&gt;等待实例启动成功，状态变为运行中&lt;/li&gt;
&lt;li&gt;购买完毕&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;允许-8888-端口&#34;&gt;允许&lt;code&gt;8888&lt;/code&gt;端口&lt;/h3&gt;

&lt;h4 id=&#34;加入安全组&#34;&gt;加入安全组&lt;/h4&gt;

&lt;p&gt;流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;更改实例规格&amp;gt;更多&amp;gt;网络和安全组&amp;gt;加入安全组&lt;/code&gt;，点击加入安全组&lt;/li&gt;
&lt;li&gt;如果没有安全组，就新建一个&lt;/li&gt;
&lt;li&gt;加入之后，&lt;code&gt;更改实例规格&amp;gt;更多&amp;gt;网络和安全组&amp;gt;安全组配置&lt;/code&gt;，点击安全组配置&lt;/li&gt;
&lt;li&gt;点击配置规则&lt;/li&gt;
&lt;li&gt;点击添加安入组规则&lt;/li&gt;
&lt;li&gt;端口填写&lt;code&gt;8888/8888&lt;/code&gt;，（任意超过1234，小于65535的范围比如&lt;code&gt;8000/8999&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;授权对象填写&lt;code&gt;0.0.0.0/0&lt;/code&gt;表示任何人都能访问&lt;/li&gt;
&lt;li&gt;点击确定，并输入手机验证码&lt;/li&gt;
&lt;li&gt;此时，就可通过&lt;code&gt;http://实例IP:8888&lt;/code&gt;访问了&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;请根据实际场景设置授权对象的CIDR，另外，0.0.0.0/0 代表允许或拒绝所有IP的访问，设置时请务必谨慎。参考&lt;a href=&#34;https://help.aliyun.com/document_detail/25475.html?spm=5176.2020520101.0.0.4e974df5oAsNll&#34;&gt;帮助文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;使用服务器&#34;&gt;使用服务器&lt;/h3&gt;

&lt;p&gt;流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;重置实例密码：更改实例规格&amp;gt;更多&amp;gt;密码/密钥&amp;gt;重置实例密码&lt;/li&gt;
&lt;li&gt;填写&lt;strong&gt;&lt;em&gt;新的密码两次&lt;/em&gt;&lt;/strong&gt;和手机验证码&lt;/li&gt;
&lt;li&gt;实例状态-&amp;gt;重启实例&lt;/li&gt;
&lt;li&gt;重启完了后点击远程连接&lt;/li&gt;
&lt;li&gt;复制远程密码&lt;/li&gt;
&lt;li&gt;在实例上新建标签，键为key，值为复制的密码&lt;/li&gt;
&lt;li&gt;再次点击远程连接，输入连接密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login:&lt;/code&gt;后输入&lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password:&lt;/code&gt;输入密码，输入的时候没有反应为正常情况&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;现在，已经有一台&lt;code&gt;Linux&lt;/code&gt;机器，不管是阿里云上的，还是本地的虚拟机&lt;/p&gt;

&lt;p&gt;具体过程可能改版更新，密码可以随时修改，远程连接码不一定使用，使用实例密码即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;服务器配置&#34;&gt;服务器配置&lt;/h2&gt;

&lt;h3 id=&#34;ssh-远程登录&#34;&gt;&lt;code&gt;ssh&lt;/code&gt;远程登录&lt;/h3&gt;

&lt;p&gt;流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先登陆&lt;code&gt;root&lt;/code&gt;账户（阿里云网页登陆或者其他）&lt;/li&gt;
&lt;li&gt;成功看到&lt;code&gt;Welcome...&lt;/code&gt;后&lt;/li&gt;
&lt;li&gt;把本地的SSH公钥复制到&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;，用&lt;code&gt;echo &#39;xxx公钥&#39; &amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建议把上面命令在VSCode上编辑好再复制&lt;/li&gt;
&lt;li&gt;新建终端，在本地运行&lt;code&gt;ssh root@实例IP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;看到&lt;code&gt;Welcome to Alibaba Cloud Elastic Compute Service !&lt;/code&gt;后，此时，就可以在本地终端用&lt;code&gt;ssh&lt;/code&gt;操作云服务器了&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;成功界面&#34;&gt;成功界面&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Welcome to...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用&lt;code&gt;exit&lt;/code&gt;退出，logout&lt;/p&gt;

&lt;h4 id=&#34;刚才做了什么&#34;&gt;刚才做了什么&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;把本地的公钥复制到阿里云的&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在本地用&lt;code&gt;ssh root@实例IP&lt;/code&gt;来远程操作云机器&lt;/li&gt;
&lt;li&gt;以后都用&lt;code&gt;ssh root@实例IP&lt;/code&gt;的方式即可&lt;/li&gt;
&lt;li&gt;可以在hosts里给实例IP取个别名&lt;/li&gt;
&lt;li&gt;要退出云机器，输入&lt;code&gt;exit&lt;/code&gt;，回车&lt;/li&gt;
&lt;li&gt;如果卡了，直接&lt;code&gt;Ctrl + w&lt;/code&gt;退出终端&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;如何防止-ssh卡住-可跳过&#34;&gt;如何防止&lt;code&gt;ssh卡住&lt;/code&gt;（可跳过）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt;最后加下面两句话&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Host *
ServerAliveInterval 30
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用VScode打开这个文件会失败&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以用两次echo搞定&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;Host *&amp;quot; &amp;gt;&amp;gt; /etc/ssh/ssh_config
echo &amp;quot;ServerAliveInterval 30&amp;quot; &amp;gt;&amp;gt; /etc/ssh/ssh_config
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不要少写了空格&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重启终端生效，如果没有就重启&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从这里&lt;a href=&#34;https://unix.stackexchange.com/questions/200239/how-can-i-keep-my-ssh-sessions-from-freezing/200256#200256&#34;&gt;抄来的&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;工具能用就行&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;创建普通应用账户&#34;&gt;创建普通应用账户&lt;/h3&gt;

&lt;h4 id=&#34;为什么&#34;&gt;为什么&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;的&lt;code&gt;root&lt;/code&gt;账户拥有最高权限，一旦被攻克&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;步骤&#34;&gt;步骤&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;账户账户下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduser yourname&lt;/code&gt;注意必须都小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enter new UNIX password:&lt;/code&gt;输入密码&lt;/li&gt;
&lt;li&gt;再次输入密码，可以和&lt;code&gt;root&lt;/code&gt;的一样&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一直回车，直到结束，运行如下命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /home/yourname/.ssh #创建路径
cp ~/.ssh/authorized_keys /home/yourname/.ssh/ #复制公钥
chmod 755 /home/yourname/.ssh/authorized_keys #将路径变为可读
chown yourname:yourname /home/yourname/.ssh/authorized_keys #把key的拥有者变更为登录用户
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;现在&lt;code&gt;ssh yourname@实例IP&lt;/code&gt;就可以使用了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;多账户示意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh root@ip&lt;/code&gt;访问&lt;code&gt;root /root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh frank@ip&lt;/code&gt;访问&lt;code&gt;frank /home/frank&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sudo&#34;&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;给-user-添加-sudo-权限&#34;&gt;给&lt;code&gt;user&lt;/code&gt;添加&lt;code&gt;sudo&lt;/code&gt;权限&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;adduser username sudo&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;sudo-是什么&#34;&gt;&lt;code&gt;sudo&lt;/code&gt;是什么&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;全称&lt;code&gt;super user do&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类似于win的「以管理员身份运行」&lt;/li&gt;
&lt;li&gt;平时不该使用&lt;code&gt;root&lt;/code&gt;账户，而是&lt;code&gt;frank&lt;/code&gt;账户&lt;/li&gt;
&lt;li&gt;遇到特殊操作，就在前面加&lt;code&gt;sudo&lt;/code&gt;，请出&lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要输入&lt;code&gt;frank&lt;/code&gt;的密码，不是&lt;code&gt;root&lt;/code&gt;的密码&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;ctrl + a&lt;/code&gt;可以快速回到命令前面，&lt;code&gt;ctrl + e&lt;/code&gt;到最后&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo!!&lt;/code&gt;的意思是用&lt;code&gt;sudo&lt;/code&gt;执行上一句命令&lt;/li&gt;
&lt;li&gt;比如运行&lt;code&gt;apt-get update&lt;/code&gt;更新包&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;部署-node-js-代码&#34;&gt;部署 Node.js 代码&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;安装过&lt;code&gt;Node.js&lt;/code&gt;和&lt;code&gt;git&lt;/code&gt;的可跳过，直接看&lt;code&gt;### 部署应用&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;安装-node-js-8-x&#34;&gt;安装&lt;code&gt;Node.js 8.x+&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;流程&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
sudo sed -i &#39;s/deb.nodesource.com\/node_12.x/mirrors.tuna.tsinghua.edu.cn\/nodesource\/deb_12.x/g&#39; /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install -y nodejs
node -v
npm -v
npx -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装-git&#34;&gt;安装&lt;code&gt;git&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&#34;命令&#34;&gt;命令&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git
# 遇到[Y/n]输入回车，或者y回车
git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;由于远程无界面环境，安装不了VSCode，虽然vim可以&lt;/li&gt;
&lt;li&gt;不使用&lt;code&gt;git commit -v&lt;/code&gt;，改用&lt;code&gt;git commit -m &amp;quot;xxx&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果想学习&lt;code&gt;vim&lt;/code&gt;，在本地电脑输入&lt;code&gt;vimtutor&lt;/code&gt;看完&lt;/li&gt;
&lt;li&gt;一开始不要浪费时间学&lt;code&gt;vim&lt;/code&gt;，推荐若愚的&lt;a href=&#34;https://xiedaimala.com/tasks/2ed4ca18-f1d6-42df-baab-69657416bdc7&#34;&gt;vim教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自行搜报错信息&lt;/li&gt;
&lt;li&gt;实在不行，就去阿里云页面重启机器即可&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;部署应用&#34;&gt;部署应用&lt;/h3&gt;

&lt;h4 id=&#34;下载代码&#34;&gt;下载代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/FrankFang/nodejs-test.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;这个地址可以改成仓库的&lt;code&gt;https&lt;/code&gt;地址，只是下载测试，所以不要使用&lt;code&gt;ssh&lt;/code&gt;地址，使用&lt;code&gt;https&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;启动应用2&#34;&gt;启动应用2&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd nodejs-test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touch log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动命令：&lt;code&gt;node server.js 8888 &amp;gt; log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把启动命令做成&lt;code&gt;start&lt;/code&gt;文件：&lt;code&gt;touch start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加可执行权限：&lt;code&gt;chmod +x ./start&lt;/code&gt;，使其可执行带&lt;code&gt;rw-x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;sh ./start&lt;/code&gt;得到一个进程号&lt;code&gt;pid&lt;/code&gt;，记下来，比如是：&lt;code&gt;[1] 19225&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail log&lt;/code&gt;看&lt;code&gt;log&lt;/code&gt;内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill -9 pid&lt;/code&gt;可以关掉进程，即&lt;code&gt;kill -9 19225&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;killall node&lt;/code&gt;可以关掉所有&lt;code&gt;node&lt;/code&gt;进程&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;如何重启应用&#34;&gt;如何重启应用&lt;/h3&gt;

&lt;h4 id=&#34;上传代码&#34;&gt;上传代码&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;本地改完代码后，&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;下载代码2&#34;&gt;下载代码2&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh frank@实例IP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd nodejs-test/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;killall node&lt;/code&gt;（因为忘了进程号，实际上可以记下来）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh./start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启完毕&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;请求和响应分别有那几部分&lt;/li&gt;
&lt;li&gt;请求动词有哪些&lt;/li&gt;
&lt;li&gt;状态码有哪些&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;curl&lt;/code&gt;构造请求&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;Node.js&lt;/code&gt;读取请求，造响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTML/CSS/JS&lt;/code&gt;本质都是字符串&lt;/li&gt;
&lt;li&gt;部署&lt;code&gt;Node.js&lt;/code&gt;应用到云服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;阿里云停机操作&#34;&gt;阿里云停机操作&lt;/h2&gt;

&lt;h3 id=&#34;记得用完服务器机器要关机-并选择停止计费-4&#34;&gt;&lt;strong&gt;记得用完服务器机器要关机（并选择停止计费）&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&#34;记得用完服务器机器要关机-并选择停止计费-5&#34;&gt;&lt;strong&gt;记得用完服务器机器要关机（并选择停止计费）&lt;/strong&gt;&lt;/h4&gt;

&lt;h2 id=&#34;node-js-初体验&#34;&gt;Node.js 初体验&lt;/h2&gt;

&lt;h2 id=&#34;方便大家复制的代码&#34;&gt;方便大家复制的代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v http://127.0.0.1:8888

request.getHeader(&#39;Accept&#39;)
response.statusCode = 200
response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);
response.write(&#39;内容&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;有问题的代码&#34;&gt;有问题的代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;if(path === &#39;/&#39;){
  response.statusCode = 200
  response.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;)
  response.write(`
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./style.css&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;你好&amp;lt;/h1&amp;gt;
  `)
  response.end()
} else if(path === &#39;./style.css&#39;){
  response.statusCode = 200
  response.setHeader(&#39;Content-Type&#39;, &#39;text/css;charset=utf-8&#39;)
  response.write(`h1{color: red;}`)
  response.end()
} else {
  response.statusCode = 404
  response.end()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssh-远程登录-1&#34;&gt;ssh 远程登录&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;复制本地~/.ssh/id_rsa.pub内容&#39; &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;防止-ssh-卡住&#34;&gt;防止 ssh 卡住&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;Host *&amp;quot; &amp;gt;&amp;gt; /etc/ssh/ssh_config
echo &amp;quot;  ServerAliveInterval 30&amp;quot; &amp;gt;&amp;gt; /etc/ssh/ssh_config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;创建应用账户&#34;&gt;创建应用账户&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adduser frank
mkdir  /home/frank/.ssh
cp ~/.ssh/authorized_keys /home/frank/.ssh/
chmod 755 /home/frank/.ssh/authorized_keys
chown frank:frank /home/frank/.ssh/authorized_keys

adduser frank sudo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装-node-js-8和git&#34;&gt;安装 Node.js 8和git&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -
sudo sed -i &#39;s/deb.nodesource.com\/node_8.x/mirrors.tuna.tsinghua.edu.cn\/nodesource\/deb_8.x/g&#39; /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install -y nodejs
node -v
npm -v
npx -v

sudo apt install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;部署应用2&#34;&gt;部署应用2&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/FrankFang/nodejs-test.git
cd nodejs-test
touch log
启动命令：node server.js 8888 &amp;gt; log 2&amp;gt;&amp;amp;1 &amp;amp;
把启动命令做成 start 文件
添加执行权限 chmod +x ./start
运行 sh ./start 得到一个进程号 pid
tail log 看 log 内容
kill -9 pid 可以关掉进程
killall node 可以关掉所有 node 进程
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;如何重启应用2&#34;&gt;如何重启应用2&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh frank@实例ip
cd nodejs-test
git pull
killall node（因为忘了进程号，实际上可以记下来）
sh ./start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;强烈建议购买阿里云服务器最低配&lt;/p&gt;

&lt;h2 id=&#34;记得用完服务器机器要关机-并选择停止计费-6&#34;&gt;&lt;strong&gt;!记得用完服务器机器要关机（并选择停止计费!）&lt;/strong&gt;&lt;/h2&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;参考文章&#34;&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-29-11-22-40.js%20%E6%9C%8D%E5%8A%A1%E5%99%A8.pdf&#34;&gt;HTTP 请求与响应 &amp;amp; Node.js 服务器.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://zhih.me/how-the-web-works/&#34;&gt;WEB是如何工作的 By底噪&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;相关文章&#34;&gt;相关文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解06】CSS布局_Grid布局</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A306css%E5%B8%83%E5%B1%80_grid%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sat, 18 Jan 2020 03:08:43 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A306css%E5%B8%83%E5%B1%80_grid%E5%B8%83%E5%B1%80/</guid>
      
        <description>

&lt;h2 id=&#34;grid-布局&#34;&gt;&lt;code&gt;grid&lt;/code&gt;布局&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;功能最强大的布局方案&lt;/p&gt;

&lt;p&gt;进一步降低CSS门槛&lt;/p&gt;

&lt;p&gt;一维布局用&lt;code&gt;flex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;二维用&lt;code&gt;grid&lt;/code&gt;布局&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/snippets/css/complete-guide-grid/&#34;&gt;CSS tricks:  A Complete Guide to rid&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Grid&lt;/code&gt;布局也分&lt;code&gt;container&lt;/code&gt;和&lt;code&gt;item&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;分别记忆&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;成为-container&#34;&gt;成为&lt;code&gt;container&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;父元素加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    display: grid | inline-grid;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;行和列-grid-template-rows-和-grid-template-columns&#34;&gt;行和列：&lt;code&gt;grid-template-rows&lt;/code&gt;和&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    /* 分三行 */
    grid-template-rows: 25% 100px auto;
    /* 分五列 */
    grid-template-columns: 40px 50px auto 50px 40px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;经纬线-对应上面css&#34;&gt;经纬线（对应上面CSS）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;纬线&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;[1]&amp;mdash;&amp;gt;[2]&amp;mdash;&amp;gt;[3]&amp;mdash;&amp;gt;[4]&lt;/p&gt;

&lt;p&gt;对应，可互换&lt;/p&gt;

&lt;p&gt;[-4]&amp;ndash;&amp;gt;[-3]&amp;ndash;&amp;gt;[-2]&amp;ndash;&amp;gt;[-1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;经线&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;[1]&amp;mdash;&amp;gt;[2]&amp;mdash;&amp;gt;[3]&amp;mdash;&amp;gt;[4]&amp;mdash;&amp;gt;[5]&amp;mdash;&amp;gt;[6]&lt;/p&gt;

&lt;p&gt;对应，可互换&lt;/p&gt;

&lt;p&gt;[-6]&amp;ndash;&amp;gt;[-5]&amp;ndash;&amp;gt;[-4]&amp;ndash;&amp;gt;[-3]&amp;ndash;&amp;gt;[-2]&amp;ndash;&amp;gt;[-1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以给每条线取名字&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;取名有啥用，用于&lt;code&gt;item&lt;/code&gt;上&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以设置&lt;code&gt;item&lt;/code&gt;范围，范围到名为xx的那根线&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item-a{
    grid-row-start: row1-start;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: five;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;单位-fr-即-free-space-巧记-份儿&#34;&gt;单位&lt;code&gt;fr&lt;/code&gt;，即&lt;code&gt;free space&lt;/code&gt;，巧记：份儿&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    grid-template-columns: 1fr 1fr 1fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    grid-template-columns: 1fr 50px 1fr 1fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;可应用在平均等距布局使用，配合&lt;code&gt;grid-gap&lt;/code&gt;代替负margin&lt;/p&gt;

&lt;p&gt;仍需计算宽度&lt;/p&gt;

&lt;p&gt;任意多子项&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;分区-grid-template-areas&#34;&gt;分区 &lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item-a{
    grid-area: header;
}

.item-b{
    grid-area: main;
}

.item-c{
    grid-area: sidebar;
}

.item-d{
    grid-area: footer;
}

.container{
    display:grid;
    grid-template-rows: 240px repeat(3, 120px);/* auto */
    grid-template-columns:  50px  50px  50px  50px;
    grid-template-areas: 
    &amp;quot;header header header header&amp;quot;   /* 第一行：header*4 不可省略为一个header */
    &amp;quot;main   main   .      sidebar&amp;quot;  /* 第二行：main empty sidebar */
    &amp;quot;footer footer footer footer&amp;quot;;  /* 第三行：footer */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;命名后用文字一一对应&lt;/p&gt;

&lt;p&gt;一般用&lt;code&gt;.&lt;/code&gt;表示为空，empty&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;空隙-grid-row-gap-和-grid-column-gap&#34;&gt;空隙 &lt;code&gt;grid-row-gap&lt;/code&gt;和&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    grid-template-rows: 80px auto 80px;
    grid-template-columns: 100px 50px 100px;
    grid-row-gap: 15px;
    grid-column-gap: 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;划线，以线的范围，填子元素&lt;/p&gt;

&lt;p&gt;搭框架&lt;/p&gt;

&lt;p&gt;grid属性太多，用到再说，用不到就算了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;实践&#34;&gt;实践&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;布局：grid尤其适合不规则布局&lt;/li&gt;
&lt;li&gt;经验&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;等到grid普及了，前端对CSS的要求进一步降低&lt;/p&gt;

&lt;p&gt;浅尝辄止&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;例子和&lt;a href=&#34;https://cssgridgarden.com/#zh-cn&#34;&gt;游戏&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;若仅使用&lt;code&gt;grid-column-start&lt;/code&gt;，网格默认只占一列。然而，你可以使用&lt;code&gt;grid-column-end&lt;/code&gt;属性将网格拓展到多列。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;grid-column-end&lt;/code&gt;，将你的所有胡萝卜浇水，但不要将水浇到土地上哦，我们要节约用水！注意，胡萝卜从第一列开始，第四列结束。&lt;/p&gt;

&lt;p&gt;包括开始，不包括结尾&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[start:2,end:4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;左闭右开&lt;/p&gt;

&lt;p&gt;当将&lt;code&gt;grid-column-start&lt;/code&gt;和&lt;code&gt;grid-column-end&lt;/code&gt;一起使用时，你也许已经注意到结束的值比起始的值大。但事实证明并非如此！&lt;/p&gt;

&lt;p&gt;尝试设置&lt;code&gt;grid-column-end&lt;/code&gt;的值小于5&lt;/p&gt;

&lt;p&gt;start end 并不绝对，不是字面的意思 只分先后  左闭右开 [end:5,start:2)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;开发者工具会影响grid 里图片大小？&lt;/p&gt;

&lt;p&gt;grid布局&amp;amp;多种居中方式总结&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-30-0-56-25.pdf&#34;&gt;CSS 布局.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/fcc483bcf245&#34;&gt;为什么CSS Grid比Bootstrap更适合布局 By阮一峰 2017&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解05】CSS布局_Flex布局</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A305css%E5%B8%83%E5%B1%80_flex%E5%B8%83%E5%B1%80/</link>
      <pubDate>Fri, 17 Jan 2020 03:07:53 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A305css%E5%B8%83%E5%B1%80_flex%E5%B8%83%E5%B1%80/</guid>
      
        <description>

&lt;h2 id=&#34;flex-布局&#34;&gt;&lt;code&gt;flex&lt;/code&gt;布局&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;教程（来自&lt;a href=&#34;https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background&#34;&gt;CSS Tricks&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;忘掉&lt;/li&gt;
&lt;li&gt;用flex重写float布局&lt;/li&gt;
&lt;li&gt;flex布局对性能的影响&lt;/li&gt;
&lt;li&gt;FFC&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;容器-container-子项-item&#34;&gt;容器&lt;code&gt;container&lt;/code&gt;，子项&lt;code&gt;item&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一个规矩：不缩写具有特殊明确含义或者非约定行业规范、业界共识（HTML CSS JS）的英文，即使很长：&lt;code&gt;class=&amp;quot;container&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;容器&lt;code&gt;.container&lt;/code&gt;，作父元素&lt;/li&gt;
&lt;li&gt;直接的子元素，&lt;code&gt;.item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置了 display: flex 的父元素（在本例中是 &lt;code&gt;.container&lt;/code&gt;）被称之为 flex 容器（&lt;code&gt;flex container&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;在 flex 容器中表现为弹性的盒子的元素被称之为 flex 项（&lt;code&gt;flex item&lt;/code&gt;）（本例中是&lt;code&gt;.item&lt;/code&gt; ）元素&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;容器-flex-container-的样式&#34;&gt;容器&lt;code&gt;flex container&lt;/code&gt;的样式&lt;/h3&gt;

&lt;h4 id=&#34;让一个元素变成-flex-容器&#34;&gt;让一个元素变成&lt;code&gt;flex&lt;/code&gt;容器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    display:flex;
    /* or inline-flex */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:flex;&lt;/code&gt;不另起一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display:inline-flex;&lt;/code&gt;另起一行&lt;/li&gt;
&lt;li&gt;直接子元素自动变为&lt;code&gt;flex item&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;属性不写就是默认值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;改变-items-流动方向-主轴main-axis&#34;&gt;改变&lt;code&gt;items&lt;/code&gt;流动方向（主轴main axis）&lt;/h4&gt;

&lt;p&gt;即改变默认文档流方向：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    display:flex;
    flex-direction:column;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;默认取值&lt;code&gt;row&lt;/code&gt;，从左往右排列&lt;/li&gt;
&lt;li&gt;弹性盒模型的流&lt;code&gt;flex flow&lt;/code&gt;，之前是普通&lt;code&gt;normal flow&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可取值：&lt;code&gt;row | row-reverse | column | column-reverse&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
display:flex;
flex-direction: row | row-reverse | column | column-reverse;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;改变折行&#34;&gt;改变折行&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;弹性盒模型中，设置的宽高不是计算宽高（Computed）&lt;/p&gt;

&lt;p&gt;挤满一行，有多少空间就挤多少空间&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wrap-reverse&lt;/code&gt;一般不用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-wrap:nowrap;&lt;/code&gt;：默认不折行，可能会压缩子元素，强制在一行中显示&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可取值&lt;code&gt;nowrap | wrap | wrap-reverse&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
display:flex;
flex-wrap: nowrap | wrap | wrap-reverse;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;flex-flow&#34;&gt;&lt;code&gt;flex-flow&lt;/code&gt;:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flex-direction&lt;/code&gt; 和 &lt;code&gt;flex-wrap&lt;/code&gt; 的缩写形式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container {
flex-flow: &amp;lt;flex-direction&amp;gt; || &amp;lt;flex-wrap&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;默认值为 &lt;code&gt;flex-flow: row nowrap&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果写了两个值都写了，则第一个为&lt;code&gt;flex-direction&lt;/code&gt;，第二为&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若只写一个，即简写，则会根据写的内容来判断是&lt;code&gt;flex-direction&lt;/code&gt;还是&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;主轴-main-axis-对齐方式-justify-content&#34;&gt;主轴（main axis）对齐方式：&lt;code&gt;justify-content&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Emmet缩写&lt;code&gt;jc&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;默认从左往右：&lt;code&gt;justify-content:flex-start;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;弹性流的方式都往开始那里挤&lt;/li&gt;
&lt;li&gt;可取值&lt;code&gt;flex-start | flex-end | center&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt;：尽量往前靠&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt;：尽量往后靠&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;：居中，尽量往中间靠&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有三种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;space-between&lt;/code&gt;：把所有剩余空间尽量放到间隙里，和 &lt;code&gt;space-around&lt;/code&gt; 非常相似，只是它不会在两端留下任何空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt;：把所有剩余空间平均放到子元素周围（所有子元素左右各得一份相同大小的空间间隙，等分间隙），会使所有 flex 项沿着主轴均匀地分布，在任意一端都会留有一点空间&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;space-evenly&lt;/code&gt;：平均围绕子元素，即所有子元素间的空隙宽度相同，空隙等宽&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
display:flex;
justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;次轴对齐方式-align-items&#34;&gt;次轴对齐方式：&lt;code&gt;align-items&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;默认次轴是纵轴，即交叉轴&lt;/p&gt;

&lt;p&gt;子元素高度不一致时用&lt;/p&gt;

&lt;p&gt;Emmet缩写&lt;code&gt;ai&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;默认值&lt;code&gt;align-items: stretch&lt;/code&gt; ：延伸，拉伸&lt;/li&gt;
&lt;li&gt;子元素设固定高度时，容器高度由最高子元素撑开，不会拉长所有子元素，各元素往上顶&lt;/li&gt;
&lt;li&gt;子元素不设固定高度时，高度由内容撑开，会拉长所有子元素，直至和最高一个子元素一样高&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;其会使所有 flex 项沿着交叉轴的方向拉伸以填充父容器。&lt;/p&gt;

&lt;p&gt;如果父容器在交叉轴方向上没有固定宽度（即高度），则所有 flex 项将变得与最长的 flex 项一样长（即高度保持一致）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;align-items: flex-start&lt;/code&gt; ：各元素往上顶&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items: flex-end&lt;/code&gt; ：各元素往下顶&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items: center&lt;/code&gt;：居中&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;align-items: baseline&lt;/code&gt;及其他：不用，不学&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
display:flex;
align-items: stretch | flex-start | flex-end | center | baseline等
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主轴（main axis）是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;该轴的开始和结束被称为 main start 和 main end&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;交叉轴（cross axis）是垂直于 flex 元素放置方向的轴&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;该轴的开始和结束被称为 cross start 和 cross end&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;多行内容-很少用到&#34;&gt;多行内容（很少用到）&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;高度、宽度都有多余空间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;语法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.container{
    align-content: flex-start | flex-end | center | stretch | space-between | space-around;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何分布&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;align-content: stretch;&lt;/code&gt;：默认值，拉伸&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content: flex-start;&lt;/code&gt;：子元素往上顶，多余的行高全部分配到底部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content: flex-end;&lt;/code&gt;：子元素网下顶，多余的行高全部分配到顶部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content: center;&lt;/code&gt;：子元素居中，多余的行高分别分配到顶部和底部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content: space-between;&lt;/code&gt;：各个相邻子元素之间的间隙平均分配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content: space-around;&lt;/code&gt;：所有子元素沿着次轴均匀地各得一份相同大小的空间间隙&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content: space-evenly;&lt;/code&gt;：平均围绕子元素，即所有子元素间的空隙宽度相同，等分间隙，空隙等宽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码演示：&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-3/css-demo_layout_flexbox_container.html&#34;&gt;css-demo_layout_flexbox_container&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;

&lt;p&gt;容器上的属性，有下面六种属性可以设置在容器上，它们分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt; 、&lt;code&gt;flex-wrap&lt;/code&gt; 、简写&lt;code&gt;flex-flow&lt;/code&gt;、 - &lt;code&gt;justify-content&lt;/code&gt; 、&lt;code&gt;align-items&lt;/code&gt;、 &lt;code&gt;align-content&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;flex-item-的样式-基本样式&#34;&gt;&lt;code&gt;flex item&lt;/code&gt;的样式：基本样式&lt;/h3&gt;

&lt;h4 id=&#34;item-上面加-order&#34;&gt;&lt;code&gt;.item&lt;/code&gt; 上面加&lt;code&gt;order&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;order&lt;/code&gt;默认值为0，取值范围：正负整数，指定取值从小到大排列&lt;/p&gt;

&lt;p&gt;改变子元素显示顺序&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item:first-child {
    order:100;
}

.item:nth-child(2){
    order:2;
}

.item:last-child{
    order:-1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意&lt;code&gt;.item:first-child&lt;/code&gt;这个选择器冒号&lt;code&gt;:&lt;/code&gt;前后，不能有空格&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;flex-item-的样式-实现-flex-响应式&#34;&gt;&lt;code&gt;flex item&lt;/code&gt;的样式：实现&lt;code&gt;flex&lt;/code&gt;响应式&lt;/h3&gt;

&lt;h4 id=&#34;flex-响应式实现-1-item-上面加-flex-grow&#34;&gt;&lt;code&gt;flex&lt;/code&gt;响应式实现_1：&lt;code&gt;.item&lt;/code&gt; 上面加&lt;code&gt;flex-grow&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;定义了子元素的尺寸增长因子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex item&lt;/code&gt;未设置固定宽度&lt;/li&gt;
&lt;li&gt;未加&lt;code&gt;flex-grow&lt;/code&gt;属性时，不写则表示默认值 &lt;code&gt;flex-grow: 0;&lt;/code&gt;，&lt;code&gt;flex item&lt;/code&gt;收缩至内容的宽高&lt;/li&gt;
&lt;li&gt;加了&lt;code&gt;flex-grow&lt;/code&gt;属性，表示&lt;code&gt;flex item&lt;/code&gt;挤占剩余空间的增长因子&lt;/li&gt;
&lt;li&gt;设置每个&lt;code&gt;flex item&lt;/code&gt;都为&lt;code&gt;flex-grow: 1;&lt;/code&gt;，则表示等比例的增长来填充剩余的空间&lt;/li&gt;
&lt;li&gt;是剩余空间的增长，不是所有的空间&lt;/li&gt;
&lt;li&gt;即使设置了增长因子，&lt;code&gt;flex item&lt;/code&gt;也受到内容宽度的影响，&lt;code&gt;overflow: auto;&lt;/code&gt;无效&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;grow&lt;/code&gt; 在 &lt;code&gt;flex container&lt;/code&gt; 容器下的子元素的宽度和比容器和小的时候起作用&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grow&lt;/code&gt; 容器中除去子元素之和剩下的尺寸会按照各个子元素的 &lt;code&gt;grow&lt;/code&gt; 值进行平分加到各个子元素上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;flex-响应式实现-2-flex-shrink-控制如何变瘦&#34;&gt;&lt;code&gt;flex&lt;/code&gt;响应式实现_2：&lt;code&gt;flex-shrink&lt;/code&gt;控制如何变瘦&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;默认&lt;code&gt;flex item&lt;/code&gt;的收缩因子是&lt;code&gt;flex-shrink:1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;收缩是当空间不够时才起效，即&lt;code&gt;flex item&lt;/code&gt;的原始宽度被压缩的时候&lt;/li&gt;
&lt;li&gt;收缩因子&lt;code&gt;flex-shrink&lt;/code&gt;值设得越大，收缩越快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex item&lt;/code&gt;要加原始宽度&lt;/li&gt;
&lt;li&gt;一般写&lt;code&gt;flex-shrink:0;&lt;/code&gt;，配合设置&lt;code&gt;min-width&lt;/code&gt;，或者&lt;code&gt;flex-basis&lt;/code&gt;的值，防止变瘦压缩内容&lt;/li&gt;
&lt;li&gt;一般让内容区正文收缩，其他区域防止收缩&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;flex-wrap-对-flex-grow-和-flex-shrink-的影响&#34;&gt;&lt;code&gt;flex-wrap&lt;/code&gt;对&lt;code&gt;flex-grow&lt;/code&gt;和&lt;code&gt;flex-shrink&lt;/code&gt;的影响&lt;/h4&gt;

&lt;h5 id=&#34;当-flex-wrap-为-wrap-wrap-reverse&#34;&gt;当 &lt;code&gt;flex-wrap&lt;/code&gt; 为 &lt;code&gt;wrap | wrap-reverse&lt;/code&gt;&lt;/h5&gt;

&lt;h6 id=&#34;且子项宽度和小于父容器宽度时&#34;&gt;且子项宽度和小于父容器宽度时&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt; 会起作用，子项会根据 &lt;code&gt;flex-grow&lt;/code&gt; 设定的值放大（为&lt;code&gt;0&lt;/code&gt;的项不放大）&lt;/p&gt;

&lt;h6 id=&#34;且子项宽度和超过父容器宽度时&#34;&gt;且子项宽度和超过父容器宽度时&lt;/h6&gt;

&lt;p&gt;首先一定会换行，换行后，每一行的右端都可能会有剩余空间（最后一行包含的子项可能比前几行少，所以剩余空间可能会更大）&lt;/p&gt;

&lt;p&gt;这时 &lt;code&gt;flex-grow&lt;/code&gt; 会起作用，若当前行所有子项的 &lt;code&gt;flex-grow&lt;/code&gt; 都为&lt;code&gt;0&lt;/code&gt;，则剩余空间保留&lt;/p&gt;

&lt;p&gt;若当前行存在一个子项的 &lt;code&gt;flex-grow&lt;/code&gt; 不为&lt;code&gt;0&lt;/code&gt;，则剩余空间会被 &lt;code&gt;flex-grow&lt;/code&gt; 不为&lt;code&gt;0&lt;/code&gt;的子项占据&lt;/p&gt;

&lt;h5 id=&#34;当-flex-wrap-为-nowrap-且子项宽度和小于父容器宽度时&#34;&gt;当 &lt;code&gt;flex-wrap&lt;/code&gt; 为 &lt;code&gt;nowrap&lt;/code&gt;，且子项宽度和小于父容器宽度时&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt; 会起作用，子项会根据 &lt;code&gt;flex-grow&lt;/code&gt; 设定的值放大，为&lt;code&gt;0&lt;/code&gt;的项不放大&lt;/p&gt;

&lt;h5 id=&#34;当-flex-wrap-为-nowrap-且子项宽度和超过父容器宽度时&#34;&gt;当 &lt;code&gt;flex-wrap&lt;/code&gt; 为 &lt;code&gt;nowrap&lt;/code&gt;，且子项宽度和超过父容器宽度时&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;flex-shrink&lt;/code&gt; 会起作用，子项会根据 &lt;code&gt;flex-shrink&lt;/code&gt; 设定的值进行缩小（为0的项不缩小）&lt;/p&gt;

&lt;p&gt;但这里有一个较为特殊情况，就是当这一行所有子项 &lt;code&gt;flex-shrink&lt;/code&gt; 都为&lt;code&gt;0&lt;/code&gt;时，也就是说所有的子项都不能缩小，就会出现横向滚动条&lt;/p&gt;

&lt;h4 id=&#34;小结2&#34;&gt;小结2&lt;/h4&gt;

&lt;p&gt;可以看出不管在什么情况下，在同一时间，&lt;code&gt;flex-shrink&lt;/code&gt; 和 &lt;code&gt;flex-grow&lt;/code&gt; 只有一个能起作用&lt;/p&gt;

&lt;p&gt;这其中的道理细想起来也很浅显：空间足够时，&lt;code&gt;flex-grow&lt;/code&gt; 就有发挥的余地，而空间不足时，&lt;code&gt;flex-shrink&lt;/code&gt; 就能起作用&lt;/p&gt;

&lt;p&gt;当然，&lt;code&gt;flex-wrap&lt;/code&gt; 的值为 &lt;code&gt;wrap | wrap-reverse&lt;/code&gt; 时，表明可以换行，既然可以换&lt;/p&gt;

&lt;p&gt;一般情况下空间就总是足够的，&lt;code&gt;flex-shrink&lt;/code&gt; 当然就不会起作用&lt;/p&gt;

&lt;h4 id=&#34;flex-响应式实现-3-flex-basis-控制基准宽度&#34;&gt;&lt;code&gt;flex&lt;/code&gt;响应式实现_3：&lt;code&gt;flex-basis&lt;/code&gt;控制基准宽度&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;未设置&lt;code&gt;flex item&lt;/code&gt;的宽度时可用&lt;/li&gt;
&lt;li&gt;不写就是默认值&lt;code&gt;flex-basis:auto;&lt;/code&gt;，计算值为&lt;code&gt;width&lt;/code&gt;的值&lt;/li&gt;
&lt;li&gt;就是宽度的意思，可以代替宽度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详细地可看以下两篇：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/17b1b445ecd4&#34;&gt;【翻译】Flex Basis与Width的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://juejin.im/post/5d538d3ce51d4561f95eea1d&#34;&gt;【译】 width 与 flex-basis 的区别&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;缩写&#34;&gt;缩写&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item{
    flex: none | [ &amp;lt;&#39;flex-grow&#39;&amp;gt; &amp;lt;&#39;flex-shrink&#39;&amp;gt;? || &amp;lt;&#39;flex-basis&#39;&amp;gt; ]
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;空格隔开：&lt;code&gt;flex:flex-grow flex-shrink flex-basis;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认值 &lt;code&gt;flex-grow: 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认值 &lt;code&gt;flex-shrink:1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-basis&lt;/code&gt;可不写，就是默认值&lt;code&gt;auto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;缩写默认值&lt;code&gt;0 1 auto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;关于 flex 取值，还有许多特殊的情况，可以按以下来进行划分：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;当-flex-取值为一个非零非负数字&#34;&gt;当 &lt;code&gt;flex&lt;/code&gt; 取值为一个非零非负数字&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;则该数字为 &lt;code&gt;flex-grow&lt;/code&gt; 值，&lt;code&gt;flex-shrink&lt;/code&gt; 取 1，&lt;code&gt;flex-basis&lt;/code&gt; 取 &lt;code&gt;0%&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下是等同的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item {flex: 1;}
/* 等同 */
.item {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;当-flex-取值为-0-时&#34;&gt;当 &lt;code&gt;flex&lt;/code&gt; 取值为 &lt;code&gt;0&lt;/code&gt; 时&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;对应的三个值分别为&lt;code&gt;0 1 0%&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下是等同的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item {flex: 0;}
/* 等同 */
.item {
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: 0%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;当-flex-取值为一个长度或百分比&#34;&gt;当 &lt;code&gt;flex&lt;/code&gt; 取值为一个长度或百分比&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;则视为 &lt;code&gt;flex-basis&lt;/code&gt; 值，&lt;code&gt;flex-grow&lt;/code&gt; 取 1，&lt;code&gt;flex-shrink&lt;/code&gt; 取 &lt;code&gt;1&lt;/code&gt;，有如下等同情况（注意 &lt;code&gt;0%&lt;/code&gt; 是一个百分比而不是一个非负数字）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下是等同的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item-1 {flex: 0%;}
/* 等同 */
.item-1 {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0%;
}

.item-2 {flex: 24px;}
/* 等同 */
.item-2 {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 24px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;当-flex-取值为两个非负数字&#34;&gt;当 &lt;code&gt;flex&lt;/code&gt; 取值为两个非负数字&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;则分别视为 &lt;code&gt;flex-grow&lt;/code&gt; 和 &lt;code&gt;flex-shrink&lt;/code&gt; 的值，&lt;code&gt;flex-basis&lt;/code&gt; 取 &lt;code&gt;0%&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下是等同的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item {flex: 2 3;}
/* 等同 */
.item {
    flex-grow: 2;
    flex-shrink: 3;
    flex-basis: 0%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;当-flex-取值为一个非负数字和一个长度或百分比&#34;&gt;当 &lt;code&gt;flex&lt;/code&gt; 取值为一个非负数字和一个长度或百分比&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;则分别视为 &lt;code&gt;flex-grow&lt;/code&gt; 和 &lt;code&gt;flex-basis&lt;/code&gt; 的值，&lt;code&gt;flex-shrink&lt;/code&gt; 取 &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如下是等同的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.item {flex: 11 32px;}
/* 等同 */
.item {
    flex-grow: 11;
    flex-shrink: 1;
    flex-basis: 32px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果记不住，就分开写&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;以上，即可实现&lt;code&gt;flex&lt;/code&gt;响应式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;align-self-特殊定制-align-items&#34;&gt;&lt;code&gt;align-self&lt;/code&gt;特殊定制&lt;code&gt;align-items&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt;里设置&lt;code&gt;align-items&lt;/code&gt;，是统一控制所有子项&lt;/li&gt;
&lt;li&gt;某个&lt;code&gt;item&lt;/code&gt;里设置&lt;code&gt;align-self&lt;/code&gt;，是特殊定制这个子项&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码演示：&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-3/css-demo_layout_flexbox_item.html&#34;&gt;css-demo_layout_flexbox_item&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;小结3&#34;&gt;小结3&lt;/h3&gt;

&lt;p&gt;Flex 伸缩项上的属性&lt;/p&gt;

&lt;p&gt;伸缩项有6种属性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt;、&lt;code&gt;flex-basis&lt;/code&gt;、&lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt; &lt;code&gt;flex&lt;/code&gt;、&lt;code&gt;align-self&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;重点-工作基本只用这些&#34;&gt;重点 工作基本只用这些&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:flex;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction:[row | colum];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap:wrap;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-content:[center | space-between]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items:center&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;

&lt;p&gt;用&lt;code&gt;flex&lt;/code&gt;做横向布局：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两栏布局&lt;/li&gt;
&lt;li&gt;三栏布局&lt;/li&gt;
&lt;li&gt;四栏布局&lt;/li&gt;
&lt;li&gt;平均布局&lt;/li&gt;
&lt;li&gt;组合使用，实现更复杂布局&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码演示：&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-3/css-demo_layout_flexbox.html&#34;&gt;css-demo_layout_flexbox&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;经验&#34;&gt;经验&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;永远不要把&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;写死，除非特殊说明&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;[min-width | max-width | min-height | max-height]&lt;/code&gt;代替&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;和&lt;code&gt;margin-xxx:auto;&lt;/code&gt;配合有意外的效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;使用负margin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;可基本满足所有布局要求&lt;/li&gt;
&lt;li&gt;使子元素分列两侧，容器&lt;code&gt;container&lt;/code&gt;上加样式：&lt;code&gt;justify-content:space-between&lt;/code&gt;，或者在右侧子元素加样式：&lt;code&gt;margin-left:auto;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去掉图片下方空白：&lt;code&gt;vertical-align: middle;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使图片居中：在图片的父元素上加样式&lt;code&gt;display: flex;&lt;/code&gt;和&lt;code&gt;align-items: center;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;不写死-width-100px&#34;&gt;不写死&lt;code&gt;width:100px&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;可以是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width:50%;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-width:100px;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width:30vw;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width:80%;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;要么加前缀&lt;code&gt;min&lt;/code&gt;或&lt;code&gt;max&lt;/code&gt;，要么别使用&lt;code&gt;px&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;负margin&#34;&gt;负margin&lt;/h3&gt;

&lt;h3 id=&#34;ffc&#34;&gt;FFC&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/a48a32f574f4&#34;&gt;flex项目深入分析&lt;/a&gt;&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/c997c1a0ed34&#34;&gt;FlexBox布局全解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/17b1b445ecd4&#34;&gt;【翻译】Flex Basis与Width的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://juejin.im/post/5d538d3ce51d4561f95eea1d&#34;&gt;【译】 width 与 flex-basis 的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool&#34;&gt;Flex 布局教程：语法篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&#34;&gt;Flex 布局教程：实例篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox&#34;&gt;MDN Flexbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://app.peterrcook.com/flexplorer/&#34;&gt;Flexplorer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bennettfeely.com/flexplorer/&#34;&gt;Flexplorer2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://poonia.github.io/flexbox/&#34;&gt;Learnable Flexbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://flexboxfroggy.com/#zh-cn&#34;&gt;Flex小游戏&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-30-0-56-25.pdf&#34;&gt;CSS 布局.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/css-flexbox-1/#flex&#34;&gt;W3C Flex Layout Box Model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mobilejazz/Eixample/&#34;&gt;A flexbox grid demo&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【HTTP非全解】浅析 URL</title>
      <link>http://xmasuhai.xyz/post/http/http%E9%9D%9E%E5%85%A8%E8%A7%A3%E6%B5%85%E6%9E%90-url/</link>
      <pubDate>Thu, 16 Jan 2020 06:42:43 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/http/http%E9%9D%9E%E5%85%A8%E8%A7%A3%E6%B5%85%E6%9E%90-url/</guid>
      
        <description>

&lt;p&gt;内容提要：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;URL 包含哪几部分，每部分分别有什么作用&lt;/li&gt;
&lt;li&gt;DNS 的作用是什么，nslookup 命令怎么用&lt;/li&gt;
&lt;li&gt;IP 的作用是什么，ping 命令怎么用&lt;/li&gt;
&lt;li&gt;域名是什么，分别哪几类域名&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;url-uniform-resource-locator-的组成部分&#34;&gt;URL（Uniform Resource Locator）的组成部分&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;传输协议&lt;/code&gt; + &lt;strong&gt;域名或IP&lt;/strong&gt; + 端口号 +&lt;code&gt;路径&lt;/code&gt; + &lt;code&gt;查询字符串&lt;/code&gt; + &lt;em&gt;锚点&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://&lt;/code&gt;&lt;strong&gt;www.baidu.com&lt;/strong&gt;&lt;code&gt;/s&lt;/code&gt;&lt;strong&gt;wd=hello&amp;amp;rsv_spt=1&lt;/strong&gt;&lt;code&gt;#5&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;==传输协议== + &lt;strong&gt;域名或IP&lt;/strong&gt; + 端口号 + ++路径++ + &lt;code&gt;查询字符串&lt;/code&gt; + &lt;em&gt;锚点&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;==https://==&lt;strong&gt;www.baidu.com&lt;/strong&gt;++/s++&lt;code&gt;wd=hello&amp;amp;rsv_spt=1&lt;/code&gt;&lt;em&gt;#5&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;传输协议（ scheme: [protocal] ）：&lt;code&gt;http&lt;/code&gt;、&lt;code&gt;https&lt;/code&gt;、&lt;code&gt;ftp&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;域名（ [//authority] Domain Name ）：&lt;code&gt;www.baidu.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;端口（ :Port ）：通常省略，&lt;code&gt;:80&lt;/code&gt;、&lt;code&gt;:443&lt;/code&gt;、&lt;code&gt;:8080&lt;/code&gt;等（http 大部分默认80, https默认443）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;[//authority] = [userinfo@]host[:port]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;路径（ Path to the file）：&lt;code&gt;/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询参数（[?query] Parameters ）：&lt;code&gt;wd=hello&amp;amp;rsv_spt=1&lt;/code&gt;或者&lt;code&gt;?key1=value1&amp;amp;key2=value2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;锚点（ [#fragment] Anchor ）：&lt;code&gt;#5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另一个常见的 URL（URI） 的例子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Special:随机页面#5&#34;&gt;https://zh.wikipedia.org/w/index.php?title=Special:随机页面#5&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https&lt;/code&gt;：协议&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zh.wikipedia.org&lt;/code&gt;：域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/w/index.php&lt;/code&gt;：路径（不同的页面）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?title=Special&lt;/code&gt;:随机页面：查询参数（相同页面，不同内容）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#5&lt;/code&gt;：锚点（相同页面，相同内容，不同位置）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中若不写端口号，则表示使用
https 对应的默认端口号 443&lt;/p&gt;

&lt;p&gt;&lt;code&gt;localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;dns-domain-name-system-域名系统&#34;&gt;DNS（Domain Name System）：域名系统&lt;/h2&gt;

&lt;p&gt;作用：根据域名查出IP地址&lt;/p&gt;

&lt;p&gt;即：将域名解析为IP 地址&lt;/p&gt;

&lt;h2 id=&#34;nslookup可查询ip-dns-地址&#34;&gt;nslookup可查询IP（DNS）地址&lt;/h2&gt;

&lt;p&gt;直接使用可以查询到域名的 A 记录&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;nslookup 命令用于查询 DNS 的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# nslookup + 域名
nslookup domain [dns-server]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nslookup xmasuhai.xyz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ip的作用-ping-命令用法&#34;&gt;IP的作用，ping 命令用法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一是定位一台设备&lt;/li&gt;
&lt;li&gt;二是封装数据报文跟其他设备交流&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ping&lt;/code&gt; 命令是常用的网络命令，它通常用来测试与目标主机的连通性。&lt;/p&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;标识主机，具体地说，标识其网络接口，并且提供主机在网络中的位置，就此提供创建到达该主机的路径的能力。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个 IP 数据包的标头包含了发送主机的 IP 地址和目的主机的 IP 地址。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ping [参数][主机名或ip地址]
ping baidu.com
ping localhost
ping 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用&lt;code&gt;Ctrl + c&lt;/code&gt;中断&lt;/p&gt;

&lt;h2 id=&#34;域名-domain-name&#34;&gt;域名（Domain Name）&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;是互联网的一项服务，主要用于域名与 IP 地址的相互转换&lt;/p&gt;

&lt;p&gt;如果要访问一个地址（使用域名），都要先通过DNS查询域名对应的IP地址，才能进行访问&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;域名分类&#34;&gt;域名分类&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;域名分顶级域名，二级域名和三级域名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如对于 &lt;code&gt;www.baidu.com&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;顶级域名：&lt;code&gt;com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二级域名：&lt;code&gt;baidu.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;三级域名：&lt;code&gt;www.baidu.com&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;域名的第一级是顶级域，它包括通用顶级域，例如&lt;code&gt;.com&lt;/code&gt;、&lt;code&gt;.net&lt;/code&gt; 和&lt;code&gt;.org&lt;/code&gt;；&lt;/p&gt;

&lt;p&gt;以及国家和地区顶级域，例如&lt;code&gt;.us&lt;/code&gt;、&lt;code&gt;.cn&lt;/code&gt;和&lt;code&gt;.tk&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;完整域名的所有字符加起来不得超过 253 个 ASCII 字符的总长度。&lt;/p&gt;

&lt;p&gt;当每一级都使用单个字符时，限制为 127 个级别：127 个字符加上 126 个点的总长度为 253。&lt;/p&gt;

&lt;p&gt;但实际上，某些域名可能具有其他限制；也没有只有一个字符的域名后缀。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;内容提要卐，后面是视频记录流水账&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;网络和-ip&#34;&gt;网络和 IP&lt;/h2&gt;

&lt;p&gt;李爵士的发明&lt;/p&gt;

&lt;p&gt;WWW=URL+HTTP+HTML&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HyperText Transfer Protocol&lt;/code&gt;协议&lt;/p&gt;

&lt;p&gt;IP: &lt;code&gt;Internet Protocol&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;ip-internet-protocol-主要约定&#34;&gt;IP（Internet Protocol）主要约定&lt;/h3&gt;

&lt;p&gt;1.如何定位一台设备
2.如何封装数据报文（用来和其他设备交流）&lt;/p&gt;

&lt;p&gt;互联网（not WWW），至少一个独特的IP&lt;/p&gt;

&lt;h4 id=&#34;ip分内网和外网&#34;&gt;IP分内网和外网&lt;/h4&gt;

&lt;p&gt;设备 路由器 电信DNS服务器 其他用户&lt;/p&gt;

&lt;h4 id=&#34;获取外网ip-买-蹭&#34;&gt;获取外网IP 买 | 蹭&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;首先，你需要租用宽带（电信或者联通）&lt;/li&gt;
&lt;li&gt;其次，你需要购买一个路由器（有时候也被叫做“网关”）&lt;/li&gt;
&lt;li&gt;当路由器连接上电信或者联通的服务器后，路由器就会获得一个外网的IP，所有通过路由器连接的设备，他们的外网IP都是一致的。&lt;/li&gt;
&lt;li&gt;注意：如果当你重启路由器之后，可能会被分配一个新的外网IP，也就是说，路由器是没有一个固定的外网IP，除非高价买，企业级需要&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;内网ip&#34;&gt;内网IP&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;路由器创建内网，内网中的设备使用内网IP，格式&lt;code&gt;192.168.xxx.xxx&lt;/code&gt;、&lt;code&gt;192.168.1.1&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;路由再给每一个内网中的设备(PC、手机)分配一个不同的内网IP&lt;/li&gt;
&lt;li&gt;内网的所有设备都有一个相同的外网IP&lt;/li&gt;
&lt;li&gt;路由器会为每一个内网中的设备分配一个不同的内网IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;内网ip固定&#34;&gt;内网IP固定&lt;/h4&gt;

&lt;h4 id=&#34;查看ip&#34;&gt;查看IP&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ping xxx.com
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ipconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看&lt;code&gt;ip38.com&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;路由器的功能&#34;&gt;路由器的功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;路由器有两个IP,内外各一&lt;/li&gt;
&lt;li&gt;内网中的设备可互相访问，但不可直接访问外网&lt;/li&gt;
&lt;li&gt;内网设备通过路由器中转，访问外网&lt;/li&gt;
&lt;li&gt;外网设备无法访问你的内网，不管直接间接&lt;/li&gt;
&lt;li&gt;外网把内容推送到内网，必须通过路由&lt;/li&gt;
&lt;li&gt;内外隔绝，路由是唯一联通点，即网关&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;几个特殊的ip&#34;&gt;几个特殊的IP&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;表示自己&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localhost&lt;/code&gt;通过hosts指定为自己&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0&lt;/code&gt;不表示任何设备，后端用&lt;/li&gt;
&lt;li&gt;localhost是个域名，不是地址，它可以被配置为任意的 IP 地址，不过通常情况下都指向 127.0.0.1(ipv4)和 &lt;a href=&#34;ipv6&#34;&gt;::1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;127.0.0.1	localhost
255.255.255.255	broadcasthost
::1             localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;127.0.0.1	xmas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就能在地址栏用&lt;code&gt;xmas&lt;/code&gt;访问&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;问：hosts 文件在哪？&lt;/p&gt;

&lt;p&gt;答： 在 Windows 系统中，hosts 位于 &lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;在 macOS / Linux系统中，hosts 位于 &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;问：在window或mac上，当我们访问&lt;code&gt;localhost&lt;/code&gt;时，究竟在访问哪里？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/59644b5bf2e8&#34;&gt;修改host文件以及localhost与127.0.0.1的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/23940717&#34;&gt;localhost、127.0.0.1 和 本机IP 三者的区别?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Kimi-Gao/Program-Blog/issues/52&#34;&gt;localhost和127.0.0.1的异同&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一些概念&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（1）127.0.0.1在Linux也好，Windows也好，都会有这个循回地址的。&lt;/p&gt;

&lt;p&gt;（2）在IP地址的规定中，第一部分是1~126为A类地址，128~191为B类地址，那么中间留的127.0.0.1被称为本地回环地址，主要作用有两个：一是测试本机的网络配置，能PING通127.0.0.1说明本机的网卡和IP协议安装都没有问题；另一个作用是某些SERVER/CLIENT的应用程序在运行时需调用服务器上的资源，一般要指定SERVER的IP地址，但当该程序要在同一台机器上运行而没有别的SERVER时就可以把SERVER的资源装在本机，SERVER的IP地址设为127.0.0.1也同样可以运行。&lt;/p&gt;

&lt;p&gt;（3）这个地址也是给本机loop back接口所预留的IP地址，它是为了让上层应用联系本机用的，如果没有这个loop back接口通常上层应用无法与自己联系，因为它仍然会把数据往IP层发送，数据到了IP层如果发现目的地是自己，则回被回环驱动程序送回。因此通过这个地址也可以测试TCP/IP的安装是否成功，就是驱动，网卡 都是否正常，但无法测试出具体TCP/IP的配置是否正确，也无法测试出网卡是否正常，因为数据在离开IP层之前就已经被送回去了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;端口&#34;&gt;端口&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;一台机子可提供很多服务，每个服务一个号码，即端口号&lt;code&gt;port&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;不同的服务&#34;&gt;不同的服务&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;提供&lt;code&gt;HTTP&lt;/code&gt;服务，最好使用&lt;code&gt;80&lt;/code&gt;端口&lt;/li&gt;
&lt;li&gt;提供&lt;code&gt;HTTPS&lt;/code&gt;服务，最好&lt;code&gt;443&lt;/code&gt;端口&lt;/li&gt;
&lt;li&gt;一共有65535个端口，&lt;code&gt;FTP&lt;/code&gt;是21端口&lt;/li&gt;
&lt;li&gt;该用什么端口：&lt;a href=&#34;https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3&#34;&gt;端口对应的服务列表wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;其他使用规则&#34;&gt;其他使用规则&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;0到1023（2的10次方减1，计1024个）号端口，留给系统使用，自己使用须取得管理权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http-server&lt;/code&gt;默认使用&lt;code&gt;8080&lt;/code&gt;端口&lt;/li&gt;
&lt;li&gt;一个端口被占用时，只能换另一个&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;IP是用来定位一个设备的&lt;/p&gt;

&lt;p&gt;端口是用来定位一个设备的服务&lt;/p&gt;

&lt;p&gt;有了IP和端口，就可以定位一个设备提供的服务&lt;/p&gt;

&lt;p&gt;比如百度的设备提供网页服务；腾讯的设备提供聊天服务；淘宝的设备提供支付服务等&lt;/p&gt;

&lt;p&gt;这些服务都可以通过IP和端口&lt;strong&gt;唯一确定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;总之，IP和端口缺一不可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;域名-路径-查询参数-锚点&#34;&gt;域名、路径、查询参数、锚点&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;qq.com&lt;/code&gt;，&lt;code&gt;t.tt&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;域名-对ip的别称&#34;&gt;域名：对IP的别称&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ping baidu.com

#将得到四个回复（win），mac 需ctrl+c中断
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;baidu.com&lt;/code&gt;对应&lt;code&gt;ping baidu.com&lt;/code&gt;，&lt;code&gt;qq.com&lt;/code&gt;对应&lt;code&gt;ping qq.com&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;知识点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个域名可以对应不同IP，即均衡负载，分流，防止一台机子扛不住，或者恶意的&lt;code&gt;DDos&lt;/code&gt;攻击，网站优化策略&lt;/li&gt;
&lt;li&gt;一个IP可对应不同域名，即穷开发者的共享主机&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;域名和IP，怎么对应起来？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;当你输入-xiedaimala-com&#34;&gt;当你输入&lt;code&gt;xiedaimala.com&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Chrome开发者工具中，&lt;code&gt;Network&lt;/code&gt;面板，&lt;code&gt;xiedaimala.com&lt;/code&gt;点击，Headers里，请求根目录&lt;code&gt;https://xiedaimala.com/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;得到响应Response 一串HTML代码，请求CSS，请求图片，请求js等&lt;/p&gt;

&lt;h4 id=&#34;过程&#34;&gt;过程&lt;/h4&gt;

&lt;p&gt;客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求&lt;/p&gt;

&lt;p&gt;DNS服务器告知客户机Web服务器的IP地址&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提供DNS的服务器的服务商：电信或联通等&lt;/li&gt;
&lt;li&gt;浏览器向提供DNS的服务器询问&lt;code&gt;xiedaimala.com&lt;/code&gt;对应什么IP&lt;/li&gt;
&lt;li&gt;服务器回答一个IP（具体过程三次握手、四次握手，面试必问）&lt;/li&gt;
&lt;li&gt;请求内容是查看这个网址的网页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg.&lt;code&gt;xiedaimala.com&lt;/code&gt;的首页&lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;why-80-或-443-端口&#34;&gt;why &lt;code&gt;80&lt;/code&gt;或&lt;code&gt;443&lt;/code&gt;端口&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;服务器默认用&lt;code&gt;80&lt;/code&gt;提供&lt;code&gt;http&lt;/code&gt;服务&lt;/li&gt;
&lt;li&gt;服务器默认用&lt;code&gt;443&lt;/code&gt;提供&lt;code&gt;https&lt;/code&gt;服务&lt;/li&gt;
&lt;li&gt;在开发者工具查看具体端口&lt;/li&gt;
&lt;li&gt;不需要写在地址栏里，写了也帮你消掉&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;nslookup&#34;&gt;&lt;code&gt;nslookup&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nslookup -qt=[type] domain [dns-server]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt;可以是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A 地址记录&lt;/li&gt;
&lt;li&gt;AAAA 地址记录（IPv6）&lt;/li&gt;
&lt;li&gt;CNAME 别名记录&lt;/li&gt;
&lt;li&gt;HINFO 硬件配置记录，包括 CPU、操作系统信息
等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;询问域名，域名&lt;code&gt;ns&lt;/code&gt;，寻找&lt;code&gt;lookup&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nslookup baidu.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认自动设置
电信DNS
&lt;code&gt;114.114.114.114&lt;/code&gt;
备用
&lt;code&gt;114.114.115.115&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但设置了可能会被代理商嵌入广告&lt;/p&gt;

&lt;h3 id=&#34;题外话&#34;&gt;题外话&lt;/h3&gt;

&lt;h4 id=&#34;www&#34;&gt;&lt;code&gt;www&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A：&lt;code&gt;www.xiedaimala.com&lt;/code&gt;和B：&lt;code&gt;xiedaimala.com&lt;/code&gt;不是同一个域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com&lt;/code&gt;（没有点）是顶级域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xiedaimala.com&lt;/code&gt;是二级域名（俗称一级域名）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;www.xiedaimala.com&lt;/code&gt;是三级域名（俗称二级）&lt;/li&gt;
&lt;li&gt;祖父子关系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;github.io&lt;/code&gt;把子域名&lt;code&gt;xxx.github.io&lt;/code&gt;免费给你使用&lt;/li&gt;
&lt;li&gt;A和B可以不是同一家公司&lt;/li&gt;
&lt;li&gt;www是多余的，历史残留，脱x子放*&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;如何请求不同的页面&#34;&gt;如何请求不同的页面&lt;/h4&gt;

&lt;h5 id=&#34;用路径&#34;&gt;用路径&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML&#34;&gt;&lt;code&gt;https://developer.mozilla.org/zh-CN/docs/Web/HTML&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS&#34;&gt;&lt;code&gt;https://developer.mozilla.org/zh-CN/docs/Web/CSS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;工具&#34;&gt;工具&lt;/h5&gt;

&lt;p&gt;使用Chrome开发者工具&lt;strong&gt;Network&lt;/strong&gt;面板查看区别&lt;/p&gt;

&lt;h4 id=&#34;同一个页面-不同内容&#34;&gt;同一个页面，不同内容&lt;/h4&gt;

&lt;p&gt;用查询参数：&lt;code&gt;https://xxx.com/s?wd=hello&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baidu.com/s?wd=hi&#34;&gt;&lt;code&gt;https://www.baidu.com/s?wd=hi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baidu.com/s?wd=hello&#34;&gt;&lt;code&gt;https://www.baidu.com/s?wd=hello&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;同一个内容-页面-不同位置&#34;&gt;同一个内容（页面），不同位置&lt;/h4&gt;

&lt;h5 id=&#34;用锚点&#34;&gt;用锚点&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6&#34;&gt;&lt;code&gt;https://developer.mozilla.org/zh-CN/docs/Web/CSS#参考书&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B&#34;&gt;&lt;code&gt;https://developer.mozilla.org/zh-CN/docs/Web/CSS#教程&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;锚点就是文档内部的定位&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;锚点看起来有中文，实际不支持中文&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#参考书&lt;/code&gt;会变成&lt;code&gt;#%E5%8F%82%E8%80%83%E4%B9%A6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;锚点不会传给服务器，所以是无法在&lt;code&gt;Network&lt;/code&gt;面板里看到的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;url&#34;&gt;URL&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;统一资源定位符(Uniform Resource Locator),简称URL,是因特网上标准的资源的地址（Address）&lt;/p&gt;

&lt;p&gt;Every HTTP &lt;strong&gt;URL&lt;/strong&gt; conforms to the syntax of a generic &lt;strong&gt;URI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;每个有效的 URI 都指向一个独特的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像、视频、邮件、PDF等&lt;/p&gt;

&lt;p&gt;The URI generic syntax consists of a hierarchical sequence of five components&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;URI = scheme:[//authority]path[?query][#fragment]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-authority = [userinfo@]host[:port]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/URL&#34;&gt;wiki:URL&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;组成&#34;&gt;组成&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;传输协议&lt;/code&gt; + &lt;strong&gt;域名或IP&lt;/strong&gt; + 端口号 +&lt;code&gt;路径&lt;/code&gt; + &lt;code&gt;查询字符串&lt;/code&gt; + &lt;em&gt;锚点&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://&lt;/code&gt;&lt;strong&gt;www.baidu.com&lt;/strong&gt;&lt;code&gt;/s&lt;/code&gt;&lt;strong&gt;wd=hello&amp;amp;rsv_spt=1&lt;/strong&gt;&lt;code&gt;#5&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;**www.baidu.com**&lt;/code&gt;是域名。 表明正在请求哪个 Web 服务器。或者，可以直接使用 IP address, 但因为不便，所以不常使用。&lt;/p&gt;

&lt;p&gt;就算没写，也应知道端口，&lt;code&gt;HTTPS&lt;/code&gt;默认端口&lt;code&gt;443&lt;/code&gt;，通常省略&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/path/to/index.html&lt;/code&gt; 是网络服务器上资源的路径，路径表示访问哪个网页&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ftp://&lt;/code&gt;是文件传输协议，不属于&lt;code&gt;www&lt;/code&gt;，本地或局域网&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wd=hello&amp;amp;rsv_spt=1&lt;/code&gt; 或&lt;code&gt;?key1=value1&amp;amp;key2=value2&lt;/code&gt; 是提供给网络服务器的额外参数。 这些参数是用 &amp;amp; 符号分隔的键/值对列表。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wd=hello&amp;amp;rsv_spt=1&lt;/code&gt;：&lt;code&gt;查询字符串&lt;/code&gt;表示页面的展示内容，第几部分，第几章，第几页，或者查询关键词&lt;/p&gt;

&lt;p&gt;在返回资源之前，Web服务器可以使用这些参数来执行额外的操作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#Anchor&lt;/code&gt;或&lt;code&gt;#SomewhereInTheDocument&lt;/code&gt;是资源本身的另一部分的锚点。&lt;/p&gt;

&lt;p&gt;锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。
例如，
在 HTML 文档上，浏览器将滚动到定义锚点的位置&lt;/p&gt;

&lt;p&gt;在视频或音频文档上，浏览器将尝试转到锚代表的时间&lt;/p&gt;

&lt;p&gt;＃后面的部分（也称为片段标识符）[fragment]从来没有发送到请求的服务器&lt;/p&gt;

&lt;p&gt;锚点会被浏览器‘吃掉’，锚点只和浏览器有关，没必要发送给服务器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;服务器无法接收&lt;code&gt;#&lt;/code&gt;之后的内容，参数&lt;/strong&gt;，不想被扣年终bonus的记住&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;http协议&#34;&gt;HTTP协议&lt;/h2&gt;

&lt;p&gt;基于&lt;code&gt;TCP&lt;/code&gt;和&lt;code&gt;IP&lt;/code&gt;两个协议：也称&lt;code&gt;TCP/IP&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;curl-命令&#34;&gt;&lt;code&gt;curl&lt;/code&gt; 命令&lt;/h2&gt;

&lt;h3 id=&#34;用-curl-可以发http请求&#34;&gt;用&lt;code&gt;curl&lt;/code&gt;可以发HTTP请求&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl https://xiedaimala.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v http://baidu.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -s -v -- http://baidu.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt;：verbose 啰嗦模式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用Chrome（地址栏输入URL），得到网页，开始解析页面&lt;/p&gt;

&lt;p&gt;而用curl命令，只得到网页，不解析页面&lt;/p&gt;

&lt;p&gt;理解以下概念&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;会被&lt;code&gt;curl&lt;/code&gt;工具重写，先请求DNS获得IP&lt;/li&gt;
&lt;li&gt;先进行TCP连接，TCP连接成功后，开始发送HTTP请求&lt;/li&gt;
&lt;li&gt;请求内容看一眼&lt;/li&gt;
&lt;li&gt;相应内容看一眼&lt;/li&gt;
&lt;li&gt;响应结束后，关闭TCP连接（看不出来）&lt;/li&gt;
&lt;li&gt;真正结束&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;gt; &lt;code&gt;curl baidu.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt; 以下是返回的内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=http://www.baidu.com/&amp;quot;&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;查看&lt;code&gt;curl&lt;/code&gt; 发送的五行请求&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;gt; &lt;code&gt;curl -v  http://baidu.com&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;*   Trying 180.101.49.12:80... #DNS询问IP地址
* TCP_NODELAY set
* Connected to baidu.com (180.101.49.12) port 80 (#0) # 链接服务器80端口
&amp;gt; GET / HTTP/1.1 #获取根路径 使用的协议
&amp;gt; Host: baidu.com #一个IP有可能对应多个域名，所以访问`180.101.49.12`所对应的的域名是`baidu.com`
&amp;gt; User-Agent: curl/7.67.0 #用户访问工具
&amp;gt; Accept: */* #期待返回的内容 任意内容
&amp;gt; # 回车表示请求结束，一共五行
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK # 以`&amp;lt;`开头的就是服务器返回的内容
&amp;lt; Accept-Ranges: bytes
&amp;lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform
&amp;lt; Connection: keep-alive
&amp;lt; Content-Length: 2381
&amp;lt; Content-Type: text/html
&amp;lt; Date: Mon, 20 Jan 2020 13:46:42 GMT
&amp;lt; Etag: &amp;quot;588604c8-94d&amp;quot;
&amp;lt; Last-Modified: Mon, 23 Jan 2017 13:27:36 GMT
&amp;lt; Pragma: no-cache
&amp;lt; Server: bfe/1.0.8.18
&amp;lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/
&amp;lt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;url=http://www.baidu.com/&amp;quot;&amp;gt;
&amp;lt;/html&amp;gt;
* Connection #0 to host baidu.com left intact
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启用&lt;code&gt;baidu.com&lt;/code&gt;,请重新访问&lt;code&gt;http://www.baidu.com/&lt;/code&gt;，对应访问的IP改变，&lt;code&gt;TCP&lt;/code&gt;启动，连接到80端口，之后发送五行内容，得到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!--STATUS OK--&amp;gt;&amp;lt;html&amp;gt;...&amp;lt;/html&amp;gt;
* Connection #0 to host www.baidu.com left intact
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有TCP结束了，才真正结束&lt;/p&gt;

&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;规定请求的格式是什么，响应式格式是什么&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTP规定如何写五行请求以及如何返回响应&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-27-11-33-39.pdf&#34;&gt;URL是什么.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-29-11-22-40.js%20%E6%9C%8D%E5%8A%A1%E5%99%A8.pdf&#34;&gt;HTTP 请求与响应 &amp;amp; Node.js 服务器.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://zhih.me/how-the-web-works/&#34;&gt;WEB是如何工作的 By底噪&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_31930499/article/details/79767330&#34;&gt;DNS的作用是什么？为什么一定要配置DNS才能上网&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2016/06/dns.html&#34;&gt;DNS 原理入门 作者：阮一峰&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解04】CSS布局_PC布局：Float布局</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A304css%E5%B8%83%E5%B1%80_pc%E5%B8%83%E5%B1%80float%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 15 Jan 2020 03:06:53 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A304css%E5%B8%83%E5%B1%80_pc%E5%B8%83%E5%B1%80float%E5%B8%83%E5%B1%80/</guid>
      
        <description>

&lt;h2 id=&#34;布局分类&#34;&gt;布局分类&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;固定宽度：PC（&lt;a href=&#34;https://taobao.com/&#34;&gt;淘宝&lt;/a&gt;），一般：960px、1000px、1024px&lt;/li&gt;
&lt;li&gt;不固定宽度：手机页面（&lt;a href=&#34;https://main.m.taobao.com/?sprefer=sypc00&#34;&gt;手机淘宝&lt;/a&gt;），主要靠文档流的原理来布局，开发者手机页面模式 | 响应式&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;屏幕 页面 尺寸&lt;/p&gt;

&lt;p&gt;文档流本来就是自适应的，不需添加额外样式，(加了固定宽度，就不是)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;响应式布局（PC上固定宽，手机不固定），即混合布局&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;布局思路&#34;&gt;布局思路&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;整体&amp;lt;-&amp;gt;细节&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;../../../images/layoutTaoLu.jpg&#34; alt=&#34;布局思路&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;文字描述-用什么布局&#34;&gt;文字描述：用什么布局&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;=&amp;gt;&lt;code&gt;兼容IE9&lt;/code&gt;=&amp;gt;&lt;code&gt;左浮两个，固定宽度，不要响应式&lt;/code&gt;=&amp;gt;&lt;code&gt;给父元素加clearfix&lt;/code&gt;=&amp;gt;&lt;code&gt;使用float布局&lt;/code&gt;{必要时使用负margin}&lt;/li&gt;
&lt;li&gt;=&amp;gt;&lt;code&gt;不需兼容IE9&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;=&amp;gt;&lt;code&gt;不只兼容最新浏览器&lt;/code&gt;=&amp;gt;&lt;code&gt;使用flex布局&lt;/code&gt;{必要时使用负margin}&lt;/li&gt;
&lt;li&gt;=&amp;gt;&lt;code&gt;只兼容最新浏览器&lt;/code&gt;=&amp;gt;&lt;code&gt;使用grid布局&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;float-布局-非响应式&#34;&gt;&lt;code&gt;float&lt;/code&gt;布局，非响应式&lt;/h3&gt;

&lt;h4 id=&#34;步骤&#34;&gt;步骤&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;clearfix::after&lt;/code&gt;伪元素清浮动法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;子元素加&lt;code&gt;float:left;&lt;/code&gt;和&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父元素加&lt;code&gt;.clearfix&lt;/code&gt;：&lt;strong&gt;三行Combo&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.clearfix::after {
content: &#39;&#39;;
display: block;
clear: both;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父元素默认是块级元素&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;高度是由内部文档流元素高度的总和决定&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;float&lt;/code&gt;属性使元素脱离文档流，不再影响父元素高度&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;父元素里没有文档流元素，高度为0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决方法：伪元素清浮动法&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;经验&#34;&gt;经验&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;留一些空间，或者最后一个不设&lt;code&gt;width&lt;/code&gt;，或者用&lt;code&gt;max-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不需要响应式，手机上没IE，&lt;code&gt;float&lt;/code&gt;布局专为IE&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;IE6/7存在双倍margin Bug，&lt;code&gt;margin-left&lt;/code&gt;x2，解决办法两个&lt;/p&gt;

&lt;p&gt;一是将错就错，针对IE6/7把margin减半，写margin，再写&lt;code&gt;_margin:&lt;/code&gt;或者&lt;code&gt;*margin:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;二是加个&lt;code&gt;display:inline-block&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IE8不支持&lt;code&gt;::after&lt;/code&gt;、HTML5新标签等，&lt;code&gt;header{display:block;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IE7不支持&lt;code&gt;border-box&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;栗子实践&#34;&gt;栗子实践&lt;/h3&gt;

&lt;h4 id=&#34;用-float-做不同布局&#34;&gt;用&lt;code&gt;float&lt;/code&gt;做不同布局&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;两栏布局（如顶部条）&lt;/li&gt;
&lt;li&gt;三栏布局（如内容区），比如：&lt;a href=&#34;https://taobao.com/&#34;&gt;淘宝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;四栏布局（如导航）&lt;/li&gt;
&lt;li&gt;平均布局（如产品展示区）&lt;/li&gt;
&lt;li&gt;过时的淘宝双飞翼布局&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_layout_floats.html&#34;&gt;css-demo_layout_floats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_layout_nav.html&#34;&gt;css-demo_layout_nav&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;注意的事项&#34;&gt;注意的事项&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;将父元素设置为&lt;code&gt;display: inline-block;&lt;/code&gt;，压缩宽度到正好包裹子元素，不留空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: inline-block;&lt;/code&gt;特点是尽量压窄自己；&lt;/li&gt;
&lt;li&gt;默认的&lt;code&gt;display: block;&lt;/code&gt;特点是尽量放宽自己；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-align:top;&lt;/code&gt;或者&lt;code&gt;vertical-align:middle;&lt;/code&gt;：如果图片下有多余留空，加上这个属性可以去掉&lt;/li&gt;
&lt;li&gt;请看一小时：&lt;a href=&#34;https://www.google.com/search?q=%E6%96%B9%E5%BA%94%E6%9D%ADline+height&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=%E6%96%B9%E5%BA%94%E6%9D%ADline+height&amp;amp;aqs=chrome..69i57.18103j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;深入理解CSS：字体度量、line-height 和vertical-align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;只记套路，只看结果，中间发生什么，就当不存在&lt;/li&gt;
&lt;li&gt;高度确定，宽度适应，或设计师以整数切图&lt;/li&gt;
&lt;li&gt;两个元素高度分别是偶数和奇数，不可完全居中对齐，手动调高度&lt;/li&gt;
&lt;li&gt;文字高度&lt;code&gt;line-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;计算公约高度：平均高度，高度和除以2，计算差值，设置&lt;code&gt;margin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不设&lt;code&gt;width&lt;/code&gt;，用内容去填，即宽度由内容决定，除非&lt;code&gt;&amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;&lt;/code&gt;宽度固定，高度由内容撑起来，一般不设置具体高度值&lt;/li&gt;
&lt;li&gt;被挤下去，是因为&lt;code&gt;border-box&lt;/code&gt;的宽度包含&lt;code&gt;border&lt;/code&gt;的&lt;code&gt;1px&lt;/code&gt;，可以用&lt;code&gt;outline:1px solid red&lt;/code&gt;代替，仅用在当&lt;code&gt;border&lt;/code&gt;干扰宽度的时候，调试用，但有时可能在外面会看不见，也可用背景色代替&lt;/li&gt;
&lt;li&gt;让有固定宽度的块级父元素居中：&lt;code&gt;margin:0 auto;&lt;/code&gt;，但不太好&lt;/li&gt;
&lt;li&gt;CSS重要原则之一：不该写的多余代码不要写；必须的代码不能少&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-left:auto;margin-right:auto;&lt;/code&gt;比&lt;code&gt;margin:0 auto;&lt;/code&gt;更稳妥，可会覆盖&lt;code&gt;margin-top&lt;/code&gt;，精确，尽量正交，避免层叠掉其他样式：即最小必要原则&lt;/li&gt;
&lt;li&gt;设置了&lt;code&gt;float&lt;/code&gt;属性的元素外边距不会合并&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;负-margin&#34;&gt;负&lt;code&gt;margin&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;怎么把内容扩宽，又不影响布局？一个应用场景：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;平均布局中，块级父元素和子元素宽度固定，子元素间空隙&lt;code&gt;margin-right:12px;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;子元素们外新加个带有负&lt;code&gt;margin&lt;/code&gt;属性的父元素，值为子元素间空隙的负值&lt;code&gt;margin-right:-12px;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原来的父元素变成祖元素，父子关系变了，&lt;code&gt;clearfix&lt;/code&gt;类要加到新的父元素上，新父元素多余的右边距设为负值，值为子元素间空隙的负值&lt;code&gt;margin-right:-12px;&lt;/code&gt;即可&lt;/p&gt;

&lt;p&gt;最后一个子元素的右边框超出了祖元素，新的父元素用正&lt;code&gt;margin&lt;/code&gt;会位移，但用负&lt;code&gt;margin&lt;/code&gt;会变宽，就可使自己有足够的空间容纳子元素超出的右边框，从而不挤掉最后一个子元素而换行&lt;/p&gt;

&lt;p&gt;如果设置的负&lt;code&gt;margin&lt;/code&gt;的（绝对）值过大，仍不挤掉最后一个子元素而换行，但会使窗口产生滚动条&lt;/p&gt;

&lt;p&gt;可以追加任意多个同样的子元素，即可实现平均布局&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;经验总结&#34;&gt;经验总结&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;加头尾，即可满足所有PC页面要求&lt;/li&gt;
&lt;li&gt;手机页面不用&lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;需要计算宽度，不灵活，足以应付IE&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;问答&#34;&gt;问答&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;不用考虑IE，IE也换Chrome的内核了：Blink（Chrome及其他）、Webkit（Safari）、Gecko（Firefox），其他都淘汰弃用了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logo&lt;/code&gt;、&lt;code&gt;nav&lt;/code&gt;高度不固定，&lt;code&gt;margin-top:5px&lt;/code&gt;可行吗？直接用flexBox布局&lt;/li&gt;
&lt;li&gt;父元素宽500px，四个子元素宽分别191px，还有&lt;code&gt;border:1px;&lt;/code&gt;加起来不止764px，用&lt;code&gt;border-box&lt;/code&gt;不用考虑&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-30-0-56-25.pdf&#34;&gt;CSS 布局.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解03】CSS基础-盒模型</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A303css%E5%9F%BA%E7%A1%80-%E7%9B%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 13 Jan 2020 00:27:37 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A303css%E5%9F%BA%E7%A1%80-%E7%9B%92%E6%A8%A1%E5%9E%8B/</guid>
      
        <description>

&lt;h2 id=&#34;两种盒模型&#34;&gt;两种盒模型&lt;/h2&gt;

&lt;h3 id=&#34;盒模型&#34;&gt;盒模型&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://output.jsbin.com/puyazix&#34;&gt;直观地感受下盒模型demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;content-box 内容盒：以内容为盒子的边界（宽高度）&lt;/li&gt;
&lt;li&gt;border-box 边框盒：以边框为盒子的边界（宽高度）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;请说一下盒模型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;标准回答：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS 盒模型分两种：&lt;/p&gt;

&lt;p&gt;一种是content box，另一种是border box；&lt;/p&gt;

&lt;p&gt;区别是：&lt;/p&gt;

&lt;p&gt;content box的宽、高度只包含content；&lt;/p&gt;

&lt;p&gt;border box的宽、高度包含到border（以内），包括border、padding和content；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;区别&#34;&gt;区别&lt;/h3&gt;

&lt;p&gt;只在设置了宽高后有区别&lt;/p&gt;

&lt;p&gt;content-box 是写了多少宽度，内容就是多少宽度，但是如果设置了padding、border和margin，整个加起来，不符合视觉习惯。&lt;/p&gt;

&lt;p&gt;border-box 为了符合视觉习惯，压缩了content的内容，除去margin以外的宽度，边框的最左边到最右边就是宽度，从而使得宽度迎合视觉习惯&lt;/p&gt;

&lt;h3 id=&#34;尺寸计算公式&#34;&gt;尺寸计算公式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在浏览器&lt;strong&gt;缩放比例&lt;/strong&gt;为&lt;code&gt;1&lt;/code&gt;的情况下，F12(Chrome)打开检查元素，查看开发者工具&amp;gt;Styles&lt;/p&gt;

&lt;p&gt;&lt;code&gt;content-box [width | height] = content&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-box [width | height] = content + padding + border&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多人对盒模型有误解。把margin算进去的那是&lt;strong&gt;盒子占据的位置&lt;/strong&gt;，而不是&lt;strong&gt;盒子的大小&lt;/strong&gt;！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;盒子的大小为&lt;code&gt;content+padding+border&lt;/code&gt;即内容的&lt;code&gt;(width)&lt;/code&gt;+内边距的再加上边框，而不加上&lt;code&gt;margin&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;content 二维 width和height；可见&lt;/p&gt;

&lt;p&gt;border、padding和margin 二维的&lt;code&gt;-top&lt;/code&gt;,&lt;code&gt;-bottmom&lt;/code&gt;, &lt;code&gt;-left&lt;/code&gt;,&lt;code&gt;-right&lt;/code&gt;；&lt;/p&gt;

&lt;p&gt;border可见,通过&lt;code&gt;border-&lt;/code&gt;, &lt;code&gt;border-style&lt;/code&gt;, &lt;code&gt;border-color&lt;/code&gt;属性&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border: [border-width ||border-style ||border-color |inherit]&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;padding和margin透明（无显现属性transparent elements），间接可见&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/linjiqin/p/3556497.html&#34;&gt;CSS padding margin border属性详解 by Ruthless&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;影响和盒子有关的其他内容&lt;/p&gt;

&lt;p&gt;mdn参考&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model&#34;&gt;CSS 基础框盒模型介绍 mdn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;假如框盒上设有背景（&lt;code&gt;background-color&lt;/code&gt; 或 &lt;code&gt;background-image&lt;/code&gt;），背景将会一直延伸至边框的外沿（默认为在边框下层延伸，边框会盖在背景上）。此默认表现可通过 CSS 属性 &lt;code&gt;background-clip&lt;/code&gt; 来改变。&lt;/p&gt;

&lt;p&gt;除&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element&#34;&gt;可替换元素&lt;/a&gt;外，对于行内元素来说，尽管内容周围存在内边距与边框，但其占用空间（每一行文字的高度）则由 &lt;code&gt;line-height&lt;/code&gt;属性决定，即使边框和内边距仍会显示在内容周围。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;哪个好用&#34;&gt;哪个好用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;border-box 边框盒更好用，因为宽度不用考虑padding和border的影响，压缩点内容，要看，如果是处理文字，可以用text-overflow等来省略&lt;/p&gt;

&lt;p&gt;因为border-box的width会将padding和border包含在内，布局时更好控制，尤其是在响应式布局中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有一篇墙推IE怪异盒模型的文章：&lt;a href=&#34;https://css-tricks.com/international-box-sizing-awareness-day/&#34;&gt;《把所有元素的box-sizing都设置成border-box吧！》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有一种推荐而且很常见的做法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;* {
    box-sizing:border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;块级盒的默认宽度&#34;&gt;块级盒的默认宽度&lt;/h4&gt;

&lt;p&gt;如果未声明宽度，并且盒子是静态或者相对定位，有内容&lt;code&gt;content&lt;/code&gt;，宽度会保持 100％的 宽度，改变了&lt;code&gt;padding&lt;/code&gt; 和 &lt;code&gt;border&lt;/code&gt;的值不为0后， 块级盒会向内推动，而不是向外扩展。&lt;/p&gt;

&lt;p&gt;但是，如果明确设置盒子的宽度为 100％，那么 padding 就会向外延展。&lt;/p&gt;

&lt;p&gt;盒子的默认宽度并不真的是 100％&lt;/p&gt;

&lt;p&gt;而是&lt;strong&gt;剩下的可能值&lt;/strong&gt;(剩余真实存在的宽度)。&lt;/p&gt;

&lt;p&gt;很多情况下，盒子的默认宽度（剩余可能值）对于设置/不设置宽度都是非常有用&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/hnyei/archive/2011/09/29/2195935.html&#34;&gt;CSS盒模型详解+定位&lt;/a&gt;，翻的是&lt;a href=&#34;https://css-tricks.com/the-css-box-model/&#34;&gt;CSS Tricks: The CSS Box Model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/FrankKai/FrankKai.github.io/issues/38&#34;&gt;你真的理解浏览器盒模型吗？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kancloud.cn/dunizb/web-dev-marrow/647634&#34;&gt;前端精华总结&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codepen.io/carolineartz/full/ogVXZj&#34;&gt;边框盒 VS 内容盒Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;变态的margin合并&#34;&gt;变态的margin合并&lt;/h3&gt;

&lt;p&gt;margin不会影响盒子本身的大小，但是它会影响和盒子有关的其他内容，比如margin合并&lt;/p&gt;

&lt;h4 id=&#34;哪些情况会合并&#34;&gt;哪些情况会合并&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;上下合并，左右不合并，这样设计，方便写margin时不用再算除以2的问题，直接合并&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;父子margin合并（第一个子元素的上边距，最后一个子元素的下边距）&lt;/li&gt;
&lt;li&gt;兄弟间上下margin合并&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;如何阻止合并&#34;&gt;如何阻止合并&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;父子合并（内外block）：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;padding/border&lt;/code&gt;挡住合并&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;overflow:hidden&lt;/code&gt;挡住合并&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;display:flex&lt;/code&gt;，不知道为什么，别问我，文档规定&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;父子margin间存在padding或border，就加了阻隔，隔开父子margin，自然就不能合并了&lt;/p&gt;

&lt;p&gt;兄弟合并（上下block）：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;符合预期的&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;inline-block&lt;/code&gt;消除，margin分开计算不会合并&lt;/li&gt;
&lt;li&gt;CSS属性逐年增多，一条条死记&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;基本单位-https-www-zhangxinxu-com-wordpress-2011-03-css-css3-unit-units&#34;&gt;&lt;a href=&#34;https://www.zhangxinxu.com/wordpress/2011/03/css-css3-unit-units/&#34;&gt;基本单位&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;长度单位&#34;&gt;长度单位&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;px&lt;/code&gt;像素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;em&lt;/code&gt;相对于自身&lt;code&gt;font-size&lt;/code&gt;的倍数&lt;code&gt;1,2,3,4em&lt;/code&gt;=&lt;code&gt;1x,2x,3x,4x font-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;百分数&lt;/li&gt;
&lt;li&gt;整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vw&lt;/code&gt; | &lt;code&gt;vh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他，少，不用了解&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;颜色&#34;&gt;颜色&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hsla(h, s, l, a): (30°, 100%, 100%, 0.5)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rgba(r, g, b,a): (255, 127, 0,0.5)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Hex triplet: #FF7F00&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;淘宝色&lt;code&gt;#FF6600&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;透明&lt;code&gt;transparent&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units&#34;&gt;CSS values and units mdn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/length#Relative_length_units&#34;&gt;CSS length mdn&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;自动填充背景色&lt;/p&gt;

&lt;p&gt;在body上添加一个颜色，外面也同样变成这个色，但并不意味着背景全是body，只有加了border，才能看出body的实际范围&lt;/p&gt;

&lt;p&gt;用border来确定body在哪&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;W3C 组织建议把所有网页上的对像都放在一个盒(box)中，设计师可以通过创建定义来控制这个盒的属性，这些对像包括段落、列表、标题、图片以及层。&lt;/p&gt;

&lt;p&gt;盒模型主要定义四个区域：内容(content)、边框距(padding)、边界(border)和边距(margin)。&lt;/p&gt;

&lt;p&gt;margin，background-color，background-image，padding，content，border之间的层次、关系和相互影响。&lt;/p&gt;

&lt;p&gt;用3D画一张box model层次图&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;margin：层的边框以外留的空白&lt;/li&gt;
&lt;li&gt;background-color：背景颜色&lt;/li&gt;
&lt;li&gt;background-image：背景图片&lt;/li&gt;
&lt;li&gt;padding：层的边框到层的内容之间的空白&lt;/li&gt;
&lt;li&gt;border：边框&lt;/li&gt;
&lt;li&gt;content：内容&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://codepen.io/xmasuhai/full/ExaLrpa&#34;&gt;用CSS实现彩虹&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-23-12-30-0.pdf&#34;&gt;CSS 基础概念.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24778275&#34;&gt;CSS盒模型 定位扫盲&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000013069516&#34;&gt;CSS盒模型完整介绍JS，BFC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jayzangwill.github.io/blog/2016/12/15/CSS%20box%20model%20and%20location/#more&#34;&gt;盒模型 大小 定位&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27839418&#34;&gt;对盒子模型，BFC，IFC和外边距合并等概念和问题的总结&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/8b8198095487&#34;&gt;深入理解CSS盒模型&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://caibaojian.com/fend_note/chapter1/04_04_box_model.html&#34;&gt;WEB前端开发 盒模型&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/box-module.html&#34;&gt;前端工程师手册 盒模型&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wanghan0.github.io/2017/03/31/css-box/&#34;&gt;谈谈我对盒模型的理解2017&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/questionTerminal/7f415325ccc344789093a70a54e4745b&#34;&gt;牛客 介绍一下CSS的盒子模型？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/CSS2/box.html&#34;&gt;8 Box model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zhanglun.xyz/2014/10/05/css%E7%9A%84%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%9B%9E%E9%A1%BE/&#34;&gt;CSS的盒模型-过去和将来2014&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wanghan0.github.io/2017/04/24/css-center/&#34;&gt;CSS各种居中实现方式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.learnlayout.com/toc.html&#34;&gt;学习CSS布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zh.learnlayout.com/box-sizing.html&#34;&gt;学习CSS布局 box-sizing&lt;/a&gt;&lt;/p&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解02】CSS基础-文档流</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A302css%E5%9F%BA%E7%A1%80-%E6%96%87%E6%A1%A3%E6%B5%81/</link>
      <pubDate>Wed, 08 Jan 2020 06:12:59 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A302css%E5%9F%BA%E7%A1%80-%E6%96%87%E6%A1%A3%E6%B5%81/</guid>
      
        <description>

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Normal_Flow&#34;&gt;文档流 mdn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;块、内联、内联块？&lt;/li&gt;
&lt;li&gt;margin合并&lt;/li&gt;
&lt;li&gt;两种盒模型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;文档流-normal-flow&#34;&gt;文档流 Normal Flow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flow_Layout&#34;&gt;流式布局 mdn&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;文档流动方向&#34;&gt;文档流动方向&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;从左到右：&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span&#34;&gt;内联元素像默认的&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/a&gt; 直到排满一行，才会另起一行&lt;/li&gt;
&lt;li&gt;从上到下：&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div&#34;&gt;块级元素像默认的&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/a&gt; 每一个元素占据一行，不并排（注意不加任何样式为前提下）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_system.html&#34;&gt;css-demo-1 with CSS animation &amp;amp; SCSS&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;内联元素占满一行，空间不够时，折行，即拦腰折断显示到下一行&lt;/p&gt;

&lt;p&gt;块级元素就算设置了宽度不占满，也不会合成一行，即不并排，除非设置定位属性：默认情况下，每个块级元素独占一行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;文档流小结&#34;&gt;文档流小结&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;流动方向

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;元素从左到右，到达最右边才会换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;元素从上到下，每一个都会另起一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;也是从左到右&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;宽度

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;宽度为所有内部内联元素的宽度，一般即文字宽度的和所决定，指定&lt;code&gt;width&lt;/code&gt;无效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;默认自动计算宽度&lt;code&gt;width:auto;&lt;/code&gt;，指能有多宽就占多宽，&lt;strong&gt;尽量得宽&lt;/strong&gt;，并不一定是&lt;code&gt;100%&lt;/code&gt;，可用&lt;code&gt;width&lt;/code&gt;指定，指定了也不会换行，除非有其他非默认属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;结合前两者部分特点，默认宽度和&lt;code&gt;inline&lt;/code&gt;相同，&lt;strong&gt;尽量得窄&lt;/strong&gt;，紧密包裹里面的内容，但可设置&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;高度

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;高度由&lt;code&gt;inline-height&lt;/code&gt;间接确定，跟它的&lt;code&gt;height&lt;/code&gt;或者&lt;code&gt;padding&lt;/code&gt;无关&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;高度由所有内部正常文档流中的元素高度之和决定，全部包裹住，可以设&lt;code&gt;height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;和&lt;code&gt;block&lt;/code&gt;类似，可以设置&lt;code&gt;height&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;这里&lt;code&gt;内联/行内 | 块级 | 行盒 元素&lt;/code&gt;指的是 &lt;code&gt;display：[inline | block | inline-block]&lt;/code&gt;的元素，因为HTML5标准不分块级、内联级，只分浏览器的默认属性，可以随时切换&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/post/html/html%E5%85%A8%E8%A7%A35html%E5%85%A5%E9%97%A8-%E4%B8%8D%E8%83%BD%E8%BF%99%E4%B9%88%E5%86%99%E6%88%91%E4%B8%8D%E9%80%A0/&#34;&gt;&lt;strong&gt;永远不要在inline元素里写block元素&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;永远不要写&lt;code&gt;width:100%;&lt;/code&gt;&lt;/strong&gt;，除非特殊说明&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;默认&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;的高度是由谁决定的？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_flow.html&#34;&gt;css-demo_flow with CSS animation &amp;amp; SCSS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;demo里默认&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;既不接受宽度，也不接受高度；&lt;/li&gt;
&lt;li&gt;包裹它的&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;并没有被&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;设置的&lt;code&gt;padding&lt;/code&gt;撑开，而&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;的高度由其里面的元素决定，包裹住其中的元素；&lt;/li&gt;
&lt;li&gt;加了内边距的&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;被撑高的只是&lt;strong&gt;可视高度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;元素的&lt;strong&gt;实际高度&lt;/strong&gt;是由&lt;strong&gt;行高&lt;code&gt;line-height&lt;/code&gt;间接确定的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;包裹它的&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;被内部元素的实际高度撑开，行高会继承，写在div后也一样&lt;/li&gt;
&lt;li&gt;间接？还受到不同字体的影响，请看行盒模型&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25808995&#34;&gt;深入理解CSS:字体度量&amp;hellip;by方应杭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;脱离文档流元素不计算入父元素的高度， 具体&lt;a href=&#34;[https://xxx/](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context)&#34;&gt;看层叠上下文 mdn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;属性-overflow-溢出&#34;&gt;属性&lt;code&gt;overflow&lt;/code&gt;溢出&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;当内容&lt;code&gt;content&lt;/code&gt;大于容器&lt;code&gt;box&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;等内容的宽度或高度大于容器的，会溢出&lt;/li&gt;
&lt;li&gt;可用&lt;code&gt;overflow&lt;/code&gt;来设置是否显示滚动条&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;：灵活设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll&lt;/code&gt;：永远显示，太丑，多出的像素会影响布局，不用，在cssReset里干掉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidden&lt;/code&gt;：直接隐藏溢出部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visible&lt;/code&gt;：直接显示溢出部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overflow&lt;/code&gt;可以分为&lt;code&gt;overflow-x&lt;/code&gt;和&lt;code&gt;overflow-y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;脱离文档流-mdn-https-developer-mozilla-org-zh-cn-docs-web-css-overflow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow&#34;&gt;脱离文档流 mdn&lt;/a&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;超出的内容&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;visible 可见&lt;/li&gt;
&lt;li&gt;hidden 不给看&lt;/li&gt;
&lt;li&gt;scroll 可滚（太丑 高度不超过也显示滚动条）&lt;/li&gt;
&lt;li&gt;auto 超出部分，自动显示滚动条&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;里面什么也没有，即高度为0px，里面没有文档流元素&lt;/p&gt;

&lt;p&gt;而&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;里面什么也没有时，加了border，看出高度是由&lt;code&gt;line-height&lt;/code&gt;决定的&lt;/p&gt;

&lt;p&gt;指定除visible(默认值)以外的值将创建一个新的 块级格式化上下文.&lt;/p&gt;

&lt;p&gt;为使overflow有效果，块级容器必须有一个指定的高度（height或者max-height）或者将white-space设置为nowrap。&lt;/p&gt;

&lt;p&gt;注意:  设置一个轴为visible（默认值），同时设置另一个轴为不同的值，会导致设置visible的轴的行为会变成auto。&lt;/p&gt;

&lt;p&gt;注意: 即使将overflow设置为hidden，也可以使用JavaScript Element.scrollTop 属性来滚动HTML元素。&lt;/p&gt;

&lt;p&gt;如果有滚动条，那么里面的元素默认只在第一屏显示，后面留空&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://xmasuhai.xyz/demo-test/css-demo-1/css-demo_overflow.html&#34;&gt;css-demo-overflow with SCSS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;让一个元素脱离文档流&#34;&gt;让一个元素脱离文档流&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;回忆一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;高度由内部文档流元素决定，可以设&lt;code&gt;height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有些元素可以不在文档流中，放飞自我&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;哪些元素脱离文档流
如何让一个元素脱离文档流？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;内联元素的高度是由行高决定的&amp;ndash;&amp;gt;确定了行高的文字内容形成文档流元素&amp;ndash;&amp;gt;决定了其外部块级元素的高度&amp;ndash;&amp;gt;高度撑开其外部的块级元素&lt;/p&gt;

&lt;p&gt;现在让文字即其内联元素脱离文档流&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加属性&lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加属性&lt;code&gt;position:absolute |  fixed;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;怎么让元素不脱离文档流&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;不要用以上提到的属性&lt;/li&gt;
&lt;li&gt;一个元素脱离文档流，就不影响块级父元素的高度，换句话说父容器计算高度时就不把它计算在内了&lt;/li&gt;
&lt;li&gt;以后会学清除浮动，但一旦脱离文档流，就回不去了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;块-内联-内联块-过时的概念&#34;&gt;块、内联、内联块？过时的概念&lt;/h3&gt;

&lt;h4 id=&#34;元素的默认level&#34;&gt;元素的默认level&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;内联/行内 | 块级 | 行盒 元素&lt;/code&gt;指的是 &lt;code&gt;display：[inline | block | inline-block]&lt;/code&gt;的元素，因为HTML5标准不分块级、内联级，只分浏览器的默认属性，可以随时切换，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%8E%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0&#34;&gt;块级元素与行内元素 mdn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认是block-level box的元素&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;默认是in-line-level box的元素&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;display:[inline | block | inline-block|];&lt;/code&gt;来随时切换&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;inline-block&lt;/code&gt;在文档流上很像&lt;code&gt;inline&lt;/code&gt;，但是不会跨两行显示&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flow-layout-and-overflow-流布局和溢出-https-developer-mozilla-org-zh-cn-docs-web-css-css-flow-layout-flow-layout-and-overflow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flow_Layout/Flow_Layout_and_Overflow&#34;&gt;Flow Layout and Overflow 流布局和溢出&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;块级元素设置的高度比内容矮时，内容溢出边框&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;margin合并-死记硬背&#34;&gt;margin合并（死记硬背）&lt;/h3&gt;

&lt;h3 id=&#34;两种盒模型-border-box更符合人类思维-直觉&#34;&gt;两种盒模型（border-box更符合人类思维、直觉）&lt;/h3&gt;

&lt;p&gt;更符合人类思维、直觉&lt;/p&gt;

&lt;p&gt;eg.
第三视角&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS不是重点，面向工作学习市场上比较需要的技术才是王道，张*旭的职业发展不适大多数人，选择比努力更重要&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-23-12-30-0.pdf&#34;&gt;CSS 基础概念.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【Git入门7】Git远程仓库   GitHub常用操作流程3_下载</title>
      <link>http://xmasuhai.xyz/post/github/git%E5%85%A5%E9%97%A87git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-github%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B3_%E4%B8%8B%E8%BD%BD/</link>
      <pubDate>Tue, 07 Jan 2020 21:36:30 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/github/git%E5%85%A5%E9%97%A87git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-github%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B3_%E4%B8%8B%E8%BD%BD/</guid>
      
        <description>

&lt;h3 id=&#34;下载别人的代码&#34;&gt;下载别人的代码&lt;/h3&gt;

&lt;h4 id=&#34;1-方法&#34;&gt;1. 方法&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 如果是自己的机子，用SSH链接下载，&lt;code&gt;git clone git@xxxx[目标路径]&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 如果是不同机子，要上传新的SSH key（一机一key)&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 许多场景都是机子未和别人的账号绑定,只能用HTTPS链接:&lt;code&gt;git clone https://github.com/xxxx/***.git&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 自己不同的机子，对应相同的GitHub账号&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; cd 目标路径！！！&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;git add &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; [git pull]（同事改过代码）&amp;amp;&amp;amp; git push四联操作&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-步骤&#34;&gt;2. 步骤&lt;/h4&gt;

&lt;p&gt;第1步：复制SSH key/HTTPS链接地址&lt;/p&gt;

&lt;p&gt;第2步：&lt;code&gt;cd [目标路径父目录]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第3步：&lt;code&gt;git clone git@xxxx.git [目标路径]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第4步：&lt;code&gt;cd [目标路径]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第5步：完成&lt;/p&gt;

&lt;h4 id=&#34;3-如何下载某个分支&#34;&gt;3. 如何下载某个分支&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;cd [目标路径父目录]&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 每次先下载整个仓库，然后&lt;code&gt;git checkout xxx #xxx分支名（如果有的话）&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; or 搜 &lt;a href=&#34;https://stackoverflow.com/questions/1778088/how-do-i-clone-a-single-branch-in-git/7034921#7034921&#34;&gt;难记的命令&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-git-clone-的三种变形&#34;&gt;4. &lt;code&gt;git clone&lt;/code&gt;的三种变形&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone git@?/xxx1.git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 会在当前目录下创建一个叫xxx1的目录&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;xxx1/.git&lt;/code&gt;是本地仓库&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 马上接一句&lt;code&gt;cd xxx1&lt;/code&gt;，要形成条件反射&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone git@?/xxx2.git yyy1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 重命名目录：在本地新建yyy1目录&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 马上接一句 &lt;code&gt;cd yyy1&lt;/code&gt;，要形成条件反射&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone git@?/xxx3.git .&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新建 xxx&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 马上接一句&lt;code&gt;cd xxx&lt;/code&gt;，要形成条件反射&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 最后一个字符是点，注意有空格&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 不会小建目录，使用当前目录容纳代码和.git&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 当前目录一开始最好是个空目录，不然后果自负&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;clone 之后马上接cd&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;5-git-pull-冲突了怎办&#34;&gt;5. &lt;code&gt;git pull&lt;/code&gt; 冲突了怎办&lt;/h4&gt;

&lt;p&gt;和解决&lt;code&gt;git merge&lt;/code&gt;冲突一样：&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;发现冲突&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 合并分支时 ，会得到CONFLICT提示&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 使用&lt;code&gt;git status -sb&lt;/code&gt;查看哪个/哪些文件冲突了&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UU&lt;/code&gt; 表示两边都改了&lt;/li&gt;
&lt;li&gt;-s表示summary -b表示brunch&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;解决冲突&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 依次打开每个文件&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 搜索====&lt;strong&gt;四个等于号&lt;/strong&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 在上下两个部分中选择要保留的代码，只选上面/只选下面/都保留&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 删除不用的代码&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 删除==== &amp;lt;&amp;lt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;这些标记&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;&lt;code&gt;git add&lt;/code&gt;暂存对应的文件&lt;/strong&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 再次 git status -sb，解决下一个文件的冲突&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 直到没有冲突，&lt;strong&gt;运行&lt;code&gt;git commit&lt;/code&gt;（注意不需要选项，自动添加fix conflict）&lt;/strong&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;6-总结&#34;&gt;6. 总结&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;自己的代码：用SSH链接下载&lt;/li&gt;
&lt;li&gt;别人的代码：用HTTPS链接下载&lt;/li&gt;
&lt;li&gt;5个步骤&lt;/li&gt;
&lt;li&gt;只需要两句话&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;git remote add repo2 git@xxx&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;git push -u repo2 master&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;如果提示&lt;code&gt;git pull...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 说明新建项目时，在远程仓库创建了一些你本地仓库没有的文件&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 只需要运行&lt;code&gt;git pull&lt;/code&gt;之后，再运行刚才的命令（&lt;code&gt;git push -u 仓库名 分支名&lt;/code&gt; 即可）&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;下载分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt; 三种变形&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;大总结&#34;&gt;大总结&lt;/h3&gt;

&lt;h4 id=&#34;常用命令&#34;&gt;常用命令&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 大部分时候，只需要用到 &lt;code&gt;git clone &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 遇到报错，翻译，查原因&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;远程仓库&#34;&gt;远程仓库&lt;/h4&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 只是本地仓库的备份，所以变化都要先commit到本地仓库，然后push到远程&lt;/label&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[x] 不下载部分代码，只clone整个仓库&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[x] 类似我要查看在哪个分支分支，用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[x] 我要查看在哪个远程仓库，用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote # -v
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?sxsrf=ACYBGNT3nzzp-4UUv6olhs19dX9xhbhOTQ%3A1575821490674&amp;amp;source=hp&amp;amp;ei=siDtXe33JY3l-AbSm6-QDQ&amp;amp;q=github+%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93&amp;amp;oq=github+%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93&amp;amp;gs_l=psy-ab.3...1944.24432..25638...2.0..0.101.1131.11j2......0....2j1..gws-wiz.....10..35i362i39j0.GAX7DrVupEM&amp;amp;ved=0ahUKEwjtmLbBuKbmAhWNMt4KHdLNC9IQ4dUDCAk&amp;amp;uact=5&#34;&gt;需要谨慎操作的：GitHub 删除一个远程仓库&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【Git入门6】Git远程仓库   GitHub常用操作流程2_上传</title>
      <link>http://xmasuhai.xyz/post/github/git%E5%85%A5%E9%97%A86git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-github%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B2_%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Mon, 06 Jan 2020 21:50:47 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/github/git%E5%85%A5%E9%97%A86git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-github%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B2_%E4%B8%8A%E4%BC%A0/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;设置了公钥，就能上传和下载了&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;git pull&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;git push&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;git clone&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;1-两行命令&#34;&gt;1. 两行命令&lt;/h4&gt;

&lt;p&gt;第0步 准备工作&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;新建GitHub Repo(Repositories),任意Repository name&lt;/li&gt;
&lt;li&gt;在快速设置中，默认SSH(勿选HTTPS，坑，每次要输密码，不方便，骂死你)&lt;/li&gt;
&lt;li&gt;复制页面里的代码（关掉翻译）
「复制SSH 地址（注意是以git开头的而不是HTTPS地址）」&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;已有本地仓库&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin git@github.com:yourName/yourRepoName.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;告诉本地仓库，对应到远程仓库的地址，仓库名是origin&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;第1步 第一次上传：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-u upstream&lt;/code&gt; 第一次上传时，记下本次匹配，推到origin仓库的master分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u origin master&lt;/code&gt;只有第一次需要写，以后直接&lt;code&gt;git push&lt;/code&gt;就好了&lt;/li&gt;
&lt;li&gt;master（本地）-&amp;gt;master（GitHub）&lt;/li&gt;
&lt;li&gt;刷新远程仓库页面就可以看到上传的内容了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没有本地仓库，完全新建时&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;# RepoName&amp;quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin git@github.com:yourName/yourRepo Name.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; 上传的是本地仓库提交过的一个分支，并不是当前看到的代码&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以提交多个分支：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git branch x
git checkout x
## ... change sth ...
git add .
git commit -am &amp;quot;log&amp;quot;
git push -u origin x
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意要加-u，因为是第一次上传此分支* [new branch]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;x（本地）-&amp;gt;x（GitHub）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;类似我要查看分支:&lt;code&gt;git branch&lt;/code&gt;，我要查看远程仓库：&lt;code&gt;git remote&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;关联你新建的远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin git@xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 在本地添加远程仓库的地址&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; origin是远程仓库的默认名字，可以换，不建议换&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 勿使用&lt;code&gt;https://&lt;/code&gt;地址，每次要输密码烦&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始提交到远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 推送本地master分支到远程origin的master分支&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;strong&gt;如果由于手贱，在创建远程仓库时加了README.md等原因，导致远程仓和你本地仓文件不一致，提示你应该git pull&amp;hellip;，就git pull一下&lt;/strong&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;git pull&lt;/code&gt;是先把远程分支合并到本地对应的分支&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 如果远程分支没有（被其他人）更新过，才可以省略&lt;code&gt;git pull&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;code&gt;-u origin master&lt;/code&gt; 的意思是设置上游分支&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 之后就可以不用设置直接&lt;code&gt;git pull&lt;/code&gt;;&lt;code&gt;git push&lt;/code&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg.
&lt;strong&gt;比如有个repo2仓库&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add repo2 gti@github.com:yourName/git-demo-02.git
git push -u repo2 master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不可直接&lt;code&gt;git pull&lt;/code&gt;，默认去origin仓库;被![reject]，这时需要将repo2仓库的master分支复制到当前的master 分支：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout master
git pull repo2 master:master
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;master -&amp;gt; repo2/master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u repo2 master
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;被拒绝合并，因为没有关联，可以谨慎使用强制合并：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u repo2 master -f
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;小心同事打你&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;如何上传其他分支&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[x] 方法一：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin x:x
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; 仓库名 分支名(源头：本地x):分支名（目标：远程x）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[x] 方法二：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout x
git push -u origin x
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; 仓库名 分支名&lt;/li&gt;
&lt;li&gt;GitHub远程仓库是本地仓库（分支）的一个拷贝而已（备份.git/）&lt;/li&gt;
&lt;li&gt;本地仓库在硬盘里的位置（相对路径）不影响远程仓库&lt;/li&gt;

&lt;li&gt;&lt;p&gt;远程的Repo(Repositories)相当于在GitHub上的一个文件夹，git clone 下来的文件夹名就是Repo的名称&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;类似我要查看分支:&lt;code&gt;git branch&lt;/code&gt;，我要查看远程仓库：&lt;code&gt;git remote&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;区分origin和远程仓库的名称：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/27712995&#34;&gt;GitHub 里面的 origin 到底代表啥意思&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoom.com/question/2cxSb/git命令中-origin-和-remote-有什么区别-重复&#34;&gt;git命令中&amp;rsquo;origin&amp;rsquo;和&amp;rsquo;remote&amp;rsquo;有什么区别？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xuyaowen/p/git-origin.html&#34;&gt;git 的 origin 的含义&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-10-15-17-35.pdf&#34;&gt;git 远程仓库.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
    <item>
      <title>【CSS非全解01】CSS基础-体系化学CSS？</title>
      <link>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A301css%E5%9F%BA%E7%A1%80-%E4%BD%93%E7%B3%BB%E5%8C%96%E5%AD%A6css/</link>
      <pubDate>Sat, 04 Jan 2020 23:02:28 +0800</pubDate>
      
      <guid>http://xmasuhai.xyz/post/css/css%E9%9D%9E%E5%85%A8%E8%A7%A301css%E5%9F%BA%E7%A1%80-%E4%BD%93%E7%B3%BB%E5%8C%96%E5%AD%A6css/</guid>
      
        <description>

&lt;h2 id=&#34;大纲&#34;&gt;大纲&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;基础部分学习占比：&lt;code&gt;HTML 1%&lt;/code&gt; &lt;code&gt;CSS 19%&lt;/code&gt; &lt;code&gt;Javascript 80%&lt;/code&gt; (&lt;code&gt;基础部分 ？%&lt;/code&gt; &lt;code&gt;HTTP等WEB知识 ?%&lt;/code&gt; &lt;code&gt;前端工具 ？%&lt;/code&gt; &lt;code&gt;框架 ?%&lt;/code&gt; &lt;code&gt;项目 ?%&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/People/howcome/p/cascade.html&#34;&gt;CSS历史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://acid3.acidtests.org/&#34;&gt;Acid Test for browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSS是艺术（非逻辑，用测试经验来学，空间感，所见即所学）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Style/CSS/specs.en.html&#34;&gt;CSS版本&lt;/a&gt;（CSS4*3*2.1 分模块升级 模块版本level 搜 &lt;strong&gt;css spec&lt;/strong&gt; ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference&#34;&gt;体系化学习？CSS mdn参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文档流（Normal Flow）&lt;/li&gt;
&lt;li&gt;盒模型（[Content | Border] Box）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;xx层叠&lt;/strong&gt;？样式表（进行样式声明）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;样式重叠（多次对同一选择器）&lt;/li&gt;
&lt;li&gt;选择器重叠（用不同选择器对同一元素）&lt;/li&gt;
&lt;li&gt;文件重叠（多个文件）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;样式层叠覆盖，CSS极度灵活（不正交 属性、样式不一一对应确定）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;浏览器相关的几个网站(&lt;a href=&#34;https://caniuse.com/&#34;&gt;兼容性caniuse.com&lt;/a&gt; | &lt;a href=&#34;https://tongji.baidu.com/research/site?hmsr=%E7%BB%9F%E8%AE%A1footer%E9%93%BE%E6%8E%A5&amp;amp;hmpl=footer&amp;amp;hmcu=footer&amp;amp;hmkw=&amp;amp;hmci=footer&#34;&gt;市场份额tongji.baidu.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;浏览器内核(&lt;a href=&#34;https://csstriggers.com/&#34;&gt;csstriggers.com&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器业界毒瘤（QQ、百度），扛把子UC，新星夸克&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CanIUse 看数据时不用翻译，看注释时用&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Edge 对 calc() within grid 支持不好&lt;/li&gt;
&lt;li&gt;Safari 仍然不支持intrinsic and extrinsic sizing with grid 的属性 grid-template-rows&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/%E6%BC%94%E7%A4%BA%E8%AF%B4%E6%98%8E#CSS&#34;&gt;开源 Web 技术示例#CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;体系化学css-若不自-也可成功&#34;&gt;体系化学CSS？若不自*，也可成功&lt;/h2&gt;

&lt;p&gt;google &lt;a href=&#34;https://www.google.com/search?q=css+spec&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=css+spec&amp;amp;aqs=chrome..69i57j0l7.395j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;css spec&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/&#34;&gt;mdn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TL,DR
在CSS新知识到来的时候，马上学会&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;写css必须学会先&#34;&gt;写CSS必须学会先&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;语法（写代码）&lt;/li&gt;
&lt;li&gt;调试（哪写错）&lt;/li&gt;
&lt;li&gt;查资料（为了抄）&lt;/li&gt;
&lt;li&gt;标准制定者&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CRM学习法之外的在线临时调试&lt;code&gt;playground&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/dashboard/recent&#34;&gt;&lt;code&gt;codesandbox&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;https://codepen.io/pen/&#34;&gt;&lt;code&gt;codepen&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;http://js.jirengu.com/?html,css,output&#34;&gt;&lt;code&gt;JSBin&lt;/code&gt;&lt;/a&gt;
&lt;a href=&#34;https://jsfiddle.net/&#34;&gt;&lt;code&gt;jsFiddle&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;css语法一-样式语法&#34;&gt;CSS语法一：样式语法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;selectors-list {
  properties-list
}

选择器{
    属性名:属性值;
    /* 只有注释 */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;selectors-list ::=
    selector[:pseudo-class] [::pseudo-element]
    [, selectors-list]&lt;/p&gt;

&lt;p&gt;properties-list ::=
    [property : value] [; properties-list]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.a,
#b,
[c=&amp;quot;d&amp;quot;]&amp;gt;e f,
g+h,
i~j{
    border:1px red solid;
}
strong {
  color: red;
}
div.menu-bar li:hover &amp;gt; ul {
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意事项&#34;&gt;注意事项&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;所有符号都是英文符号，IDE只开英语输入，中文从记事本里粘贴进来（开不同应用不同输入法：both Win &amp;amp; Mac）；标点写错，浏览器会警告，但不报错&lt;/li&gt;
&lt;li&gt;区分大小写，a 和 A 不同&lt;/li&gt;
&lt;li&gt;没有//注释，只是把选择器拼错不生效而已&lt;/li&gt;
&lt;li&gt;最后一个分号建议不要省略&lt;/li&gt;
&lt;li&gt;任何地方写错了，都不报错，浏览器会直接忽略，继续渲染，只给警告⚠️&lt;/li&gt;
&lt;li&gt;怎么纠错？调试看下文&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，规则定义中的任何CSS语法错误都将使整个规则无效。无效的规则将被浏览器忽略。&lt;/p&gt;

&lt;p&gt;注意CSS定义完全是基于文本(ASCII)的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;p{
    /* 正确 */
    color:red;
    /* 不正规的“注释”：拼错 */
    xcolor:red;
    //color:red;
    /* 注释 */
    /* color:red; */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;css语法二-常用-语法&#34;&gt;CSS语法二：常用@语法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;@charset &amp;quot;UTF-8&amp;quot;; /* 必须放在第一行；必须以分号`;`结尾 */
@import url(2.css); /* 导入另一个CSS文件；必须以分号`;`结尾 */
@media (min-width:100px) and (max-width:200px){
    /* 语法一：样式语法 */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意事项2&#34;&gt;注意事项2&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@charset&lt;/code&gt;必须放在第一行，解析中文字符&lt;/li&gt;
&lt;li&gt;前两个@语法必须以分号&lt;code&gt;;&lt;/code&gt;结尾&lt;/li&gt;
&lt;li&gt;@media 单独学&lt;/li&gt;
&lt;li&gt;charset字面是字符集的意思，UTF-8是字符编码 encodeing，历史遗留问题&lt;/li&gt;
&lt;li&gt;encodeing ∈ charset&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;问：charset 指什么？；答：指文件编码（而不是字符集）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;调试css&#34;&gt;调试CSS&lt;/h3&gt;

&lt;h4 id=&#34;方法&#34;&gt;方法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;a href=&#34;https://jigsaw.w3.org/css-validator/#validate_by_input&#34;&gt;W3C验证器&lt;/a&gt;（命令行工具），麻烦 不用&lt;/li&gt;
&lt;li&gt;VSCode看颜色（semi-colon）大概的位置，不精确，不智能&lt;/li&gt;
&lt;li&gt;WebStorm看颜色 （精确定位错误；智能提示）&lt;/li&gt;
&lt;li&gt;开发者工具看警告&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css xxx generator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;eg. google &lt;code&gt;css gradient generator&lt;/code&gt; &lt;code&gt;css shadowbox generator&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;浏览器开发者工具的使用步骤&#34;&gt;浏览器开发者工具的使用步骤&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用指针找到元素&lt;/li&gt;
&lt;li&gt;看它是否有选择器&lt;/li&gt;
&lt;li&gt;看它的样式是否被划掉（⚠️黄色三角警告 + &lt;del&gt;删除线&lt;/del&gt; +  提示非法值 invalid property value ）&lt;/li&gt;
&lt;li&gt;被其他样式覆盖或写错&lt;/li&gt;
&lt;li&gt;看它的样式是否有警告&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;border调试法&#34;&gt;Border调试法&lt;/h4&gt;

&lt;h5 id=&#34;步骤&#34;&gt;步骤&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;定位某个元素有问题&lt;/li&gt;
&lt;li&gt;给这个元素加border&lt;/li&gt;
&lt;li&gt;border没出现？选择器或语法错了，拼错&lt;/li&gt;
&lt;li&gt;border出现了，看看边界是否符合预期&lt;/li&gt;
&lt;li&gt;bug解决了才可以吧border 删掉&lt;/li&gt;
&lt;li&gt;逐行移动&lt;code&gt;border:1px solid red;&lt;/code&gt;看选择器是否生效；属性匹配到哪个属性了；具体哪个属性失效；&lt;/li&gt;
&lt;li&gt;加到VScode 等IDE的snnipets里，每次省个几秒：&lt;code&gt;border大法好，用border得永生，现已加入snippets豪华套餐&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;好像和&lt;a href=&#34;https://docs.emmet.io/cheat-sheet/&#34;&gt;Emmet&lt;/a&gt;想到一块去了：&lt;code&gt;emmmet bd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其实如果学了SCSS的&lt;code&gt;@mixin&lt;/code&gt;的话&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;CSS的border调试法就相当于JS的log调试法&lt;/li&gt;
&lt;li&gt;请重复使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以在开发者工具里样式上加一段：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;*{
    border:1px solid red;!important
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看看终极border大法显示页面布局&lt;/p&gt;

&lt;h3 id=&#34;常见错误&#34;&gt;常见错误&lt;/h3&gt;

&lt;h4 id=&#34;低级错误&#34;&gt;低级错误&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;拼写错误（选择器、属性名、属性值）&lt;/li&gt;
&lt;li&gt;大小写&lt;/li&gt;
&lt;li&gt;漏掉分号&lt;/li&gt;
&lt;li&gt;非英文符号&lt;/li&gt;
&lt;li&gt;反花括号漏掉&lt;/li&gt;
&lt;li&gt;没写单位&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;排除错误：推理，把正确可能性排除，剩下的无论看起来多对，肯定有错&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;非低级错误&#34;&gt;非低级错误&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;没有&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;查资料&#34;&gt;查资料&lt;/h3&gt;

&lt;h4 id=&#34;网站&#34;&gt;网站&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/search?q=mdn&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=mdn&amp;amp;aqs=chrome..69i57j0j69i61l3j69i65l3.703j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;google &lt;code&gt;关键词 + mdn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&#34;&gt;google &lt;code&gt;关键词 + CSS tricks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/search?q=%E5%BC%A0%E9%91%AB%E6%97%AD&amp;amp;rlz=1C5CHFA_enJP765JP765&amp;amp;oq=%E5%BC%A0%E9%91%AB%E6%97%AD&amp;amp;aqs=chrome..69i57j0l4j69i61l2.16802j0j8&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;google &lt;code&gt;关键词 + 张鑫旭&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;书籍&#34;&gt;书籍&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;不推荐，以练习为主&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;搜练习素材-注意版权及商用法律风险&#34;&gt;搜练习素材（注意版权及商用法律风险）&lt;/h3&gt;

&lt;h4 id=&#34;psd&#34;&gt;PSD&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freepik.com/search?query=web&amp;amp;type=psd&#34;&gt;Freepik 搜PSD web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn.365psd.com/free-psd/ui-kits&#34;&gt;365PSD 搜UI套件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;效果图-可能不提供下载-肉眼-或工具扒&#34;&gt;效果图（可能不提供下载，肉眼，或工具扒）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tympanus.net/codrops/&#34;&gt;codrops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codepen.io/&#34;&gt;codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dribbble.com&#34;&gt;dribbble搜web&lt;/a&gt; 顶级设计社区&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;仿商业网站-排名按喜好-分-先-后&#34;&gt;仿商业网站(排名按喜好&amp;gt;分&amp;gt;先&amp;gt;后)&lt;/h4&gt;

&lt;p&gt;hobby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gcores.com&#34;&gt;机核&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dgtle.com&#34;&gt;数字尾巴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com&#34;&gt;少数派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ximalaya.com&#34;&gt;喜马拉雅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com&#34;&gt;哔站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;tech blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://xiedaimala.com/bbs/topics&#34;&gt;河码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/user/59abfad26fb9a0248f4aa221&#34;&gt;掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com&#34;&gt;思否&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com&#34;&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com&#34;&gt;简书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;勿沉迷临摹&#34;&gt;勿沉迷临摹&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;每个类型临摹一两个即可&lt;/li&gt;
&lt;li&gt;PC站、移动端、UI套件&lt;/li&gt;
&lt;li&gt;再多无益&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;WB不超过一年半，don&amp;rsquo;t repeat yrself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;css标准制定者-你爵士和耐先生&#34;&gt;CSS标准制定者：你爵士和耐先生&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Style/CSS/specs.en.html&#34;&gt;W3C&lt;/a&gt;：搜&lt;code&gt;CSS spec&lt;/code&gt;，看CSS最新标准，字典级文档，TL,DR&lt;/li&gt;
&lt;li&gt;可以看 &lt;a href=&#34;http://www.ayqy.net/doc/css2-1/cover.html&#34;&gt;CSS2.1标准的中文版&lt;/a&gt; 运用最广泛的应用标准-&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;规范是你遇到问题用来查的——字典级文档&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;开始crm学习法&#34;&gt;开始CRM学习法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;抄-运行-改&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;快速上手scss-https-xiedaimala-com-tasks-42e05a0e-9233-4097-addd-43e61244be06-video-tutorials-1a2a0d76-c4ea-4f50-9ca9-a77c92db39dc&#34;&gt;&lt;a href=&#34;https://xiedaimala.com/tasks/42e05a0e-9233-4097-addd-43e61244be06/video_tutorials/1a2a0d76-c4ea-4f50-9ca9-a77c92db39dc&#34;&gt;快速上手SCSS&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;直构所有CSS demo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- Article End --&gt;

&lt;hr /&gt;

&lt;!-- test --&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;·未完待续·&lt;/div&gt;

&lt;!-- ok --&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文章&#34;&gt;参考文章&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://static.xiedaimala.com/xdml/file/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2019-8-23-12-30-0.pdf&#34;&gt;CSS 基础概念.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;相关文章&#34;&gt;相关文章&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;作者： Joel&lt;/li&gt;
&lt;li&gt;文章链接：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xmasuhai.xyz/posts/版权声明链接/&#34;&gt;版权声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;非自由转载-非商用-非衍生-保持署名&lt;/li&gt;
&lt;li&gt;&lt;a style=&#39;color:#DB2D5D;&#39; href=&#39;https://xiedaimala.com/bbs/users/8c266e6f-55a2-4348-a180-17cb8cdb2c46#/?page=1&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;河&lt;/a&gt;
&lt;a style=&#39;color:#006CFF;&#39; href=&#39;https://juejin.im/user/59abfad26fb9a0248f4aa221&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;掘&lt;/a&gt;
&lt;a style=&#39;color:#009A61;&#39; href=&#39;https://segmentfault.com/u/joel_59b17eb9d2155&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;思&lt;/a&gt;
&lt;a style=&#39;color:#0084FF;&#39; href=&#39;https://www.zhihu.com/people/xue-shou-41/posts&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;知&lt;/a&gt;
&lt;a style=&#39;color:#EA6F5A;&#39; href=&#39;https://www.jianshu.com/u/079916729823&#39; target=&#39;_blank&#39; rel=&#39;noreferrer noopener&#39;&gt;简&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
      
    </item>
    
  </channel>
</rss>
